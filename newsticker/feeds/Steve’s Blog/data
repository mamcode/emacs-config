;; -*- coding: utf-8 -*-
(("Steve’s Blog" "More or less random musings about open-source software, Plone and Davis, California." "http://www.stevemcmahon.com" (20849 10024 210867) feed 0 nil nil ((title nil "Steve’s Blog") (link nil "http://www.stevemcmahon.com") (description nil "
    
      More or less random musings about open-source software, Plone and Davis, California.
    
  ") (syn:updatePeriod nil "daily") (syn:updateFrequency nil "1") (syn:updateBase nil "2010-02-25T19:47:08Z") (image ((rdf:resource . "http://www.stevemcmahon.com/logo.png"))) (items nil (rdf:Seq nil (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/dexterity-and-plone-4.3"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/fidgeting-widgets-at-the-emerald-sprint"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/developing-plone-in-a-box"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/plones-unified-installer-whats-new-for-4.3"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/inez-becomes-a-plone-developer"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/installers-2011"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/pfggit"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/pp4d"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/2011pctraining"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/pfg-fieldsets"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/rapture-sprint"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/pfg-rapture"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/pssa-sprint"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/p3inets"))) (rdf:li ((rdf:resource . "http://www.stevemcmahon.com/steves-blog/not-just-coders"))))))) ("Dexterity and Plone 4.3" "Dexterity is part of Plone 4.3, and there have been a few changes." "http://www.stevemcmahon.com/steves-blog/dexterity-and-plone-4.3" (20844 24931) new 1 nil nil ((title nil "Dexterity and Plone 4.3") (link nil "http://www.stevemcmahon.com/steves-blog/dexterity-and-plone-4.3") (description nil "Dexterity is part of Plone 4.3, and there have been a few changes.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "<h3>Dexterity ...</h3><ul><li>Is a content-type development system for Plone;</li><li>Allows you to develop through-the-web or in Python packages;</li><li>Is light-weight, fast and flexibile;</li><li>Works well with Archetypes content;</li><li>Will eventually replace Archetypes as the basis for Plone's stock content types; and</li><li><i><strong>Is built into Plone 4.3!</strong></i></li></ul><p>You should be using Dexterity for most Plone content-type development for Plone 4.2+. The only significant exception is for translatable content using LinguaPlone, which does not support Dexterity. A successor to LinguaPlone is in the works, and will support Dexterity.</p><blockquote class=\"pullquote\">Want more? I'll be teaching a class on Developing with Dexterity, June 3-4 at <a class=\"external-link\" href=\"https://midwest.plonesymp.org/training\">Plone Symposium Midwest</a>.</blockquote><h2>What's New</h2><p>Plone 4.3 is shipping with Dexterity 2.0.x. There have been a few changes from the 1.0.x series, but nothing that will pose a significant migration problem. See the <a class=\"external-link\" href=\"http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3\">4.3 section of the Plone Upgrade Guide</a> for the important details. I'll also discuss some of them below.</p><h3>Documentation</h3><p>When Dexterity was an option, its main documentation was in the documentation section of its add-on package in the Plone software center. Now, you may find the <a class=\"external-link\" href=\"http://developer.plone.org/reference_manuals/external/plone.app.dexterity\">Dexterity Developers' Manual</a> on <a class=\"external-link\" href=\"http://developer.plone.org\">developer.plone.org</a>.</p><p>This is exactly the same documentation that you'll find in the \"docs\" directory of the plone.app.dexterity package. So, it's maintained as part of Dexterity, and automatically included in developer.plone.org through Sphinx and readthedocs facilities. Thanks to Mikko and his documentation team for making this happen! There is, by the way, a new reference section documenting <a class=\"external-link\" href=\"http://developer.plone.org/reference_manuals/external/plone.app.dexterity/reference/dexterity-xml.html\">Dexterity's XML name spaces</a>.</p><h3>Grok</h3><p>Grok is a set of agile-development tools and conventions that makes it possible to do many things through Python alone that would ordinarily require ZCML wiring. Grok was a dependency of Dexterity 1.0, but the Plone Framework team decided that they did not want it to become a dependency of Plone. Much of what's new in Dexterity 2.0 is about removing Dexterity's dependence on Grok.</p><p>The changes make it possible to develop Dexterity packages (this does not apply to through-the-web development) in two different ways: using Grok conventions and tools or by wiring adapters and views through ZCML.</p><p>Dexterity's developers still favor Grok. While I think the Framework Team was right to avoid the Grok dependency, Grok makes Dexterity development faster and easier to teach and learn.</p><p>To adapt a Dexterity 1.0.x package to 2.0.x, you only need to make one change in your package, to the install_requires section of your setup.py file, to specify the grok extra:</p><pre id=\"_mcePaste\">install_requires=[<br /> <span>...,<br /></span><span>'plone.app.dexterity [grok]',<br /></span><span>...,</span></pre><div></div><p>If you're creating a package, the <a class=\"external-link\" href=\"http://developer.plone.org/reference_manuals/external/plone.app.dexterity/prerequisite.html#creating-a-package\">Dexterity Developer Manual instructions</a> tell you the couple of additional things you need to do to set up Grok, and the zopeskel.dexterity skeleton includes everything you need.</p><h3>Grok static resources</h3><p>Grok has done some changing itself. It no longer automatically maps package directories named \"static\" into being Zope/Plone resource directories for CSS, js and image files. You may turn that back on, though with a single directive in your configure.zcml file:</p><pre>  &lt;browser:resourceDirectory<br /><span>    name=\"namespace.package\"<br /></span><span>    directory=\"static\" /&gt;</span></pre><p>where \"namespace.package\" is replaced by the dotted name of your package. With that done, you may use http://the_page_url/++resource++product.dotted.name/test.js style URLs to reference files in the static directory.</p><h3>Relations and RelationFields</h3><p>If you've been using RelationFields in Dexterity 1.0.x, you should read the \"Relation support no longer included by default<span>\" section of the </span><a class=\"external-link\" href=\"https://github.com/plone/plone.app.dexterity/blob/master/RELEASE_NOTES.txt\">Dexterity 2.0 release notes</a><span>. That will give you a good introduction to the 2.0 changes and allow you to make a decision whether or not you want to use RelationFields going forwards.</span></p><h3>Items and Containers</h3><p>When creating a new content type in Dexterity 1.0.x — whether in a package or TTW — the first decision you had to make was whether the content type would be for an Item (not folderish) or a Container (folderish). Going forward, Dexterity is favoring a style where everything is derived from the container type, but you just decide whether or not it can have contents. This is nice for a couple of reasons:</p><ol><li><span>Usability testing was showing that new users didn't understand the issues at the point of creating a new type; and</span></li><li><span>Deriving from Item left you stuck with a content type that couldn't become a container. Derive from Container, and you may change your mind later.</span></li></ol><p>Dexterity's Item class still works, so old code needs no updates.</p><h3><span>ZopeSkel</span></h3><p>zopeskel.dexterity has been updated to handle the minor code differences. Make sure you use zopeskel.dexterity 1.5.0 or greater for use with Plone 4.3.</p><h3><span>Thanks</span></h3><p>Dexterity 2.0 and the inclusion of it in Plone 4.3 was a lot of work. We all owe big thanks to David Glick, who did the lion's share of the work, and the many others who did smaller parts. And, thanks to the Framework Team for their diligent guidance.</p>") (dc:publisher nil "No publisher") (dc:creator nil "mcmahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2013-04-15T20:21:55Z") (dc:type nil "Blog Entry"))) ("Fidgeting Widgets at the Emerald Sprint" "Improving widgets for Dexterity" "http://www.stevemcmahon.com/steves-blog/fidgeting-widgets-at-the-emerald-sprint" (20762 52468) new 2 nil nil ((title nil "Fidgeting Widgets at the Emerald Sprint") (link nil "http://www.stevemcmahon.com/steves-blog/fidgeting-widgets-at-the-emerald-sprint") (description nil "Improving widgets for Dexterity") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "<p>Take a look at <a class=\"external-link\" href=\"http://www.coactivate.org/projects/emerald-sprint/blog/2013/02/12/davids-summary-of-the-emerald-sprint/\">David Glick's great sprint wrapup</a> to get an idea of everything that happened at last weekend's Emerald Sprint. This is just a report on my little piece of it.</p><p>I wanted to work on widgets at the sprint for a couple of reasons:</p><ol><li>Enhancing the Dexterity widgets is a key part of achieving feature parity with Archetypes, which we need to bring over the next set of developers;</li><li>My knowledge of z3c.form widgets was at a surface level, and I wanted to get better with them.</li></ol><p>My entry point for this was to try and polish up the Choice and Multi-Choice field widgets. I've always liked the Archetypes feature that lets you choose whether you wish to use an HTML select box or checkboxes/radio buttons for choice fields. I also like the \"auto\" feature where Archetypes will automatically choose a select box if you've a large number of choices, but use checkboxes or radio buttons for smaller numbers.</p><p>My goal was to add this to Dexterity's choice widgets. I saw this as really just an enhancement of the lowest level of usability. Nothing I'd do here would preclude adapting to more interactive, JavaScript-enabled functionality in the future.</p><h3>Adapting the Widgets</h3><p>Dexterity uses z3c.form for its form library and zope.schema to represent the fields. z3c.form fields are themselves schema-based. zope.schema fields are used to describe all the attributes of the field widgets.</p><p>Dexterity exposes only a small fraction of those attributes in the schema editor. You may get at the rest by editing the supermodel XML or via Python. But we really don't need — or want — to present the through-the-Plone user of Dexterity with options to set most of the widget attributes. So, the Dexterity schema editor offers editing for only the most useful attributes.</p><p>Up until recently, there wasn't a good way to add to the list of widget attributes or the set that Dexterity exposes. Fortunately, our super sprint master, David Glick, had anticipated this need and has created experimental branches of plone.schemaeditor and plone.autoform to support adding and exposing widget attributes via adapters.</p><p>I've added to the 4.3 coredev <a class=\"external-link\" href=\"https://github.com/plone/buildout.coredev/blob/4.3/widgetdev.cfg\">a configuration file</a> that pulls in David's branches as well as the branch of plone.app.z3cform where I was working on the choice widgets. Eventually, this will all be merged into the master branches for the packages.</p><p>The basics aren't too conceptually hard. To add and or expose widget attributes, you:</p><ul><li>Build an interface class that subclasses the main version of the widget;</li><li>Provide a field widget factory for the Plone layer that will use your interface;</li><li>Provide an export/import handler that does the serialization of your widget attribute to and from supermodel.</li></ul><p>The implementation is much harder, but David has provided classes that do all the work. You only need to subclass them and wire them in with ZCML. That's all done with a very small number of lines of code.</p><h3>Difficulty in the Details</h3><p>My first few tries at this went poorly. I was picking the wrong widget interface classes to subclass, and the schema editor wasn't finding my adapted widgets. Planting break points where the adaptation takes place allowed me to find out which interfaces were actually in use.</p><p>Much more difficulty came from some oddities of the z3c.form choice widgets. It turns out that there's a clever bit of code that is used to dispatch all the various kinds of selection fields you might be using (for example, using some query mechanism to provide values) to the widgets. This one drove me nuts and required at least an hour of David's time to track down. Most types of widgets should be much easier.</p><p>And … it's not done yet. That dispatcher also undermined my ability to subclass the choice widget. I'm pretty sure I've got a solution that I mean to deploy in the next couple of days.</p><h3>Brought to you by …</h3><p>See David's blog entry for a list of the sprint sponsors and participants. It was a great environment for sprinting. As is often the case, I think you'll see the real accomplishments of the sprint over the coming year, rather than in the immediate commits. We did a lot of brainstorming (thanks, Alice Tseng!) about the way the Dexterity's UI should evolve that will have its real payoff going forward.</p>") (dc:publisher nil "No publisher") (dc:creator nil "mcmahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2013-02-12T23:15:00Z") (dc:type nil "Blog Entry"))) ("Developing Plone in a Box" "Developing for Plone on Windows is easier than you think." "http://www.stevemcmahon.com/steves-blog/developing-plone-in-a-box" (20742 63927) new 3 nil nil ((title nil "Developing Plone in a Box") (link nil "http://www.stevemcmahon.com/steves-blog/developing-plone-in-a-box") (description nil "Developing for Plone on Windows is easier than you think.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "<p>Want to develop for the latest version of Plone on Windows? Use a VirtualBox.</p><p>Want to do it and be able to edit source files and configuration with your Windows editor? To be able to run buildout and Plone with Windows command? Try <a class=\"external-link\" href=\"https://github.com/smcmahon/plonedev_vagrant\">PloneDev-Vagrant</a>.</p><p>PloneDev-Vagrant is a kit for setting up a — hopefully — easy to use development environment for Plone in a hosted virtual machine.</p><p>The kit uses the VirtualBox for the virtual machine and the Vagrant box setup system. It should run on any host machine for which Vagrant is available; that includes Windows, OS X and Linux. Both VirtualBox and Vagrant are open-source.</p><p>The PloneDev-Vagrant kit is meant to be easy to setup and use. Plone's key development files are set up to be accessible and editable with host-based editors. Host commands are provided to run Plone and buildout. So little or no knowledge of the VirtualBox guest environment (which happens to be Ubuntu Linux) should be required.</p><h2>This is a test</h2><p>PloneDev-Vagrant is meant to bridge the gap between Plone's old Windows installer, which is not available for current versions of Plone, and a forthcoming, improved installer (Ross Patterson's project).</p><p>Is it practical? Does it do what you need to develop (or evaluate) on Windows? There's only one way to find out: try it! File a ticket if it needs something (issue tracker URL in the readme). Let me know in an email or on IRC how it's going. If it works and folks really use it, it'll get maintained for future Plone releases.</p>") (dc:publisher nil "No publisher") (dc:creator nil "mcmahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2013-01-28T22:20:39Z") (dc:type nil "Blog Entry"))) ("Plone's Unified Installer: What's New for 4.3" "New dependence strategy encourages use of system packages. Improved separation of roles in root install. More flexibility." "http://www.stevemcmahon.com/steves-blog/plones-unified-installer-whats-new-for-4.3" (20712 49968) new 4 nil nil ((title nil "Plone's Unified Installer: What's New for 4.3") (link nil "http://www.stevemcmahon.com/steves-blog/plones-unified-installer-whats-new-for-4.3") (description nil "New dependence strategy encourages use of system packages. Improved separation of roles in root install. More flexibility.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "<h3>Plone 4.3 is coming! With it come some changes to Plone's Unified Installer.</h3><p>We try not to make any significant changes in the way Plone's installer's work for new micro version (+0.0.1) updates to Plone. However, the coming release of a new minor version update (4.3) offers a good opportunity to shake things up a bit. Here's a review of what's new. Your testing, feedback and bug reports will help improve it.</p><p class=\"callout\">The target audience for this longish blog post is system integrators who already use the Unified Installer and would like an explanation of what's changed and why. New users really shouldn't care :)</p><h3><span>Encouraging Use of System Packages</span></h3><p>The first Unified Installer, created by Kamal Gill back during the Plone 2 series, shipped with a Dutch cheese shop full of source packages: Python, libz, readline, libjpeg and a lot more. We needed all that because many of the *nix system platforms of that era were missing these packages or their header files, or they had buggy or old versions (Apple, I'm looking at you). Also — it was a bit embarrassing to say — Plone wanted an old version of Python that wasn't on recent Linux distributions. So, we included all that with the installer and figured out how to build them on lots of different machines.</p><p>That situation has changed a lot. The current generation of Linux and BSD distributions are doing a great job with their package managers. Not only are all of Plone's dependencies easy to install, but it's very easy to keep them up-to-date with security patches. Having Plone's installer include and build all of these packages is no longer going to help you keep up-to-date; instead, it's going to trap you with particular versions of several major libraries. We still, though, have to have an installer that will be able to deal with old platforms and those (Apple, I'm looking at you again) which seem to have a perverse desire to keep major libraries out-of-date.</p><h3>So, what's an installer to do?</h3><p>Beginning with the 4.3 installer, we're following a strategy of encouraging use of system packages/ports whenever possible. So, instead of simply building a Python 2.7, we'll see if the system python2.7 will work. If it does, great; if it doesn't we ask the user to specify a Python-2.7 they'd like to use or have them use a --build-python flag to tell the installer to go ahead and try to build its own.</p><p>Here's the logic for picking/building a Python:</p><p style=\"text-align: center; \"><img title=\"Python Decisions\" class=\"image-inline\" alt=\"Python Decisions\" src=\"http://www.stevemcmahon.com/steves-blog/pythondecisions.png\" /></p><p>If the installer decides to use a found or '--with-python' specified python binary, it uses virtualenv to create a virtualized copy of the Python with no inherited site packages. So, the system or specified Python is untouched, and the copy we use is hopefully not contaminated by incompatible or bogus site packages.</p><h2>libxml2/libxslt</h2><p>In general, if Plone needs a major library that's usually available via system packages or ports, the installer will check for the library and it's header files and make use of it. If it's missing, the installer tells you to use your package or port manager to install it. We have to handle libxml2 and libxslt a bit differently, though. The new Diazo theming engine needs these libraries to be very current — so current that a system that's even a year or two old may not have adequate versions available via its package manager.</p><p>The installer checks for the availability of libxml2 and libxslt developer packages and checks their versions. If they aren't available, or aren't current enough, the installer will tell you what's needed. It will also offer to build them for you by downloading the current libraries and building them statically for use by the Python lxml package (which is Plone's required Python package for connecting to libxml2 and libxslt). This won't happen automatically, though. You'll have to set the '--static-lxml' flag on the install.sh command line. Also, you'll need to have an Internet connection available to download the library sources, as they're no longer included with the installer.</p><h2>Other Libraries</h2><p>Most other libraries required by Plone, like libssl and libz, are much less of a problem — as they're always (by my experience) available and up-to-date-enough when installed by platform package and port managers. We do include a couple of library sources, though, to deal with the oddities of OS X: libjpeg and readline. libjpeg isn't included with OS X, and the readline library Apple includes isn't really readline. These problems are easy to solve with MacPorts, but we don't want to ask most OS X users to install MacPorts and learn to use the port system just to get those two libraries.</p><h2>Root (sudo) Installs</h2><p>If you run the installer via <i>sudo</i>, you'll get some security enhancements due to the ability of the superuser to create system users and groups and set directory and file ownership and privileges.</p><p>The installer now creates two users and a group, which contains both users:</p><dl><dt>plone_buildout</dt><dd>This user will own most of the install, including the buildout cache and all the Plone source and byte-code (.pyc/.pyo) files.</dd><dt>plone_daemon</dt><dd>This user will own the instance's var directory and everything under it. The long-lived processes (ZEO server, client, stand-alone ZOPE) will run with this identity.</dd><dt>plone_group</dt><dd>This system group will have both plone_buildout and plone_daemon as members. The instances var directory and its contents will mostly be owned and writable by this group. This strategy allows the plone_buildout user to be able to create var subdirectories and files that the plone_daemon user will be able to use.</dd></dl><h3>Running Buildout</h3><p>Ideally, you'll never run buildout as root. Instead, run buildout with a command like:</p><pre>sudo -u plone_buildout bin/buildout</pre><p>In fact, if you try to run buildout with superuser privileges, a buildout extension that's specified in the default buildout.cfg will try to stop you. The error raised:</p><p class=\"callout\"><span>User attempt to give system ownership to Internet</span></p><h3>Running ZEO &amp; ZOPE</h3><p>Likewise, you'll want to start the long-lived ZEO and ZOPE server processes under the plone_daemon user:</p><pre>sudo -u plone_daemon bin/plonectl start</pre><p>or, skipping <i>plonectl</i>, with a command like:</p><pre>sudo -u plone_daemon bin/client1 console</pre><h3>What's gained?</h3><p>The new strategy is an alternative to the common mechanism of creating a plone user, then installing, running and maintaining everything under that user's ownership.</p><p>The big gain is that the long-lived, Internet-connected, client and server processes will have fewer privileges. They should only be able to write data files, logs and pid files — and should not be able to write into the program directories.</p><h3>Don't like plone_daemon/plone_buildout?</h3><p>Specify your own user and/or group names as command-line options.</p><h2>Buildout Config Files Refactored</h2><p>If you take a look at the new buildout.cfg file created by the installer, it's cleaner than ever. The goal is to only have in this file what most users are likely to change. Most of the complex parts are in a base.cfg file that sets the basics for common components.</p><p>The refactoring of the buildout configuration files should make it very easy to have the installer work with a custom market buildout, for example an .edu installer aimed at department/school uses. We can even include those kits with the main installer and use a new <b><i>--template=</i></b> option to pick them instead of the default.</p><h3>Directory flexibility</h3><p>You may now specify locations for the var and backup directories. So, if you'd like a more traditional *nix install, you can install to /usr/local/..., put your var somewhere like /var/opt/... and your backup directories on a remote mount.</p>") (dc:publisher nil "No publisher") (dc:creator nil "mcmahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2013-01-06T00:20:00Z") (dc:type nil "Blog Entry"))) ("Inez Becomes a Plone Developer" "With a little help from Archie and Jasper." "http://www.stevemcmahon.com/steves-blog/inez-becomes-a-plone-developer" (20592 32688) new 5 nil nil ((title nil "Inez Becomes a Plone Developer") (link nil "http://www.stevemcmahon.com/steves-blog/inez-becomes-a-plone-developer") (description nil "With a little help from Archie and Jasper.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "<p>A few years ago, Martin Aspeli wrote a great blog entry, <a class=\"external-link\" href=\"http://www.martinaspeli.net/articles/pete-and-andy-try-plone-4\">Pete and Andy Try Plone 4</a>, describing how two (fictitious) IT consultants named Pete and Andy evaluate (then also fictitious) Plone 4.</p><p>Well, years have passed. Plone has moved on to a real version 4.2, and nearly everything in Martin's vision is now available. Pete has become a manager, and never gets to code. Andy got hired away by Mozilla. Pete hires a Python coder named Inez to take over the code-monkey work for the company.</p><p>Inez has been a proud Django coder, and is a bit freaked out about Plone. She's heard it's hard to get started developing and that you need to learn obscure computer sciency stuff about interfaces and adapters. She's also worried that if her Python friends hear she's now a Plone developer, she'll be ostracized at PyCon. But, she's going to give it a try because it's still Python, and she could never live with herself if she had to write PHP.</p><h3>First Day</h3><p>After she gets her employment paperwork done, Pete sends Inez to meet first with Archie, a designer, then Jasper from Operations. Archie's going to show her the new site design, and Jasper's going to tell her about the content types the company needs implemented.</p><p><b>Design.</b> Inez expects Archie to show her photoshop compositions of the new web design. Surprise! Instead, Archie shows her a working site with the new design. Archie explains that he prototyped the site design with Photoshop, then converted it to HTML and CSS. Archie then implemented it in Plone using a few \"Diazo\" rules in XML to map Plone content onto the designer's unaltered HTML files. (Inez is horrified! \"Diazo\" — already the Plone-specific vocabulary is filling the air.) Archie's already run usability tests and gone through a couple of design iterations with the designs running live on Plone.</p><p>So, what's left for Inez? Archie points to several page components that need futzing — text moved, different fields displayed, content aggregated, that sort of thing. Inez is going to need to find and customize the templates that generate these components.</p><p><b>Content Types.</b> The meeting with Jasper, the ops guy, is shockingly similar. Inez expects to see something like crude UML diagrams, which she'll need to convert to a relational database design and a bundle of SQL. Then, it'll be on to worrying about how to prevent SQL injection attacks.</p><p>Instead, Jasper shows her impressive simulations of content-entry forms. They're even using the latest version of the new site design. Just before she asks a question about what's being used for the simulation, understanding dawns on Inez: Jasper is actually using the same development Plone install that Archie showed her.</p><p>Jasper explains that he has already set up the new content types through the web, using something called the \"Dexterity schema editor.\" (Ack! \"Dexterity\" — more Plone jargon!) He's even run the schema past all the folks that will need to be entering content with the new types, and adjusted the schema to match their feedback. Punchline: Jasper's new Dexterity content types actually create content items in the Plone object database.</p><p>What's left for Inez to do? Jasper tells her the forms need a lot of data validators added. Some of the selection widgets will need to draw choices from other parts of the site or use vocabularies that Jasper wants to be able to edit through the web. Parts of the data from the new content will need to be searchable, and parts will need to aggregate to the site's home page.</p><p class=\"callout\">Inez is reassured to discover that there's really lots of code to be written. Also, it's good to know that all that nasty Plone complexity is still waiting for her, so she'll have great war stories to tell at PyCon.</p><h3>Day Two</h3><p>Before the fun stuff gets going, Inez is going to need to get a working copy of Plone going. Everything she's heard about Plone tells her this is going to be awful.</p><p>Hmmm. Not that bad. Inez reads a Plone.Org page and concludes she should start with something called the Unified Installer. She downloads it and unpacks it into a test directory. Inez checks out the ReadMe (something she only does when her testosterone-poisoned male coder friends aren't looking), and figures out that she can just run an install script with a command-line option to use the \"developer\" profile. It takes a few minutes to set Plone up, and she has it running and is looking at an empty Plone site about a minute later. (Remember, Inez read the ReadMe; experience may vary.)</p><p class=\"callout\">Inez begins to suspect that the horror stories she's heard about Plone installation must have been spread by PHP types who confuse Apache with an operating system.</p><p><b>Content Type Implementation.</b> Inez does some reading on Plone.Org and figures out that the next thing she wants to do is create a Python package that will allow her to code the guts of Jasper's content types. She's read the developer ReadMe installed at the top of her new Plone install directory and learned that there's a skeleton-generator to create a Dexterity add-on package. Skeleton generators seem perfectly reasonable to Inez' Django-trained mind. (But this one's called \"templer\" — again with the yucky, Plone-specific vocabulary. Oops, turns out Inez needs to take that back. Turns out that templer's not Plone-specific.)</p><blockquote class=\"pullquote\">This is the first fiction in this post. Templer does not yet add newly created packages to buildout.<br /></blockquote><p>Inez runs \"templer dexterity\" from the command line and answers a few questions. Templer builds the skeleton and drops it in her \"./src\" directory. The ReadMe tells her it's already set up in the installation's configuration file, buildout.cfg, and that she just needs to run \"bin/buildout\" to finish the integration.</p><p>Inez cranks up her editor and checks out the skeleton of her new package. There's a ReadMe that tells her what all the parts do. There's even a testing framework built in!</p><p>Inez can run templer again to create code code skeletons for her new content types. She also discovers that she can import Jasper's model to lay out all the fields. A quick email exchange with Jasper, and she's got a zip file containing XML models of the field layouts. All she has to do is unpack it into her \"models\" directory and rename the XML files to match the class names she used when she created the content types.</p><p>Inez restarts Plone (which is suprisingly fast; what happened to those slow startups her friends warned her about?) Being the type who actually reads the ReadMe, Inez knows that she now needs to navigate to the add/remove add-on packages configlet and activate her new package. Wow! Jasper's new content types are all installed and available on the \"add\" menu.</p><p class=\"callout\">Inez has not yet written a line of code and the whole infrastructure for the new content types is in place in Plone. Time to write code, though, and Inez knows the Plone horror story must be getting ready to start.</p><p>Inez opens the generated source file for the first of her content types — and her anti-Plone side is pleased to see that it looks a bit cryptic. Interfaces! She's going to have to drink the Zope kool-aid! But, at least there's a comment block that basically says \"put your validators and other schema support code here,\" and points her to an online Dexterity tutorial.</p><p>OK, writing validators and dynamic defaults isn't that hard. Inez does have to use Python decorators though, which she's never understood and always seem like a gross violation of Python's \"no magic\" zen. At least they work.</p><blockquote class=\"pullquote\">Inez makes a cool discovery: her code editor, Sublime, is doing code completion and browsing for the Plone library modules. Amazing!<br /></blockquote><p>Vocabularies for select boxes aren't so easy. Since they require information from other parts of the site, they have to establish context. It also turns out to be the time she has to learn something about interfaces, since it turns out that these are used as discriminators for finding the other content she'll use to establish one-to-one and one-to-many relations with other content objects. Fortunately, there are good examples in the Dexterity tutorial.</p><p>Inez also has to figure out at this point how to read and edit Dexterity supermodel files. XML! Does anyone like to use XML for configuration? At least it works. Inez also understands from the tutorial that she can do the same chores with Python in the content type .py file. But, she can put off learning Zope schema until another day.</p><p>Finally, Inez needs to adapt the presentation templates for the new content types, which are conveniently located in content_classname_templates directories. Unfortunately, this requires learning Yet Another Template Language. No getting around it, something new to digest. But, at least it's HTML-based, and she doesn't have to go home with that dirty feeling that comes from mixing program logic with HTML. Instead, she learns that she can write the real guts in plain-old Python in the source file, and it becomes part of the environment for the view template.</p><p class=\"callout\">Several days have now passed, but the content types are now well past the prototype stage. Jasper's pleased with the progress. And, the test coverage is complete, which makes Inez feel like she's on top of the world.</p><p><b>Design adaptation.</b> Time to learn Diazo. Thank the coding gods, there's another developer-oriented tutorial for this. Inez begins to see how Diazo is fine for designers. But, she knows that XSLT is under the surface, and those four letters make her queezy. She tried to figure XSLT out once, and it was far too recursive and tricky for an honest Python programmer's taste.</p><p>Following the Plone.Org tutorial, Inez returns to templer to generate an add-on package to contain the Diazo theme. She asks Jasper to export his rules and resources. He sends a zip file and Inez unpacks all that into a \"rules\" directory in the new package. Once again, it's time to run buildout, restart Plone and activate an add-on package. But, once that's done, the new theme is immediately live, and, thanks to Jasper, not looking bad at all!</p><p>Now, Inez turns to those page components (viewlets and portlets in Plone's bizarre jargon) that need tweaking and coding. From the theme-development tutorial, Inez learns that her starting point is to copy the existing templates into path-coded names in the add-on packages \"jbot\" directory. (\"jbot!\" Will those Zope/Plone people never stop creating weird new terms?)</p><p>This requires finding the original templates. The tutorial helps her find them, but <i>Oh! My! </i>Plone has a lot of packages. How can any Python application have so many packages? Inez begins to realize all the complexity that buildout has been hiding. She also realizes that while the complexity is definitely there, she hasn't had to dive into the deep end yet.</p><p>The templates use the same markup method she learned when doing the content-type presentation templates. That goes faster now.</p><p>Things get a bit scary when she hits the point of needing to aggregate some data from the new content types. But, what do you know, it turns out that this doesn't need any code at all. She can use Plone \"collections\" to aggregate the data, and then present it in a collection portlet.</p><blockquote class=\"pullquote\">Inez realizes that she has not had to write one line of XSLT!<br /></blockquote><p>This does, though, require Inez to return to her content types, as she's going to need to index some parts of her content object data into a peculiar Zopish beast called the \"portal_catalog\". It turns out that it's possible to do that just by adding an XML file to content type's profiles directory, and doing a bit of annotation in the supermodel files. Inez needs to read the Dexterity tutorial's section on this about three times before \"Generic Setup\" begins to make sense. But, it's documented, it works, and she is able to get it working without swimming too far into the deep end of the Zope/Plone pool.</p><p class=\"callout\">Again, several more days have passed. But both Archie and Jasper are happy. Pete asks Inez to join a meeting to talk about the next site project.</p><h3>The Next PyCon</h3><blockquote class=\"pullquote\">Some things don't change.</blockquote><p>At the next big get together with her Python BFFs, Inez regales them with horror stories about Plone: Diazo, Dexterity, supermodels, interfaces, schemas, oddly named skeleton generators, XSLT, JBOT, viewlets, portlets, catalogs, and Generic Setup. Her friends laugh uproariously and are reassured that Plone is on the wrong path. All is right with the world. Inez feels guilty about reinforcing the old Zope phobias, but knows that if she didn't she'd be a pariah.</p><h3>What's real, and what's fiction?</h3><p>What's truly impressive about Plone 4.3 (in alpha 1 as I write this), is that nearly all of the moving parts are already working. What development remains?</p><ul><li>Templer is still in development, and the dexterity and diazo skeletons need work to do everything described;</li><li>The Unified Installer does not yet have a \"development\" mode — though it does generate a develop.cfg buildout configuration file. The \"develop\" profile need to have some things like automatically setting up templer and adding the code browsing/completion setup.</li><li>The Unified Installer and our templer skeletons need to be set up to work well enough together that it's possible to add development packages and have them automatically added to buildout.cfg.</li></ul><p>The biggest fictions are about documentation. Pretty much any place that Inez was able to figure out what to do by referring to a tutorial was gross fabrication. <b>So, shall we fix that?</b></p><p><b>I'm hoping to sprint on these items at the Plone Conference. Unfortunately, Inez, Freddy and Archie won't be able to make it this year.<br /></b></p>") (dc:publisher nil "No publisher") (dc:creator nil "mcmahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2012-10-06T19:00:00Z") (dc:type nil "Blog Entry"))) ("Plone Installers Brainstorming at PloneConf" "Notes from the open-space discussion on installers at PloneConf 2011" "http://www.stevemcmahon.com/steves-blog/installers-2011" (20165 24160) new 6 nil nil ((title nil "Plone Installers Brainstorming at PloneConf") (link nil "http://www.stevemcmahon.com/steves-blog/installers-2011") (description nil "Notes from the open-space discussion on installers at PloneConf 2011") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>

There were lots of conference discussions — and a fun exchange of rants during lightning talks — about the state of Plone's installers. Also, lots of good ideas exchange recently on the Plone Foundation Members list.</p><p>I wanted to share the high points of an open-space discussion on the topic. Thanks to David Bear for taking notes.</p><p>We identified several goals and champions:</p><dl><dt>Installations should include common layout/tools/buildouts </dt><dd>Except where the platform prevents it, the outcome of an installation on major platforms should look pretty similar. There should be the same set of directories inside the install, and pretty much the same tools in bin. The buildout .cfg files should be largely the same, and the current Unified Installer .cfgs are a good base implementation.<br />Champion: Steve McMahon<br /></dd><dt>Our installers should be in a common repository</dt><dd>Plone is an open-community project, and we need to have as many people as possible feeling that they can file tickets and fix bugs. That means having them all in the same vcs repository — with no barrier to fixing bugs beyond filing a contributor's agreement. <br />Champion: Steve McMahon<br /></dd><dt>Use a templating system to generate the .cfgs for different platforms </dt><dd>This would help maintain just a single buildout .cfg set for all the installers.<br />Champion: Cris Ewing</dd><dt>Installers should be part of the continuous integration testing </dt><dd>We can't test all platforms (why would we want to), but we should be able to use jenkins to routinely test installers against new plone versions on Windows, OS X and a couple of flavors of Linux.<br />Champion: Eric Steele<br /></dd><dt>QA Testing</dt><dd>A QA team is getting organized, and testing installers on multiple platforms is a great chore for them.<br />Champion: Liz Leddy</dd><dt>Visual Controllers are a huge problem </dt><dd>Apple's unexpected abandonment of wxPython in Lion, and the unlikelihood of a timely development of an independent Lion-compatible wxPython 2.6.x leave us with a mess.<br />Unfortunately, trainers have been getting increasing feedback that many newer OS X and Linux users are not command-line comfortable, so we still need the visual controller functions, and may need them to do even more.<br />Mikko and Craig are going to check out alternative visual scripting environments that might be cross-platform. Limi is asking if we could product an HTML/JS controller with something like a thin python http server to do the real work. That's feasible, but there could be some real security analysis needed. <br /></dd></dl><h3>David Bear's Notes:</h3><pre>------------------------------------------------------------------
- unified installer and buildout
- Open space discussion
------------------------------------------------------------------
same buildout.cfg all platforms	Steve
same repository -&gt;			Steve
templer buildout for .cfgs 		Cris 
Automated  tests in jenkins 		Eric
QA - platform testers -- 		Liz
Visual Controller (qt?)  		Mikko 
(xampp)</pre>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-11-17T19:20:00Z") (dc:type nil "Blog Entry"))) ("PloneFormGen gittin' to github" "PloneFormGen's repository and issue tracker have moved to github." "http://www.stevemcmahon.com/steves-blog/pfggit" (20125 43700) new 7 nil nil ((title nil "PloneFormGen gittin' to github") (link nil "http://www.stevemcmahon.com/steves-blog/pfggit") (description nil "PloneFormGen's repository and issue tracker have moved to github.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>Yesterday marked the release of PloneFormGen 1.7b6. I anticipate that we'll have a release candidate shortly. The bigger news, though, is that I finally got some time and moved the PFG version control repository to Github. You'll find it at <a class=\"external-link\" href=\"https://github.com/smcmahon/Products.PloneFormGen\">https://github.com/smcmahon/Products.PloneFormGen</a>.</p><p>Pull requests will be welcome. But, if you're a regular contributor (or think you might be a regular contributor), drop me a note and I'll add you to the collaborator list.</p><p>I also opened a new issue tracker at <a class=\"external-link\" href=\"https://github.com/smcmahon/Products.PloneFormGen/issues\">https://github.com/smcmahon/Products.PloneFormGen/issues</a>. There are two reasons for switching away from the old issue tracker:</p><ul><li>The social features of github are fun and easy to use. Using the github issue tracker gets all that integrated with the code repository.</li><li>The old issue repository had gotten to be a mess. That was partially because I didn't get e-mail notifications of new issues for several months. On checking in, I found that many issues in the tracker were long fixed and it was very slow updating them.</li></ul>
The latter reason is basically a plea of \"issue-tracker bankruptcy.\" I guess that's a devops corollary of email bankruptcy. :)
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-10-18T16:35:00Z") (dc:type nil "Blog Entry"))) ("Professional Plone 4 Development" "Martin Aspeli updates his book, and Plone." "http://www.stevemcmahon.com/steves-blog/pp4d" (20076 864) new 8 nil nil ((title nil "Professional Plone 4 Development") (link nil "http://www.stevemcmahon.com/steves-blog/pp4d") (description nil "Martin Aspeli updates his book, and Plone.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>Martin Aspeli's <em><a class=\"external-link\" href=\"http://www.packtpub.com/professional-plone-4-development/book\">Professional Plone 4 Development</a></em> is the most-anticipated Plone book since Martin's earlier <em>Professional Plone 3 Development</em>. For Plone developers, it pretty much goes without saying that Martin is an outstanding technical writer, and that his documentation of Plone's development environment is definitive.</p><p>What got my attention about <em>PP4D</em> was that the contrast between it and <em>PP3D</em> is very much like the contrast between Plone 4 and Plone 3.</p><p>Plone 4 does more than Plone 3, and Martin's book is bigger and has new chapters and sections to cover the new features. But Plone 4 is also sleeker and faster than 3. Its parts fit together better, and it's more approachable to new users and integrators.</p><p>Martin shows us that the same is true for Plone 4 development. Both the Plone 4 development environment and the <em>PP4D</em> book make more sense than their Plone 3 counterparts. The parts fit together better. Plone 3 development required that you know, and practice, both new (Zope 3 style) and old (Archetypes) development paradigms. You had to know how to use Python packages and Zope products, skins and browser views. And, I think the Plone development community (and Martin) were not really sure how these fit together and when it was best to use which.</p><p><em>PP4D</em> is much more confident. Dexterity (content-type development framework) and Diazo (theming system) are much better ways to develop, and Martin is able to explain them clearly without having to burden the reader with so many layers of history. PP4D, like its predecessor, is still a book for experienced, versatile programmers, but it doesn't need to make as many apologies to its audience.</p><p><em>Professional Plone 4 Development</em> is thus a better book than its predecessor in part because Plone 4.x is a better development platform. Martin's community leadership is — of course — a large part of the reason for this advance. But, the improvements are also due to the great work of the many folks on the core development and framework teams.</p><p>So, Martin should take a big bow. But Hanno Schlichting, David Glick, Laurence Rowe, Eric Steele, Denys Mishunov, Rob Gietma, Alex Limi and many others should be proudly joining that curtain call. Bravo.</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-09-11T00:40:00Z") (dc:type nil "Blog Entry"))) ("Plone Conference Training: The Instructors" "Five two-day training courses will be taught at this year's Plone Conference." "http://www.stevemcmahon.com/steves-blog/2011pctraining" (20034 49476) new 9 nil nil ((title nil "Plone Conference Training: The Instructors") (link nil "http://www.stevemcmahon.com/steves-blog/2011pctraining") (description nil "Five two-day training courses will be taught at this year's Plone Conference.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>This year's <a class=\"external-link\" href=\"http://ploneconf.org/event/training\">training offering for the Plone Conference</a> brings together some of the best teachers in the Plone community. The training topics are great, but even if you think you're already a wizard in all the class topics, you might want to sign up for a class anyway just to spend a couple of days in a classroom with one of these instructors. They'll not only teach you techniques; they'll also help you organize your Plone expertise. The line up:</p><p><strong>Martin Aspeli </strong>is our community's most prolific writer, the author of <em>Professional Plone Development</em>, and its forthcoming update for Plone 4.1. Behind the scenes, he's responsible for many of our new framework components and sets the standards for our testing tools. Want to move up to the ranks of Plone development/deployment masters? Spend a couple of days with Martin.</p><p><strong>Paul Everitt</strong> is a walking encyclopedia of Zope technologies. He's also a legendary speaker and comedian. Paul's students are not only going to get a good, practical introduction to Pyramid; they're also guaranteed to have a great time and learn stories that will have folks buying them beers for years.</p><p><strong>Chris Ewing</strong> is a tremendously thoughtful and generous teacher. As leader of the ZopeSkel project, he's also been spending a lot of time thinking about how to make it easier to get going with Plone add-on and theme development. Cris puts the same kind of effort into class preparation. You can be sure that he's going to teach the best and easiest way to do things, and explain it well.</p><p><strong>Chrissy Wainwright</strong>'s students from her past Plone Theming classes have a shared secret. They know that Chrissy has distilled years of solid experience of designing and implementing Plone site designs into an amazing two-day package that will help you solve nearly any real-world design implementation problem. Some of the best Plone themers I know have walked out of Chrissy's classes dumbfounded by all the new things they learned.</p><p><strong>Steve McMahon</strong> (yes, me!) I'll just say that I work hard to make my classes valuable and enjoyable. You can be sure that I'll be well-prepared and will have thought hard about how to keep you awake and amused, as well as informed. I've taught at four prior conferences or symposium, and think I'm getting better at it each time. I first taught Dexterity at this year's Plone Symposium East.</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-08-10T17:35:00Z") (dc:type nil "Blog Entry"))) ("New fieldsets for PloneFormGen" "The latest beta of PFG has a new fieldset mechanism." "http://www.stevemcmahon.com/steves-blog/pfg-fieldsets" (19963 34532) new 10 nil nil ((title nil "New fieldsets for PloneFormGen") (link nil "http://www.stevemcmahon.com/steves-blog/pfg-fieldsets") (description nil "The latest beta of PFG has a new fieldset mechanism.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>I've always had mixed feelings about PloneFormGen’s Fieldset Folder feature. There are some nice things about it — like the ability to move a whole fieldset with a single operation — but also annoyances, like needing to drill down to move fields within a fieldset.</p><p>More fundamentally, I don't think it’s an intuitive mechanism for PFG's target users. When you’re visually designing a form, a fieldset is a presentation feature, and not necessarily a unit of functionality.</p><p>In any case, the Fieldset Folder mechanism now has another problem: it works very poorly with the “quickedit” feature, which was introduced in PFG 1.6 and much enhanced in PFG 1.7 thanks to Manca's GSOC work. I suppose that could be fixed with a large helping of new JavaScript and a lot more visual complexity, but the point of PFG is to be simple (or at least as simple as possible).</p><p>So, PFG 1.7b4 has a simple-minded solution. We now have “Fieldset Begin” and “Fieldset End” items that are just markers. All they do is start or end a fieldset. The “Begin” is a little more elaborate as it allows you to set a label and description. The “End” doesn't even have a label.</p><p>So, drag them from the toolbox; move them around the form; delete them. All they do is start and end visual fieldsets.</p><p>Fieldset Folders are still available, and work as before. You just won't be able to maintain them from the quick editor.</p><p>Hope you like the new facility!</p><p>&nbsp;</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-06-17T16:55:00Z") (dc:type nil "Blog Entry"))) ("Rapture (PSE 2011) Sprint Report" "Over 50 sprinters gathered after Plone Symposium East for two days of rapturous sprinting." "http://www.stevemcmahon.com/steves-blog/rapture-sprint" (19928 10492) new 11 nil nil ((title nil "Rapture (PSE 2011) Sprint Report") (link nil "http://www.stevemcmahon.com/steves-blog/rapture-sprint") (description nil "Over 50 sprinters gathered after Plone Symposium East for two days of rapturous sprinting.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>Sprinters at the Plone Symposium East’s “Rapture” sprint learned that heaven is high bandwidth, big monitors and lots of Plone collaboration. Thanks to our hosts, the <a class=\"external-link\" href=\"http://weblion.psu.edu\">WebLion</a> group at Penn State for loaning us their office, great wifi, projectors, big monitors and advice on food and coffee.</p><h3><strong><img title=\"Rapture Sprint Logo\" class=\"image-right\" alt=\"Rapture Sprint Logo\" src=\"http://www.stevemcmahon.com/steves-blog/rapture-sprint-logo/image_mini\" /></strong></h3><p>We had a lot of sprinters, possibly a record for an event other than a Plone Conference, and we broke up into several groups. Thanks to group leaders for the report out information below!</p><h3>Connexions / Rhaptos</h3><p>
We were enthusiastic to meet and collaborate with the <a class=\"external-link\" href=\"http://cnx.org\">Connections/Rhaptos</a> folks, who are using Plone to build the world's largest collection of open-license course materials. They led sprints on:</p><p><strong>Connexions Rhaptos API</strong>: Built an AtomPub import mechanism. At the end of the sprint, this was working both for new content and edits. More details in <a class=\"external-link\" href=\"http://kefletcher.blogspot.com/2011/05/sprinting-with-connexions.html\">Kathi Fletcher’s Blog</a>.</p><p><strong>Connexions Rhaptos Plone Update</strong>: working on updating Rhaptos/Connexions from Plone 2.5. Ross, Michael Mulich</p><h3>Form Widgets Group</h3><p>A form widgets team made use of the domain-expertise of Matt Barkau and Joe DeLuca to work on accessibility issues in Archetypes and Dexterity widgets. The team corrected several annoyances that particularly hurt screen reader users, carefully researching the best accessibility practices for each solution..</p><p>Hugo and SteveM worked on the Dexterity datetime form widget (collective.z3cform.datetime). Michael Miller (UCLA) worked on compiling a visual guide to Archetypes and Dexterity widgets that may become part of the Dexterity documentation.</p><h3>ZopeSkel</h3><p>
Cris Ewing led a ZopeSkel sprint. Cris reports that “Our goal was to move forward on refactoring ZopeSkel into a series of smaller, lighter packages in the 'templer' namespace. Beyond that there were also a number of improvements needed in the core package, and a few long-standing bugs that needed fixing.”</p><p>Participating in the ZopeSkel work were Lazaro Clapp, Ricardo Newbery, Josh Johnson, David Ray and Cris.<br /><br /><strong>Completed</strong></p><ul><li>
Added templer.zope, templer.plone, templer.plonecore, templer.plonebuildout, and templer.silva packages</li><li>
ported plone3_buildout, plone4_buildout, and silva_buildout templates</li><li>
partially completed porting basic_zope, plone and archetype templates</li><li>
fixed a long-standing bug in the recipe template doctest involving a test within a buildout within a test (the source of Ploneception)</li><li>
refactored the handling of structures so that any question defined by a template can add new structures to the template (which allows us to maintain common pieces of code in a single place)</li></ul><h3>Plone.Edu Installer</h3><p>Kim Nguyen and helpers worked on creating installers for Plone using a Plone.Edu stack. Kim learned the layout of the Unified and OS X installers and also worked on virtual machine installers.</p><h3>Plone 2011 Co<img title=\"Frontpage Design\" class=\"image-right\" alt=\"Frontpage Design\" src=\"http://www.stevemcmahon.com/steves-blog/website-frontpage.jpg/image_mini\" />nference Theming</h3><p>Chrissy, Trish, Tyler, Mark Corum and Rob Porter led a small army working on the Plone Conference 2011 Website. Thanks to Trish for the report out:</p><div><strong>Team Structure</strong> | Chrissy Wainwright, Rob Porter</div><ul><li>Implemented backstretch.js to make sure the background image is always 100%</li><li>Set up webfonts as a browser resource</li><li>Implementing responsive.css</li><li>Set up jQuery to switch bg depending on section</li></ul><div>&nbsp;</div><div><strong>Team Fancy</strong>&nbsp;|&nbsp;Chrissy Wainwright, Erin Weber, Trish Ang</div><ul><li>Bad ass CSS3-ified slideshow for the front page, also using collective.easyslideshow</li><li>Styled webcoutier.dropdownmenu</li><li>Working on js for speaker profiles</li></ul><div>&nbsp;</div><div><strong>Team Foot Soldiers</strong> | Beth Phillips, Tyler Randles, Quyen Hoang, Mark Corum</div><ul><li>Created original artwork for the footer, depicting San Francisco from below the Bay Bridge</li><li>Rendering the sketches in Illustrator<img title=\"Website Content Page Design\" class=\"image-right\" alt=\"Website Content Page Design\" src=\"http://www.stevemcmahon.com/steves-blog/website-v3-content.jpg/image_mini\" /></li><li>Researching jQuery to swap bg images past a scrolled point</li></ul><div>&nbsp;</div><div><strong>Team Left Behind</strong> | Rose Pruyne</div><ul><li>Designed a logo for the Rapture Sprint</li><li>Set up t-shirts for sale with the logo on Cafepress (<a href=\"http://www.facebook.com/l.php?u=http%3A%2F%2Fwww.cafepress.com%2Fcp%2Fcustomize%2Fproduct2.aspx%3Fnumber%3D542298001%26utm_medium%3Dcp_social%26utm_source%3Daddthis%26utm_campaign%3DCreateAndBuyPDP&amp;h=ac715\" target=\"_blank\">men's</a>) (<a href=\"http://www.facebook.com/l.php?u=http%3A%2F%2Fwww.cafepress.com%2Fcp%2Fcustomize%2Fproduct2.aspx%3Fnumber%3D542306461%26utm_medium%3Dcp_social%26utm_source%3Daddthis%26utm_campaign%3DCreateAndBuyPDP&amp;h=ac715\" target=\"_blank\">wom</a><a href=\"http://www.facebook.com/l.php?u=http%3A%2F%2Fwww.cafepress.com%2Fcp%2Fcustomize%2Fproduct2.aspx%3Fnumber%3D542306461%26utm_medium%3Dcp_social%26utm_source%3Daddthis%26utm_campaign%3DCreateAndBuyPDP&amp;h=ac715\" target=\"_blank\">en's</a>) (<a href=\"http://www.cafepress.com/cp/customize/product2.aspx?number=542305783&amp;utm_medium=cp_social&amp;utm_source=addthis&amp;utm_campaign=CreateAndBuyPDP\" target=\"_blank\">kid's</a>)&nbsp;</li></ul><div>&nbsp;</div><div><strong>Team Destination SF</strong> | Michael&nbsp;</div><ul><li>Researched travel information on SF</li><li>Created an example form for pre-conf reqs from attendees</li><li>Researched visa information for attendees<br /></li></ul><div><strong><br /><img title=\"Footer Sketch\" class=\"image-right\" alt=\"Footer Sketch\" src=\"http://www.stevemcmahon.com/steves-blog/footer.jpg/image_mini\" />Team Git 'er Do</strong><strong>ne</strong> | Chrissy Wainwright, Michael Duggan, Trish Ang, Erin Weber</div><div><ul><li>Chrissy showed us how to use git</li></ul></div><div><ul><li>Successfully checked out ploneconf.theme</li></ul></div><div>&nbsp;</div><div><strong>Team XDV-ators</strong> | Michael Miller, Rob Porter</div><ul><li>Packaged a few XDV themes from the UCLA sprint last year</li><li>Documenting how to package a theme</li></ul><h3><strong>Vocabulary Manager</strong></h3><p>Nathan Van Gheem and Clayton Parker worked a new API for an up-to-date vocabulary manager for Plone. Implementation actually begun.</p><h3>Plone Phone Home</h3><p>Eric Steele and Matt Hamilton worked on a \"phone home\" feature for Plone buildouts that will anonymously send product-usage data to a Google Apps database. We'll be able to use that data for general Plone usage statistics as 
well as include usage-over-time graphs/numbers for PSC pages. This advanced rapidly to alpha 2, and folks around the sprint began using it. Eric reported that early stats showed most users relying on unrelease versions of Plone 4.1.</p><p>Eric also working on getting automated Dexterity testing set up on jenkins.plone.org.</p><p>It was a notably slow couple of days for Eric, as he only managed to get these few pitiful things and the release of Plone 4.0.6 and 4.1rc2 done. What a slacker!</p><h3>Bug Fixes</h3><p>Steve Smith and Michael Smith wrestled with the Plone ticket list. They did a lot of triage, closed old tickets, and fixed some bugs.</p><h3>PFG</h3><p>SteveM released 1.6.1 and 1.7b1 of PloneFormGen, along with merging and releasing Nathan's Plone 4 fixes for PFGDataGrid.</p><h3>Breakout Tutorials</h3><p>Clayton gave a git/github tutorial on day one; SteveM gave a quick review of Dexterity on day two.</p><h3>Rapture Sprint T-Shirts <br /></h3><p>Rose Pruyne designed a Cafe Press t-shirt based on her logo. It's available on-demand in <a class=\"external-link\" href=\"http://www.cafepress.com/cp/customize/product2.aspx?number=542306461\">Women's</a> and <a class=\"external-link\" href=\"http://www.cafepress.com/cp/customize/product2.aspx?number=542298001\">Men's</a> cuts.</p><p>&nbsp;</p><p>&nbsp;</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:date nil "2011-05-21T21:05:00Z") (dc:type nil "Blog Entry"))) ("PloneFormGen Updates" "New releases in the 1.6 and 1.7 series" "http://www.stevemcmahon.com/steves-blog/pfg-rapture" (19927 64482) new 12 nil nil ((title nil "PloneFormGen Updates") (link nil "http://www.stevemcmahon.com/steves-blog/pfg-rapture") (description nil "New releases in the 1.6 and 1.7 series") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>I've just released two new versions of PloneFormGen:</p><p>1.6.1 is a maintenance release for the PFG 1.6 series. It contains several bug fixes made over the last few months, but no new features. Thanks to Maurits and David for fixes, and to MJ for a Norwegian translation. It works in Plone 3.x and 4.x.</p><p>1.7b1 is the first beta release for the 1.7 series. It's big new thing is Manca's work on drag and drop and quick editing of fields. Drag and drop support is now picked up from collective.js.jqueryui. 1.7 will run on Plone 3.3.x or 4.x, but will be most comfortable on Plone 4.1, which includes an updated plone.app.jquerytools. If you want to use 1.7.x with Plone &lt; 4.1, make sure you add a pin to your buildout to specify the latest plone.app.jquerytools.</p><p>Also, I just release a new version, 0.2, of Products.PFGDataGrid. This merges Nathan Van Gheem's Plone 4 compatability branch. It should work with Plone 3.x or 4.x.</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2011-05-21T17:52:34Z") (dc:type nil "Blog Entry"))) ("Plone Symposium South America: Sprint Report" "We had a great two days of sprinting at the end of Plone Symposium South America in Cordoba, Argentina." "http://www.stevemcmahon.com/steves-blog/pssa-sprint" (19699 42485) new 13 nil nil ((title nil "Plone Symposium South America: Sprint Report") (link nil "http://www.stevemcmahon.com/steves-blog/pssa-sprint") (description nil "We had a great two days of sprinting at the end of Plone Symposium South America in Cordoba, Argentina.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>Our sprint was held Friday and Saturday, November 26th and 27th, in a beautiful room atop the Windsor Hotel Tower. We had a great view of central Córdoba, and the city's great energy helped keep us in good spirits.</p><p>SteveM, Emanuel Sartor, and Chimera all worked on PloneFormGen. Most of this was around merging Manca’s GSOC branch, which adds great new UI to PFG. Work on this included:</p><ul><li>Branching PFG; trunk is now 1.7dev</li><li>Merging Manca’s GSOC branch</li><li>Adapting to use new plone.app.jquerytools kit</li><li>Making the new JavaScript pass jslint tests and generally cleaning it;</li><li>Making a JS message translation framework, since there are now several messages in the JavaScript.</li><li>Revising the new browser view that discovers fields to make it more generally useful going forward.</li><li>Researched jquery tools drag and drop functionality to see if it can be more generally used in PFG (unfortunately, probably not);</li><li>Worked on PFG quick edit bugs in new code.</li><li>Stripping old Plone 2.5 compatibility code (PFG 1.6+ doesn’t support Plone &lt; 3.1);<br /></li></ul><p><img title=\"View from a sprint\" class=\"image-left\" alt=\"View from a sprint\" src=\"http://www.stevemcmahon.com/steves-blog/sprint-view/image_mini\" />We got several people up to speed on buildout and bug fixing, and participated in the Plone TuneUp. Emanuel, Diego and Franco fixed bugs.</p><p>Roberto Allende worked on his ZODB class browser; he found a good JS library to render panes.</p><p>Juan Diaz worked on collective.thememaker with chimera; working on project to be committed to collective.</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Plone") (dc:date nil "2010-11-29T13:09:09Z") (dc:type nil "Blog Entry"))) ("A Look at Plone 3 Intranets" "A review of “Plone 3 Intranets” by Víctor Fernández de Alba." "http://www.stevemcmahon.com/steves-blog/p3inets" (19595 57280) new 14 nil nil ((title nil "A Look at Plone 3 Intranets") (link nil "http://www.stevemcmahon.com/steves-blog/p3inets") (description nil "A review of “Plone 3 Intranets” by Víctor Fernández de Alba.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p>Víctor Fernández de Alba's <em><a class=\"external-link\" href=\"https://www.packtpub.com/plone-3-design-build-deploy-full-featured-secure-enterprise-intranet/book\">Plone 3 Intranets</a></em>isn't just about Plone 3, and it isn't just about intranets. Nearly all of the material in the book is equally applicable to Plone 4. And, in addition to intranets, this book is really about any content-management situation where there is delegated authority over content management.</p><p>Plone’s great strength is in the collaborative production of web content, whether for public or internal consumption. It gives managers the tools they need to delegate authority for production, editing and reviewing of content, and it gives authors, editors and managers a great user interface for doing their work in a way that allows them to concentrate on content.</p><p><em>Plone 3 Intranets</em> is all about that great strength. Its target audience is site administrators who want to learn how to administer users and groups, assign roles in content creation and management, use workflow rules to shepherd content, and to control the availability of content. The subject does not require a knowledge of Plone development, and the book does not require a knowledge of Python, HTML or CSS. Instead, it’s about administering, and planning the administration of a site using Plone itself. It also occasionally delves into the interface of the Zope application server, which underlies Plone, when that would help the reader understand important details about security or workflow.</p><p>This is no “Dummies” book. The target audience is smart enough to understand a concept like <em>granular security</em> and ready to map security concepts onto the needs of their own organization.</p><p><em>Plone 3 Intranets</em> is very well written. It contains some of the clearest explanations of users and group administration, sharing and workflow of any of the current Plone books. The quality of the prose is definitely a cut above Packt's common product.</p><p>There is getting to be a wealth of books covering Plone 3 and 4, and it’s worth figuring out where a new one fits in the list. <em>Plone 3 Intranets</em> and Erik Rose’s <em>Plone 3 for Education</em> are both basically concerned with same environment: one with lots of content, content creators, and a need to organize and administer that content. Erik’s book is for the developer programatically adapting Plone to the specifics of a given enterprise. Victor’s book is for the planner and administrator.</p><p class=\"discreet\"><strong>The reader of this review should know</strong>: Packt gave me a free e-book version of this book. Also, I’m the co-author of one Packt book (Practical Plone), for which I received initial royalties, and have been a technical reviewer for several others, for which I received free copies of the reviewed book and another Packt title. The Plone Foundation, for which I am an un-recompensed officer, receives continuing royalties from Packt for <em>Practical Plone</em>.</p><p>&nbsp;</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:date nil "2010-09-11T20:00:00Z") (dc:type nil "Blog Entry"))) ("Plone Conf 2010: Not Just for Coders" "Plone Companies: Get your design, UI, documentation and project management people to the conference." "http://www.stevemcmahon.com/steves-blog/not-just-coders" (19566 51624) new 15 nil nil ((title nil "Plone Conf 2010: Not Just for Coders") (link nil "http://www.stevemcmahon.com/steves-blog/not-just-coders") (description nil "Plone Companies: Get your design, UI, documentation and project management people to the conference.") (content:encoded ((xmlns:content . "http://purl.org/rss/1.0/modules/content/")) "
<p><a class=\"external-link\" href=\"http://www.ploneconf2010.org/news/talks-submission-now-open\">Talk submissions are now open</a> for Plone Conference 2010, and your Plone company may be starting to encourage folks to submit talk proposals.</p><p>Please, think beyond just coders! We'll have a more interesting, and more valuable, conference if we bring together all the kinds of skills and interests that make up the Plone project. So, please, encourage your user-interface, design, theming, user-documentation, and project-management folks to put in talk proposals and to attend the conference.</p><p>Some talks I'd love to see:</p><p><strong>New Horizons in Accessibility.</strong> OK, Plone's accessibility isn't bad. What can we do to make it better? Not just in the accessibility-checklist sense that so many are fixated on, but in the opening new possibilities sense.</p><p><strong>Instrumenting Usability.</strong> Usability testing is great, but are there good ways to instrument our sites to find UI failure points? Do we have any case studies on bringing that sort of data to bear on design?</p><p><strong>Customized Documentation.</strong> Has anyone got good mechanisms that their team uses to customize documentation for end users with customized sites?</p><p><strong>Managing multi-national, multi-cultural projects.</strong> Plone has got some good i18n tools, but that's probably the tiniest consideration in making a project with diverse participants successful.</p><p><strong>Constituent-relationship case studies.</strong> There are lots of Plone sites in use by advocacy organizations that organize constituent campaigns. How do they use existing Plone tools to make that work. What more is needed?</p><p><strong>Delivering content to low-tech communities.</strong> We're adding on slick AJAX UI with every release. Is that posing a problem for getting information to folks with old browers and slow connections?</p><p>That's just my list. The point is that agile organizations bring directly together coders with the people who have domain knowledge. Realistically, we're not going to have lots of end-users at a tech conference. But we can get together a larger portion of our own tech community if we think beyond the set of those who write Python in preference to their birth tongue.</p>
") (dc:publisher nil "No publisher") (dc:creator nil "Steve McMahon") (dc:rights nil) (dc:subject nil "Open Source") (dc:subject nil "Plone") (dc:date nil "2010-08-20T18:30:00Z") (dc:type nil "Blog Entry"))))