;; -*- coding: utf-8 -*-
(("Hyperreals *R" "quarks, bits y otras criaturas infinitesimales" "http://ch3m4.org/blog" (20845 61561 475936) feed 0 nil nil ((title nil "Hyperreals *R") (atom:link ((href . "http://ch3m4.org/blog/feed/") (rel . "self") (type . "application/rss+xml"))) (link nil "http://ch3m4.org/blog") (description nil "quarks, bits y otras criaturas infinitesimales") (lastBuildDate nil "Tue, 09 Apr 2013 19:55:56 +0000") (language nil "es-ES") (sy:updatePeriod nil "hourly") (sy:updateFrequency nil "1") (generator nil "http://wordpress.org/?v=3.5.1") (item nil (title nil "Scala vs. Python vs. Lua") (link nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/") (comments nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/#comments") (pubDate nil "Tue, 09 Apr 2013 19:55:55 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (category nil "Python") (category nil "Scala") (category nil "lua") (category nil "programming-languages") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=549") (description nil "Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera [...]") (content:encoded nil "<p>Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera dar una idea de porqué los recomiendo, a los tres, sin decantarme por sólo uno de ellos. Si buscabas razones para quedarte con uno de ellos, tampoco deberías desestimar otros similares como Ruby, Groovy, Haskel, Clojure o Erlang. De todos hay cosas qué aprender.</p><h2>Python</h2><p>Quizás Python sea el lenguaje más asequible para un programador que empieza o que busca un segundo lenguaje. Su aprendizaje es sencillo, mientras que su potencia y ubicuidad lo hace ideal desde los pequeños scripts que podamos necesitar en nuestro día a día, hasta escalar a servidores empresariales de tipo medio.</p><p>Puede que a muchos disguste python por su identación forzada o por su particular modelo de datos, por citar dos de las características más criticadas. Sin embargo, confía en mí si te digo que python es uno de los mayores compendios de sabiduría que puedes tener al alcance de tus manos. Cualquier cosa que creas extraña o fuera de lugar, seguramente tenga su buena explicación. El sistema colaborativo que hace evolucionar a python (conocido como PEP-<em>Python Enhancement Proposals</em>) consigue que todo el saber de la comunidad python termine decantándose hace un modelo de evolución del lenguaje que lo hace único, con el que mejora calmadamente con cada versión. Operaciones con números grandes, algoritmo MRO para herencia múltiple, estructuras de datos optimizadas (heapq, deque,&#8230;), ordenaciones por clave, operaciones sobre secuencias (sum, any, all,&#8230;)&#8230; son sólo algunos ejemplos de optimizaciones que el usuario usa sin ser realmente consciente de la cantidad de trabajo que le está ahorrando. En python casi siempre hay una forma de hacer las cosas correctamente, y además suele ser la mejor.</p><h2>Lua</h2><p>Desde mi punto de vista, considero Lua como un <em>python minimalista</em>. Sin objetos, sin posibilidad de construir tus propios tipos de datos, pero se apaña con un sólo tipo de estrutura <code>table</code> para montar un sistema de herencia y emular algunos tipos de datos. Si lenguajes como python te parece complicados, no comprendes conceptos como la herencia, la creación de tipos o para qué sirven las metaclases, la simplicidad de lua hará que entiendas mejor estos conceptos.</p><p>El reducido tamaño del intérprete de Lua lo hace apropiado para ser empotrado en otras aplicaciones. Lo tenemos en gestores de paquetes (RPM), bases de datos (mysql-lua), e IDEs (Scite), aunque quizás sea más famoso por ser el motor de script de juegos como <em>World of Warcraft</em>.</p><p>En cuanto a sintáxis, también goza de un minimalismo que, a veces, desearías tuviera python. Posee cierta relajación en la llamada a funciones que permite usarlo para crear DSLs (<em>Lenguajes Específicos del Dominio</em>), aunque quizás su mejor uso sea como lenguaje de descripción de datos en sustitución de xml, yaml o ficheros ini.</p><h2>Scala</h2><p>Reconozco que soy un ferviente partidario de la <em>Programación Funcional</em>. Python tiene algún aspecto de este paradigma, pero cada vez parece más diluido dentro del sistema de Clases Abstractas (<code>ABC</code>-Abstract Base Classes) que empiezan a generalizarse en python. La estrategia de python es optimizar el uso de estas clases abstractas, independientemente de las clases que deriven luego de ellas. Aunque es un buen enfoque de optimización, siempre estará limitado a tiempo de ejecución.</p><p>Scala posee un potente sistema de tipado estático de datos que posibilita la inferencia del tipo de una operación, lo que permite cierta relajación en el tipado que lo hace muy similar al tipado dinámico. Pero la posibilidad de crear nuevos tipos, ya no sólo de objetos, si no también a partir de funciones o de <em>patrones de código</em>, consigue interfaces más robustos y que sea el compilador quien optimize el código, antes de su ejecución.</p><p>Así que tenemos que scala es funcional, con un potente sistema de tipos y, además, 100% compatible con Java. ¿Se puede pedir algo más?</p><p>Pues sí. Incorpora el llamado modelo <em>Actor</em> para programación concurrente. Con los actores, en lugar de compartir un espacio común de memoria entre los distintos procesos concurrentes, se establece un sistema de mensajes que son enviados y recibidos. Este modelo se ha mostrado bastante eficaz en sistemas de alta demanda como son algunas webs como twitter o linkedin.</p><p>En cuanto a la sintáxis, scala también posee algunas normas relajadas para la creación de DSLs muy similar a lo que se ve en Groovy. Algunos lenguajes DSL se usan en <em>frameworks</em> de creación webs, como Play2, o para crear conjuntos de pruebas (ScalaUnit).</p><h2>Conclusión</h2><p>Espero que te haya convencido para que eches un vistazo a algunos de estos lenguajes, aunque los tres sean altamente recomendables. Si tuviera que resumir en pocas líneas lo dicho hasta ahora, sería así:</p><ul><li><p>Python: navaja suiza de los lenguajes. Sirve para todo y está presente en cualquier sitio. Es un compendio de sabiduría para hacer las cosas de la mejor forma, aún sin proponértelo.</p></li><li><p>Lua: lenguaje minimalista. Ayuda a comprender mejor algunos conceptos de programación. Es el lenguaje que me gustaría que tuviera todo navegador en lugar de javascript.</p></li><li><p>Scala: funcional y con potente sistema de tipos. Su implementación del modelo actor lo hace idóneo para la creación de sistemas de alta demanda de accesos.</p></li></ul>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/feed/") (slash:comments nil "4")) (item nil (title nil "De Generaciones Perdidas") (link nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/") (comments nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/#comments") (pubDate nil "Sun, 31 Mar 2013 14:15:27 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=539") (description nil "Allá por los 80, en Zaragoza, cuando internet era tan sólo la i del protocolo TCP/IP y los meros mortales se apañaban con sus modems para acceder a alguna BBS local, y donde la única autopista de la información consistía en una cinta semanal de 200 MB. que llegaba desde el CERN de Ginebra, existía [...]") (content:encoded nil "<p>Allá por los 80, en Zaragoza, cuando internet era tan sólo la <code>i</code> del protocolo TCP/IP y los meros mortales se apañaban con sus modems para acceder a alguna BBS local, y donde la única autopista de la información consistía en una cinta semanal de 200 MB. que llegaba desde el CERN de Ginebra, existía un grupo de <em>hackers</em>, en el buen sentido de la palabra<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>, que abarrotaban las pocas salas de informática que tenía la Universidad de Zaragoza. No existían enseñanza de informática y los conocimientos erán compartidos entre todos sin reservas.</p><p>Fue una época convulsa, presagio de los cambios que iban a venir y que lo cambiarían todo. Luchas por el espacio cybernético, espionaje y contraespionaje, virus y antivirus,&#8230;un mundo cruel que quedó atrás y que originó una &#8220;generación perdida&#8221;, una de tantas, pero de un nivel tecnológico sin paragón que hizo puntera a Zaragoza y de la que muy pocos tienen siquiera una mínima noción de su existencia.</p><p>A veces me he preguntado si valdría la pena dar a conocer a esta generación y todo lo que hicieron. Pero sus integrantes, una vez rehechas sus vidas ajenas a la universidad, incluso dejando sus estudios en la cuneta, callan y no parece que deseen que se hable del tema. No esperes que yo lo haga aquí, pero si quieres una pequeña muestra de lo que pasó existe una serie de historias contadas en el libro <em>&#8220;Sueños Electrónicos. Emprendedores en la Red&#8221;</em> de José Carlos Arnal (<a href=\"http://www.casadellibro.com/libro-suenos-electronicos-emprendedores-en-la-red/9788483241172/817995\">ISBN: 9788483241172</a>) que puede darte una buena idea, aunque incompleta. Como se suele decir, <em>&#8220;existen dos tipos de hackers: los buenos y los famosos&#8221;</em>. Si a álguien le interesa el tema, que lea este libro, porque de los buenos hackers nunca se hablará.</p><p>En este país nunca aprenderemos. Ya sea por guerras, conflictos políticos o por la avarienta corrupción, seguimos quemando generaciones en la gran pira de calamidades inevitables en la que se ha convertido la historia de España. Sirva este artículo como callado homenaje a esta <em>De-Generación Perdida</em> junto con el que <a href=\"http://qlio.blogspot.com.es/2012/01/jakers-finales-de-los-80s-en-zaragoza.html\">escribió Gaudi en su bitácora</a> hace ya un año.
&nbsp;</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Extraer conocimientos a través de la tecnología.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/feed/") (slash:comments nil "0")) (item nil (title nil "Mutable o inmutable, he ahí el dilema") (link nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/") (comments nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/#comments") (pubDate nil "Fri, 22 Mar 2013 21:02:32 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=536") (description nil "NOTA: Disponible también como ipynb Quien se enfrenta a la documentación de python por primera vez se pregunta porqué esa insistencia en mantener tipos de datos duplicados en versiones mutables e inmutables. Tenemos listas y tuplas que casi hacen lo mismo. En python3, tenemos el tipo inmutable bytes y el mutable bytearray. ¿Qué sentido tiene [...]") (content:encoded nil "<p><strong>NOTA</strong>: Disponible también como <a href=\"http://nbviewer.ipython.org/5224623\">ipynb</a></p><p>Quien se enfrenta a la documentación de python por primera vez se pregunta porqué esa insistencia en mantener tipos de datos duplicados en versiones mutables e inmutables. Tenemos listas y tuplas que casi hacen lo mismo. En python3, tenemos el tipo inmutable <code>bytes</code> y el mutable <code>bytearray</code>. ¿Qué sentido tiene tener <em>&#8220;duplicados&#8221;</em> algunos tipos en sus dos versiones? La única explicación que se puede encontrar en la documentación es que los tipos inmutables son más apropiados para usarlos como índices en diccionarios. No parece mucha ventaja para la complejidad que aporta.</p><p>En este artículo veremos qué implica la <em>mutabilidad</em> de un tipo de dato y en qué puede sernos útil usar un tipo mutable u otro inmutable.</p><h2>¿Qué es lo que cambia?</h2><p>Antes de explicar nada, veamos si somos capaces de saber qué está cambiando. Veamos dos códigos muy similares:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span> a <span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span></div></div><p>Parece que ambos códigos hagan lo mismo: añadir un fragmento, en sus versiones tupla y lista, respectivamente. Vamos a analizarlo mejor. Para saber qué pasa, usemos la función <code>id()</code>. Esta función devuelve un identificador de un objeto de tal modo que si dos objetos tienen el mismo identificador, entonces son el mismo objeto.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">192021604</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189519828</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189780876</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189780876</span></div></div><p>En la versión tupla, se ha creado una nueva tupla para realizar la operación, mientras que en la versión lista se ha usado la misma lista, modificándose con el resultado. Si cambiamos el operador <code>+=</code> por una versión más explícita tal vez se vea mejor:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span>a+<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a.<span style=\"color: black;\">extend</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span></div></div><p>Al operar con tuplas, los operandos no cambian de valor, creándose una nueva tupla como resultado de la operación. Podríamos sustituir toda la operación por el resultado final y el código funcionaría igual. En el caso de las listas, la lista se modifica <em>&#8220;in situ&#8221;</em> durante la operación. En estos casos, cambiar la expresión por el resultado final no garantiza que el programa funcione igual. Se necesita pasar por todos y cada uno de los estados intermedios para asegurar que todo funcione igual.</p><p>Esta propiedad de poder cambiar una expresión por su resultado final es conocida por <a href=\"http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)\" title=\"Referential Transparency\">Transparencia referencial</a> en programación funcional. Por lo general, los tipos inmutables se adecúan mejor a operaciones de cálculo donde el resultado final depende únicamente de los argumentos de entrada. Por otro lado, los tipos mutables son útiles para salvaguardar estados intermedios necesarios para la toma de decisiones durante la ejecución de un programa.</p><p>Por lo general, se saber elegir un tipo mutable o su homólogo inmutable es todo un arte. Ante la duda, los tipos inmutables son más fáciles de rastrear. Así mismo, veremos en próximos artículos que los tipos inmutables ayudan bastante en programación concurrente, por si estás pensando en programación multiproceso.</p><h2>Ejemplos de tipos propios</h2><p>La mutabilidad e inmutabilidad va más allá de los tipos estándar de python. Nosotros mismos podemos hacer nuestras propias clases mutables o inmutables, según nuestras necesidades.</p><p>Pongamos que creamos una clase <code>Point</code> para definir puntos, junto con unas sencillas operaciones para sumar, restar y desplazar. Nuestra idea es poder usar estos objetos en expresiones, por lo que es práctica común que toda operación devuelva el resultado como un punto para seguir encadenando operaciones.</p><p>Una versión <em>&#8220;mutable&#8221;</em> del objeto sería así:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointMutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>dx<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>dy<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span></div></div><p>En todas las operaciones, operamos el objeto consigo mismo y lo retornamos como resultados. Si probamos, vemos que no funciona tal como se esperaba:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">&#40;</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span> - <span style=\"color: black;\">&#40;</span>p1+p2<span style=\"color: black;\">&#41;</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Devuelve <code>&lt;Point&lt;0,0&gt;</code> independientemente de los valores iniciales y de los desplazamientos que demos. Al ser nuestro objeto mutable, cada operación lo va cambiando. Al final, toda la expresión se reduce a una simple resta <code>p1-p1</code>, que sería la última operación y que da siempre <code>&lt;Point(0,0)&gt;</code>. No parece que sea el resultado esperado.</p><p>Debemos adoptar una táctica más defensiva: el objeto nunca debe cambiar durante el cálculo. Como resultado de cada operación deberemos devolver una nueva instancia y que el estado de ésta, o sea, sus atributos, no se alteren a lo largo del cálculo:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-other.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+other.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+dx<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+dy<span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>code<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&lt;</span><span style=\"color: #dc143c;\">code</span> lang<span style=\"color: #66cc66;\">=</span><span style=\"color: #483d8b;\">&quot;python&quot;</span><span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">&#40;</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span> - <span style=\"color: black;\">&#40;</span>p1+p2<span style=\"color: black;\">&#41;</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>-<span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Siendo perfeccionistas, deberíamos blindar mejor los atributos de la clase para hacerlos de <em>sólo lectura</em> mediante <code>properties</code>.</p><p>En este ejemplo hemos podido ver los resultados imprevisibles que podemos tener si abusamos de la mutabilidad. Estos problemas se ven incrementados si hubiera varios hilos de ejecución y cada hilo estuviera modificando las mismas variables comunes. Lamentablemente, es un caso bastante común debido a una mala previsión a la hora de iniciar un proyecto de desarrollo. Pero ésto lo veremos en un próximo artículo.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/feed/") (slash:comments nil "0")) (item nil (title nil "Mutabilidad de Listas") (link nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/") (comments nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/#comments") (pubDate nil "Sat, 16 Mar 2013 14:53:21 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=514") (description nil "NOTA: puedes visionar este artículo y descargártelo como notebook ipython en http://nbviewer.ipython.org/5177340 Mucha gente, cuando se enfrenta por primera vez al lenguaje python, no entiende bien el concepto de &#8220;inmutabilidad&#8221; que tanto repite la documentación al tratar de diferenciar algunos tipos contenedores como tuplas, listas, conjuntos y diccionarios. Por lo general, la gente formada en [...]") (content:encoded nil "<p><strong>NOTA</strong>: puedes visionar este artículo y descargártelo como notebook ipython en <a href=\"http://nbviewer.ipython.org/5177340\">http://nbviewer.ipython.org/5177340</a></p><p>Mucha gente, cuando se enfrenta por primera vez al lenguaje python, no entiende bien el concepto de <em>&#8220;inmutabilidad&#8221;</em> que tanto repite la documentación al tratar de diferenciar algunos tipos contenedores como tuplas, listas, conjuntos y diccionarios.</p><p>Por lo general, la gente formada en lenguajes de programación clásicos tiene la idea de que las variables son porciones de memoria donde colocar valores. Que una variable no se éso, <em>variable</em>, resulta un contrasentido. Han visto <em>constantes</em>, pero sólo sirven para inicializar variables y poco más. Si en su carrera hubieran sido formados en algún lenguaje funcional se darían cuenta que hay quienes piensan que las variables que cambian de valor son las raras, que lo más natural es que una variable conserve su valor inicial, o sea, que sea inmutable.</p><p>Por poner un ejemplo, el siguiente código está basado en una pregunta reciente en la lista <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">python-es</a>. Tenemos una lista de pares y queremos quitar las parejas repetidas con orden cambiado:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> quitar_dup<span style=\"color: black;\">&#40;</span>lista<span style=\"color: black;\">&#41;</span>:<br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; item.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lista.<span style=\"color: black;\">remove</span><span style=\"color: black;\">&#40;</span>item<span style=\"color: black;\">&#41;</span><br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> lista<br /><br />
L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#93;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> quitar_dup<span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span> &nbsp;<span style=\"color: #808080; font-style: italic;\">#res: [[1, 3], [3, 1]]</span></div></td></tr></tbody></table></div><p>A simple vista, el código parece correcto, pero tenemos dos operaciones que pueden mutar listas: <code>.reverse()</code> y <code>.remove()</code>. De hecho, el resultado es incorrecto: <code>[[1, 3], [3, 1]]</code></p><p>A medida que recorremos la lista en el bucle <code>for</code>, la lista se va modificando, lo que da lugar a resultados inesperados. Si no lo ves bien, basta añadir algunos <code>prints</code> en lugares estratégicos para que comprobar lo que pasa. De hecho, sólo existen dos iteraciones para cuatro elementos que tiene la lista.</p><p>Otro tipo de casos son cuando pasamos listas a funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">&#41;</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><p>Como efecto colateral, la función ha modificado la lista pasada como argumento, algo que no es siempre deseable. El problema se agrava más si empleamos listas en valores por defecto:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><p>Como se puede ver, aunque intentemos <em>resetear</em> el valor por defecto, la función tiene un efecto memoria que es imposible de eliminar. Este efecto es a veces buscado, pero en general debe ser siempre evitado ya que desvirtúa el sentido que tiene dar valores por defecto.</p><p>Estos efectos son todavía más perniciosos con la <em>funciones lambda</em>. Al carecer de una <em>clausura</em> como las funciones, la evaluación de una función lambda depende del <em>scope</em> donde han sido definidas. Por ejemplo, observa esta creación de una lista de funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">fns<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; fns.<span style=\"color: black;\">append</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff7700;font-weight:bold;\">lambda</span> x: x+i<span style=\"color: black;\">&#41;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span></div></td></tr></tbody></table></div><p>Siempre añade <code>4</code> al argumento, que es el valor de <code>i</code> al acabar el bucle, independientemente de qué valor tenía esta variable en el momento de crear la función lambda. No es de extrañar que se recomiende dejar de usar estas funciones.</p><p>Por último, otro efecto funesto de la mutabilidad de las listas aparece en la creación de <em>listas multidimensionales</em> (aka <em>matrices</em>). Una forma rápida de crear una matriz de 2&#215;2 es: <code>[[0]*2]*2</code>. El problema aquí está en que cuando clonamos listas, en lugar de copiar los elementos, los enlaza entre sí. Quizás se vea mejor si hacemos alguna operación:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">&gt;&gt;&gt; l=[[0]*2]*2<br />
[[0, 0], [0, 0]]<br />
&gt;&gt;&gt; l[0][0]<br />
0<br />
&gt;&gt;&gt; l[0][0]=1<br />
&gt;&gt;&gt; l<br />
[[1, 0], [1, 0]]<br />
&gt;&gt;&gt; l[0] is l[1]<br />
True</div></div><p>Los elementos <code>l[0]</code> y <code>l[1]</code> son el mismo elemento. Que los elementos de una lista puedan estar <em>entrelazados</em> resulta muy interante para algunos algoritmos de búsquedas. Pero hay que conocer bien lo que estamos haciendo si no queremos llevarnos alguna sorpresa.</p><h2>Recomendaciones para hacer código funcional</h2><h3>Copia de listas</h3><p>En funciones y métodos, si recibimos una lista como argumento, la primera acción defensiva que deberíamos hacer es copiar la lista en una variable local y trabajar solo con la variable local desde ese momento. Con una asignación directa no se realiza una copia, más bien estaríamos <em>enlazando</em> una nueva referenciasin solucionar nada.</p><p>La forma consensuada entre programadores python de copiar una lista es con la operación de <em>spliting</em><code>L[:]</code>, aunque sirven otras operaciones idempotentes como <code>L*1</code> ó <code>L+[]</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>. Para listas de elementos entrelazados tendremos que acudir a otros mecanismos de copia como los que ofrece el <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">módulo <code>copy</code></a>, aunque no será frecuente que lo necesitemos.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: black;\">&#41;</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l<span style=\"color: #66cc66;\">=</span>lista<span style=\"color: black;\">&#91;</span>:<span style=\"color: black;\">&#93;</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><p>En cuanto a los argumentos por defecto, lo mejor es no usar nunca una lista para tal cosa. Una buena estrategia defensiva consiste en usar <code>None</code> de esta forma:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">None</span><span style=\"color: black;\">&#41;</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: #ff7700;font-weight:bold;\">if</span> lista <span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #008000;\">None</span><span style=\"color: #ff7700;font-weight:bold;\">else</span> lista<span style=\"color: black;\">&#91;</span>:<span style=\"color: black;\">&#93;</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><h3>Operaciones inmutables con listas</h3><p>En cuanto a evitar las operaciones que mutan listas, siempre hay alternativas inmutables de todas estas operaciones. El siguiente cuadro puede servir como referencia:</p><p><style type=\"text/css\">
table {
    color:#333333;
    border-width: 1px;
    border-color: #666666;
    border-collapse: collapse;
    font-family: \"New Courier\", monospaced, fixed;
    font-size:14px;
}
table th {
    border-width: 1px;
    padding: 8px;
    border-style: solid;
    border-color: #666666;
    background-color: #dedede;
}
table td {
    border-width: 1px;
    padding: 8px;
    border-style: solid;
    border-color: #666666;
    background-color: #ffffff;
}
</style></p><table><thead><tr><th>Mutable</th><th>Inmutable</th></tr></thead><tbody><tr><td><code>L.append(item)</code></td><td><code>L+[item]</code></td></tr><tr><td><code>L.extend(sequence)</code></td><td><code>L + list(sequence)</code></td></tr><tr><td><code>L.insert(index, item)</code></td><td><code>L[:index] + [item] + L[index:]</code></td></tr><tr><td><code>L.reverse()</code></td><td><code>L[::-1]</code></td></tr><tr><td><code>L.sort()</code></td><td><code>sorted(L)</code></td></tr><tr><td><code>item = L.pop()</code></td><td><code>item,L = L[-1],L[:-1]</code></td></tr><tr><td><code>item = L.pop(0)</code></td><td><code>item,L = L[0],L[1:]</code></td></tr><tr><td><code>item = L.pop(index)</code></td><td><code>item, L = L[item], L[:item]+L[item+1:]</code></td></tr><tr><td><code>L.remove(item)</code></td><td><code>L=L[:item]+L[item+1:]</code></td></tr><tr><td><code>L[i:j] = K</code></td><td><code>L[:i] + K + L[j:]</code></td></tr></tbody></table><p>A la hora de decidir qué versión usar, la versión inmutable es más apropiada para programación funcional y resulta incluos más intuitiva de interpretar. No es extraño ver errores de código donde se espera resultados de las operaciones <code>.sort()</code> o <code>.reverse()</code>, que siempre devuelven <code>None</code>. Para el intérprete de python no hay error, pero a veces nos será difícil darnos cuenta de estos errores:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO ERRÓNEO: machacamos la lista con None</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> l.<span style=\"color: black;\">sort</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
Traceback <span style=\"color: black;\">&#40;</span>most recent call last<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; File <span style=\"color: #483d8b;\">&quot;&lt;stdin&gt;&quot;</span><span style=\"color: #66cc66;\">,</span> line <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #66cc66;\">&lt;</span>module<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #008000;\">TypeError</span>: <span style=\"color: #483d8b;\">'NoneType'</span><span style=\"color: #008000;\">object</span><span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #ff7700;font-weight:bold;\">not</span> iterable</div></td></tr></tbody></table></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO CORRECTO</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">sorted</span><span style=\"color: black;\">&#40;</span>l<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2<br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">9</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">16</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">25</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>De hecho, la operación <code>L*1</code> es más eficiente que <code>L[:]</code>.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/feed/") (slash:comments nil "1")) (item nil (title nil "Dobleces en python") (link nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/") (comments nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/#comments") (pubDate nil "Wed, 27 Feb 2013 20:39:24 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=502") (description nil "En el último artículo del blog contaba en qué consistía doblar código1: &#8220;&#8230;un código que se pliega sobre sí mismo. Un código que te lleva desde un principio a un final por el camino más corto.&#8221; Para ilustrar este concepto voy a usar un trozo de código python que se ve frecuentemente entre los programadores [...]") (content:encoded nil "<p>En el <a href=\"http://ch3m4.org/blog/2013/02/21/collage-vs-origami/\" title=\"Collage vs. Origami\">último artículo</a> del blog contaba en qué consistía <em>doblar código</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>:</p><blockquote><p>&#8220;&#8230;un código que se pliega sobre sí mismo. Un código que te
  lleva desde un principio a un final por el camino más corto.&#8221;</p></blockquote><p>Para ilustrar este concepto voy a usar un trozo de código python que se ve frecuentemente entre los programadores recién llegados de otros lenguajes:</p><p><sub><em>NOTA: se usará python 3.x para los siguientes ejemplos</em></sub></p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; i<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">0</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">&#40;</span>i<span style=\"color: #66cc66;\">&lt;</span>num<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; i+<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">1</span><br /><br />
fich<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">&#41;</span><br />
lineas<span style=\"color: #66cc66;\">=</span>fich.<span style=\"color: black;\">readlines</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><br />
listar<span style=\"color: black;\">&#40;</span>lineas<span style=\"color: black;\">&#41;</span></div></div><p>Resumen: se define una función para imprimir en pantalla la lista de líneas leídas de un fichero, precedidas con el número de caracteres que tiene la línea.</p><p>Quien tenga algo de experiencia con python seguramente vea raro este código, incluso lo califique como <em>&#8220;poco pythónico&#8221;</em>. Nombrar a la función <code>listar</code>, como verbo, es señal de que el programador proviene de un lenguaje de <em>programación imperativo</em>. El programador ha buscado en python las mismas estructuras de control que tenía en su lenguaje de origen y sólo ha encontrado familiar la estructura <code>while</code>.</p><p>Rebuscando un poco más, tal vez encuentre cómo se usan los bucles <code>for</code> en python:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>num<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span></div></div><p>Un bucle <code>for</code> se caracteriza por concentrar en una sentencia todo el control del bucle, una gran ayuda visual para quien vaya a leer este código. La variable de control solo se modifica en la sentencia <code>for</code>, lo que evita errores.</p><p>Analizando más detenidamente, el bucle <code>for</code> itera sobre una secuencia de enteros dada por <code>range(0,num)</code>, de donde se sacan los índices con los que acceder a cada elemento de la lista <code>args</code>. Ésta sería la visión clásica de cómo operar con <code>arrays</code>.</p><p>Pero esta visión ha evolucionado con el tiempo hasta llegar al concepto de <em>&#8220;Colección&#8221;</em> que ya poseen casi todos los lenguajes, bien en su sintaxis, bien como librería estándar. Una <em>&#8220;Colección&#8221;</em> consiste en un grupo de objetos sobre los que puede iterar. <code>range(0,num)</code> sería una colección ordenada de números. El siguiente paso a dar sería iterar directamente sobre la lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> args:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span></div></div><p>Con este código hemos conseguido un doble objetivo, mejorar la legibilidad y darle más robustez al despreocuparnos por los índices de acceso. Los índices de acceso fuera de límites suelen ser origen de multitud de errores.</p><p>Pero tenemos algo más: al no usar índices hemos generalizado el uso de la función por cualquier secuencia, generador o <a href=\"http://docs.python.org/3/library/stdtypes.html#iterator-types\" title=\"Tipo iterador\">iterador</a>. Concretamente, los objetos <code>files</code> cumplen con el protocolo iterador, por lo que sería posible pasarlo directamente a esta función sin necesidad de volcar todas las líneas del fichero a una lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>it<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><br /><br />
listar<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span></div></div><p>Con este último doblez hemos ganado concisión. Pero sobre hemos ahorrado recursos ya que no necesitamos leer todo el fichero en memoria. La lectura del fichero se hará progresivamente en el momento que se solicite la siguiente línea, por lo que este código debería funcionar incluso con ficheros enormes, independiente de la cantidad de memoria disponible. Sólo se empleará la memoria suficiente para cachear una pocas líneas para ir renovándolas a medida que se prosiga la lectura del fichero.</p><p>Es un buen momento para comparar esta versión del código con la original de la que hemos partido.</p><h2>Programación Funcional</h2><p>Entre doblez y doblez, hemos perdido algunas variables intermedias superfluas. Esta <em>manía</em> por deshacerse de variables intermedias es señal de estar aproximándonos a un estilo de <em>programación funcional</em>.</p><p>Una posible definición de <em>&#8220;Programación Funcional&#8221;</em> sería como <em>aquella programación que difiere la evaluación de una expresión hasta el momento último en el que se vaya a usar su valor</em>.</p><p>Para este propósito, la expresión no puede depender de factores externos como variables globales o cambios de estado. No sabemos cuándo será evaluada una expresión. Lo único posible es hacer depender el resultado de una expresión en función del valor de otra, lo que se conoce por <em>&#8220;Composición de funciones&#8221;</em> (y de ahí el nombre de programación funcional).</p><p>Este modo de diferir la evaluación es lo que hicimos con el iterador fichero, cuyas líneas no se leían hasta el momento preciso. La pregunta es ¿podemos mejorar la orientación funcional de nuestro código?</p><p>La función <code>listar</code> no devuelve nada, tan sólo busca un efecto colateral. Es lo que se conoce en otros lenguajes como <em>&#8220;procedimiento&#8221;</em> (<em>procedure</em>). En nuestra metáfora de &#8220;pliegues&#8221;, una función que no devuelve nada la podríamos considerar como un &#8220;corte&#8221;, ya que no podemos hacer nada más a partir de aquí.</p><p>¿Qué pasaría si queremos cambiar la línea que se imprime en pantalla? ¿Y si queremos parar después de imprimir un número de líneas? En este punto, lo mejor es &#8220;desdoblar&#8221; el código y darle una orientación más funcional:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">from</span><span style=\"color: #dc143c;\">itertools</span><span style=\"color: #ff7700;font-weight:bold;\">import</span> islice<br /><br /><span style=\"color: #ff7700;font-weight:bold;\">def</span> lineas<span style=\"color: black;\">&#40;</span>it<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">yield</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;{: 5d} {}&quot;</span>.<span style=\"color: black;\">format</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><br />
it<span style=\"color: #66cc66;\">=</span>lineas<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;pr.py&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> n<span style=\"color: #66cc66;\">,</span> l <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">enumerate</span><span style=\"color: black;\">&#40;</span>islice<span style=\"color: black;\">&#40;</span>it<span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>n<span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;|&quot;</span><span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">&#41;</span></div></div><p>La función <code>listar</code> ha pasado a ser el iterador <code>lineas</code> que retorna las líneas ya formateadas. Asimismo, se ha cambiado la función <code>format</code> por el método <code>format</code> de los <code>strings</code> con el que se pueden formatear mejor varios valores a la vez. La impresión de las líneas en pantalla se deja para el último momento, cuando se necesita ver el resultado. Es en este momento cuando se decide cuántas líneas se van a imprimir, que es lo que hace el <code>islice</code> acortando el iterador <code>lineas</code> a 5 iteraciones. También se usa el iterador <code>enumerate</code> para ir enumerando las líneas a medida que las obtenemos.</p><p>Como se ve, una orientación funcional permite encadenar varias operaciones sin necesidad de mantener estados intermedios<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>. Además de lo que supone de ahorro de recursos, no tener que mantener un contexto con los estados intermedios hará más sencillo migrar la ejecución de un proceso a otro en programación concurrente (eg: <em>multihilo</em>). Hoy en día, tal como evolucionan los ordenadores, quien no programe pensando en la ejecución concurrente terminará programando dos veces.</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Puede que prefieras usar el término <a href=\"http://es.wikipedia.org/wiki/Refactorización\" title=\"Refactorización\"><em>&#8220;refactorizar&#8221;</em></a>, pero he pensado que es mejor dejar este término para la programación orientada a objeto y usar <em>&#8220;doblez&#8221;</em> para dar una idea más afín a la programación funcional.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li><li id=\"fn:2\"><p>En realidad, no es del todo cierto que la función no dependa de estados externos ya que el iterador <code>it</code> que hemos pasado como argumento podría cambiar externamente entre iteraciones.&#160;<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/feed/") (slash:comments nil "5")) (item nil (title nil "Collage vs. Origami") (link nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/") (comments nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/#comments") (pubDate nil "Thu, 21 Feb 2013 21:09:40 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=499") (description nil "En mis años como programador he visto mucho código. Lo suficiente como para saber qué estilo tiene el programador que lo escribe, cuáles son sus vicios y cuáles son sus errores de concepto. Nos resulta imposible definir conceptos como &#8220;elegancia&#8221; o &#8220;claridad&#8221; en un código. Son conceptos más afines a la Estética que a las [...]") (content:encoded nil "<p>En mis años como programador he visto mucho código. Lo suficiente como para saber qué estilo tiene el programador que lo escribe, cuáles son sus vicios y cuáles son sus errores de concepto.</p><p>Nos resulta imposible definir conceptos como <em>&#8220;elegancia&#8221;</em> o <em>&#8220;claridad&#8221;</em> en un código. Son conceptos más afines a la <em>Estética</em> que a las <em>Ciencias de la Computación</em>, siendo difíciles de medir objetivamente. Nunca serán parte de una metodología y, sin embargo, se consideran objetivos a alcanzar por todo programador que se precie.</p><p>En nuestra simpleza, necesitamos compartimentar todo lo que conocemos en grandes grupos: imperativo vs. dinámico, tipado estático vs. tipado dinámico, estructural vs. orientado a objeto, orientado a objeto vs. funcional, &#8230;</p><p>En este mundo de <em>versus</em>, podemos hacer una similitud de la programación de código con el versus <em>&#8220;Collage vs. Origami&#8221;</em>.</p><ul><li><p>Un <strong>código collage</strong> sería un código construido como parches. Secciones de estructuras distintas, con controles que encajen todas las piezas. Todo pensado para que si una pieza no funciona, se &#8220;arranca&#8221; y se pone otra encima.</p></li><li><p>Un <strong>código origami</strong> sería un código que se pliega sobre sí mismo. Un código que te lleva desde un principio a un final por el camino más corto. Si algo no funciona, se vuelve atrás, se &#8220;desdobla&#8221; y se hace un doblez nuevo.</p></li></ul><p>Al igual que el origami, la creación de código requiere muchas veces pararse a pensar qué parte del código se complicó demasiado y actuar sobre esa parte. Si no se entiende bien, una repetición consistente en teclear decenas de veces ese código ayuda a entender mejor lo que hace y el motivo que hacía que fuera tan complicado. Es muy similar a repetir los mismos dobleces de una figura de papel hasta lograr su doblado perfecto.</p><p>Como parte de tribunales de selección para puestos informáticos, me he sentido muchas veces molesto por tener que redactar tediosos cuestionarios de preguntas técnicas que nada valoraban la capacidad real del candidato para el futuro trabajo que iba a realizar. El objeto era realizar una fuerte criba entre los candidatos y, sobre todo, ordenarlos por puntos para hacer más sencilla su selección posterior.</p><p>Pero era en la posterior prueba práctica donde mejor podía apreciar la valía de un candidato. Una visión del código fuente y la documentación asociada permitía apreciar claramente quiénes eran los adecuados para el puesto. Pero ¿cómo valorar con una puntuación esta percepción?</p><p>Puede que para la próxima vez empiece por pedir al candidato que doble el papel de los enunciados de la prueba. Seguramente consiga saber más de él que de las respuestas que pueda darme.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/feed/") (slash:comments nil "6")) (item nil (title nil "Estado de situación") (link nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/") (comments nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/#comments") (pubDate nil "Tue, 19 Feb 2013 20:39:57 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (category nil "PyConES") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=497") (description nil "Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su influencia. En mi trabajo como informático en una administración pública, soy testigo de cómo [...]") (content:encoded nil "<p>Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su influencia.</p><p>En mi trabajo como informático en una administración pública, soy testigo de cómo se están aplicando medidas de austeridad sin contramedidas que eviten el colapso del sistema. Sin duda alguna, el objetivo de estas medidas no puede ser otro que liquidar el sistema público para su sustitución por otro basado en el libre mercado, menos solidario y más injusto.</p><p>Pero no quiero hablar de la crisis en general. Hay otros muchos blogs que lo hacen mucho mejor que yo y con mayor profundidad. Solo quisiera hablar ahora de los cambios que estoy viviendo en mi entorno de trabajo.</p><p>Por un lado, todos aquellos proyectos innovadores en los que estaba implicado han sido cancelados o aminorados por los nuevos gestores. Como primera consecuencia de ello, han quedado sin uso todos mis programas hechos en python con los que extraía la información que necesitaba la dirección para la toma de decisiones (<abbr title=\" \"Management Information System\" - \"Sistema de información gerencial (SIG)\"\">MIS</abbr>). Confío que algún día vuelva a interesar el <em>estado real</em> de la administración donde trabajo, aunque sospecho que para entonces será demasiado tarde.</p><p>Se puede afirmar que ahora mismo ya no programo en python. Por si fuera poco, a ésto hay que añadir la cantidad de proyectos que se nos están quedando huérfanos por no poder renovar su mantenimiento o, simplemente, por quebrar y desaparecer las empresas que los llevaban. Todos estos proyectos están cayendo en mi bandeja de tareas pendientes, con lo que ahora he tenido que volver a programar en lenguajes que creía olvidados como Visual Basic, TSQL o PHP. Un gran paso atrás del que no veo que podamos salir en bastantes años.</p><p>Por este motivo, cuando un grupo de entusiastas programadores españoles de python unieron esfuerzos para crear una <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\">asociación</a> con la que montar la primera <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\"><strong>PyCon</strong> española</a>, no he podido dejar de pensar lo lejos que estoy en estos momentos de considerarme <em>&#8220;programador python&#8221;</em>. Se me incluyó en un principio entre los <em>&#8220;socios fundadores&#8221;</em> de la asociación, supongo que debido a mi labor en la lista de <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a> todos estos años. Pero pienso que un socio fundador debe ser una especie de socio <em>&#8220;compromisario&#8221;</em> que trabaje duro para hacer viable la asociación, sobre todo en sus inicios más difíciles. En estos momentos, no me veo capaz de algo así, ni siquiera de mostrar el más mínimo entusiasmo. Por éso mismo, he preferido declinar el ofrecimiento y figurar como un socio más, a pesar de haber podido disgustar a más de uno.</p><p>Como puntilla a lo dicho, últimamente estoy dedicando todo mi tiempo disponible al estudio del lenguaje <a href=\"http://www.scala-lang.org/\">scala</a>. Además de reconciliarme con la programación funcional, me ha hecho férreo defensor del tipado estático frente al tipado dinámico que usa python. No quiero decir de ninguna manera que abandone python, pero preveo que este año lo dedicaré a convertirme en experto programador de scala. Definitivamente, no encajo preparando la PyCon. Mis disculpas por ello.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/feed/") (slash:comments nil "4")) (item nil (title nil "Pruebas básicas de python (y scala)") (link nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/") (comments nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/#comments") (pubDate nil "Thu, 25 Oct 2012 16:04:02 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (category nil "Scala") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=457") (description nil "Como continuación del artículo &#8220;Cómo contratar a un programador de python&#8221; voy a dar las soluciones a algunas de las pruebas básicas que comentaba del proceso de selección. Añado también las soluciones sobre cómo sería con scala y de paso comparamos ambos lenguajes1. Prueba del &#8220;Hello, World!&#8221; Desde que se inventó el lenguaje C, la [...]") (content:encoded nil "<p>Como continuación del artículo <a href=\"http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/\" title=\"Cómo contratar un programador de python\">&#8220;Cómo contratar a un programador de python&#8221;</a> voy a dar las soluciones a algunas de las pruebas básicas que comentaba del proceso de selección. Añado también las soluciones sobre cómo sería con <em>scala</em> y de paso comparamos ambos lenguajes<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p><h2>Prueba del &#8220;Hello, World!&#8221;</h2><p>Desde que se inventó el lenguaje C, la prueba del <code>\"Hello, World!\"</code> es la prueba que inicialmente caracteriza a un lenguaje. Y en python sería:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span></div></div><p>Lo que hay que saber es que este código no funciona en python3 y será lo primero que te pregunte el seleccionador. En python3, el comando <code>print</code> se convierte en una función, por lo que se debe añadir los paréntesis:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: black;\">&#41;</span></div></div><p>Con esta introducción, el seleccionador te puede preguntar alguna cosa más sobre el comando <code>print</code>, como si se puede usar con cualquier objeto o si se puede sacar fácilmente una salida tabulada.</p><p>En scala, la respuesta también es simple:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">println<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: #F78811;\">&#41;</span></div></div><p><code>println</code> es una función, como es lógico al tratarse de un <em>lenguaje funcional</em>. Un seleccionador te puede preguntar por el sufijo <code>ln</code>, que no es otra cosa que añadir un salto de línea en la salida. Este código es equivalente a:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">print<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!<span style=\"color: #0000ff; font-weight: bold;\">\\n</span>&quot;</span><span style=\"color: #F78811;\">&#41;</span></div></div><p>Se puede ver al final una expresión de escape que representa al salto de línea, universalmente aceptada por un buen número de lenguajes (python incluído).</p><h2>Detector de palíndromos</h2><p>Un palíndromo sería una frase que resulta igual leída del principio al final, que del final al principio. Algunos ejemplos:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">A man, a plan, a canal: Panama!<br />
Dábale arroz a la zorra el Abad</div></div><p>Para hacer un detector de palíndromos en python tenemos que hacer una función que lo primero que haga sea filtrar todos los espacios en blancos y los signos de puntuación de la frase, convertir todas las letras a minúsculas (o mayúsculas) y comprobar luego si la frase es igual en un sentido y otro:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> isPalindrome<span style=\"color: black;\">&#40;</span>frase<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; frase_limpia<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>c.<span style=\"color: black;\">lower</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">from</span> c <span style=\"color: #ff7700;font-weight:bold;\">in</span> frase <span style=\"color: #ff7700;font-weight:bold;\">if</span> c<span style=\"color: #66cc66;\">&gt;=</span><span style=\"color: #483d8b;\">&quot;A&quot;</span><span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> frase_limpia<span style=\"color: #66cc66;\">==</span>frase_limpia.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span></div></div><p>Como primera aproximación puede valer. Se filtra la frase para que sólo aparezcan letras (<code>c&gt;=\"A\"</code>), quitando espacios y signos de puntuación. También se ha convertido a minúsculas con <code>c.lower()</code> para hacer mejor la comparación. El problema es que no convierte las vocales con tilde a vocales sin tilde, con lo que el palíndromo <em>&#8220;Dábale arroz a la zorra el Abad&#8221;</em> no lo va a detectar bien. El <em>&#8220;candidato&#8221;</em> debe darse cuenta de ello e intentar explicar algún modo de resolverlo (cuya resolución completa quedaría fuera de la prueba real y del presente artículo<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>).</p><p>En scala sería algo así:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">=</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">==</span>frase<span style=\"color: #000080;\">_</span>limpia.<span style=\"color: #000000;\">reverse</span><br /><span style=\"color: #F78811;\">&#125;</span></div></div><p>Aquí todas las operaciones se han hecho con el tipo <code>String</code>, sin necesidad de pasar a una lista como en python. La última sentencia de la función será el resultado que devuelve la función. En sí, esta función sería correcta, pero usar una variable intermedia como <code>frase_limpia</code> para guardar un estado intermedio va en contra de la filosofía de la programación funcional. Un programa funcional <em>intenta retrasar todo lo que se pueda la evaluación del resultado con el fin de evitar posibles efectos colaterales</em>. Lo ideal sería que sólo se hiciera la <em>evaluación</em> en la última sentencia de la función.</p><p>Una forma de hacerlo más <em>&#8220;funcional&#8221;</em>:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> f<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> g<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">&#40;</span>f compose g<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #F78811;\">&#41;</span><br /><span style=\"color: #F78811;\">&#125;</span></div></div><p>&#8230;o todo junto en una línea:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#40;</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><span style=\"color: #F78811;\">&#41;</span></div></div><h2>Expresión regular para encontrar teléfonos en un texto</h2><p>Lo más simple es buscar 9 dígitos seguidos y sin espacios: <code>\"\\d{9}\"</code></p><p>El examinador probablemente quiera que te esfuerces algo más. Te puede decir que esa expresión no sirve para localizar teléfonos como el <code>+34 666 010101</code> y quiere saber cómo se podría hacer. La cosa se complica bastante, aunque no es imposible. En este momento NUNCA digas que haría falta leerse bien la documentación y que tendrías que investigar un poco, suena muy mal. Lo de <em>investigar</em> da la idea que vas a buscar una solución por internet, que acabarás en un blog como éste y que vas a copiarte la solución sin siquiera leer cómo funciona.</p><p>Más vale que busques otra alternativa, aunque sea sin usar expresiones regulares. Lo que realmente interesa al entrevistador es que tengas ideas propias y originales que se puedan aplicar para resolver el problema que se te plantea.</p><p>A continuación pongo una posible solución, aunque te aconsejo que la estudies antes de aplicarla literalmente a tu código:</p><pre><code>    \"((\\+34 )?\\d{3} ?\\d{6})\"
</code></pre><h2>Una conversión de lista de tuplas a diccionario</h2><p>Este es uno de esos casos que cuesta más explicar el problema que su solución. Se pretende ver si el candidato comprende realmente los conceptos que se tratan, si sabe lo que es una tupla y un diccionario, y si tiene claro el concepto de <em>&#8220;mapping&#8221;</em> por el cuál se contruye el diccionario.</p><p>La solución empieza por poner en dependencia el segundo elemento del primero:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span>lista<span style=\"color: black;\">&#41;</span></div></div><p>En scala es muy parecido:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">&#41;</span>,<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">2</span><span style=\"color: #F78811;\">&#41;</span>,<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#41;</span><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista.<span style=\"color: #000000;\">toMap</span></div></div><p>Por complicarlo algo más, se puede pedir que se repita el ejercicio, pero con tuplas de más de dos elementos, con el primero como clave del <em>mapping</em>:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista<span style=\"color: black;\">&#41;</span></div></div><p>En scala es algo más complicado. Lo que en python se entiende por tupla (una secuencia inmutable), en scala son en realidad las listas. Las listas mutables, como se entienden en python, son instancias de la clase <code>MutableList</code>. Las tuplas de scala se usan para paso de parámetros y poco más:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">&#41;</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#41;</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">&#123;</span>x <span style=\"color: #000080;\">=&gt;</span> x.<span style=\"color: #000000;\">head</span>-<span style=\"color: #000080;\">&gt;</span>x.<span style=\"color: #000000;\">tail</span><span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>Aquí se ve el uso de los atributos <code>head</code> y <code>tail</code> para manejar listas que son tan característicos de los lenguajes funcionales.</p><p>Las últimas versiones de Scala incorporan la &#8220;comparación de patrones&#8221; (<em>&#8220;pattern matching&#8221;</em>) que consiguen hacer algo más legible el código:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">&#123;</span><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>No parece que haya variado mucho. La potencia de los patrones está en poder realizar distintas operaciones según el tipo de los parámetros. En otros lenguajes se necesitaría incorporar expresiones condicionales o sobrecarga de operadores.</p><p>Por ejemplo, imagina que la lista tuviera elementos extra como cadenas y números:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">&#41;</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span>,<span style=\"color: #F78811;\">4</span>,<span style=\"color: #F78811;\">5</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">&#41;</span>, <span style=\"color: #6666FF;\">&quot;Hola&quot;</span>, <span style=\"color: #F78811;\">1.5</span><span style=\"color: #F78811;\">&#41;</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista collect <span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> s<span style=\"color: #000080;\">:</span>String <span style=\"color: #000080;\">=&gt;</span> s-<span style=\"color: #000080;\">&gt;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#41;</span><br />
&nbsp; &nbsp;<span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>Vemos el resultado:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">//for((k,v)&lt;-dic) println(k,v)<br />
(Hola,List())<br />
(1,List())<br />
(a,List(1, 2, 3))<br />
(b,List(10, 20, 30))<br />
(c,List(100, 200, 300))</div></div><p>En el primer patrón, <code>h::t</code> (llamado de <em>extracción de lista</em>), sólo encajarán los items que son listas; en el segundo patrón <code>s:String</code> sólo encaja la <code>String \"Hola\"</code>; mientras que el último elemento de la lista, el <code>double 1.5</code>, no coincide con ningún patrón y será filtrado por el método <code>collect</code>.</p><p>Si intentamos hacer lo mismo con python nos saldría un código bastante menos legible:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;Hola&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1.5</span><span style=\"color: black;\">&#93;</span><br /><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">tuple</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">else</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista <span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">tuple</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">basestring</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span></div></div><h2>Conclusión</h2><p>Con estos ejemplos tan sólo he querido darte una idea de qué cosas podemos encontrarnos en una prueba de selección. En programación, debería interesar más la capacidad resolutiva del <em>candidato</em> que su nivel de conocimientos. Una solución innovadora o que aporte otro punto de vista no contemplado en un principio suele ser de más valor que dar la solución correcta. Busca distintos ejemplos de resolver los mismos problemas, incluso en lenguajes de programación diferentes, y estarás preparado para todo reto que se te presente.</p><hr /><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Si te preguntas porqué <em>scala</em>, la respuesta simple sería 
<em>porque es el lenguaje que estoy aprendiendo ahora mismo</em>. Pero si realmente te preguntas qué puede aprender un programador python de un lenguaje como scala, no te pierdas el próximo artículo.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li><li id=\"fn:2\"><p>Busca en la lista <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a>&#160;<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/feed/") (slash:comments nil "0")) (item nil (title nil "Entornos virtuales en python 3.3") (link nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/") (comments nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/#comments") (pubDate nil "Tue, 23 Oct 2012 19:58:28 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=452") (description nil "Con la nueva versión de python 3.3 se ha incorporado la propuesta PEP-405 que añade al repertorio interno de python la posibilidad de crear entornos virtuales de modo parecido a virtualenv (vimos esta herramienta hace poco al hablar de la instalación de módulos. Tal como lo define PEP-405: &#8220;Los entornos virtuales poseen su propio conjunto [...]") (content:encoded nil "<p>Con la <a href=\"http://docs.python.org/3.3/whatsnew/3.3.html\" title=\"What's new in python 3.3?\">nueva versión de python 3.3</a> se ha incorporado la propuesta <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a> que añade al repertorio interno de python la posibilidad de crear entornos virtuales de modo parecido a virtualenv (vimos esta herramienta hace poco al hablar de la <a href=\"http://ch3m4.org/blog/2012/07/24/instalacion-de-modulos/\">instalación de módulos</a>.</p><p>Tal como lo define <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a>: <em>&#8220;Los <em>entornos virtuales</em> poseen su propio conjunto de paquetes instalados localmente, segregados del resto de paquetes instalados del sistema&#8221;</em>. Para crear y administrar estos entornos virtuales, se incluye el módulo <code>venv</code>, así como el script <code>pyvenv.py</code>.</p><p>Para crear un entorno virtual se puede utilizar el script <code>pyvenv</code> (con python 3.3):</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>pyvenv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>En windows, probablemente haya que ejecutar el script que se encuentra en <code>\"C:\\&gt; Python33\\Tools\\Scripts\\pyvenv.py\"</code>. Posiblemente sea más sencillo ejecutar directamente el módulo <code>venv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>python <span style=\"color: #660033;\">-m</span> venv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>Entrando dentro del nuevo directorio, activamos el entorno de modo similar a como hacíamos con <code>virtualenv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">$ <span style=\"color: #7a0874; font-weight: bold;\">cd</span><span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual<br />
$ <span style=\"color: #7a0874; font-weight: bold;\">source</span> bin<span style=\"color: #000000; font-weight: bold;\">/</span>activate</div></div><p>Hay que notar que el script <code>activate</code> se debe ejecutar con <code>source</code> ya que necesita cambiar algunas variables del entorno de ejecución actual.</p><p>En windows, se debe ejecutar el script <code>Scripts\\activate.bat</code>.</p><div class=\"codecolorer-container powershell dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"powershell codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">C:\\<span style=\"color: pink;\">&gt;</span><span style=\"color: #008080; font-weight: bold;\">cd</span> entorno_virtual<br />
C:\\<span style=\"color: pink;\">&gt;</span> Scripts\\activate.bat</div></div><p>Una vez activado el entorno veremos que el prompt de la línea de comandos ha cambiado para indicarnos que estamos dentro. Las variables de entorno han cambiado, como puedes comprobar si miras <code>$PATH</code>. A partir de aquí, la instalación de paquetes con <code>easy_install</code> o <code>pip</code> se realizarán dentro del entorno. A diferencia con <code>virtualenv</code>, el módulo <code>venv</code> no instala en nuestro entorno ninguna de estas herramientas, por lo que lo primero que tendremos que hacer será instalarlas:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ curl <span style=\"color: #660033;\">-O</span> http:<span style=\"color: #000000; font-weight: bold;\">//</span>python-distribute.org<span style=\"color: #000000; font-weight: bold;\">/</span>distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ python distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ easy_install pip</div></div><p>Para desactivar el entorno se ejecuta <code>deactivate</code>.</p><p>Aunque <code>venv</code> sigue el mismo funcionamiento que <code>virtualenv</code>, tiene notables carencias:</p><ul><li><p>No permite configurar versiones distintas de python</p></li><li><p>No replica la instalación python del sistema en la copia local</p></li><li><p>No permite independizar el entorno virtual del la ruta donde se crea (<em>no relocatable</em>)</p></li></ul><p>En definitiva, los entornos virtuales creados con <code>venv</code> no son completamente independientes de la instalación python del sistema como sí puede hacer <code>virtualenv</code>. Esperemos que se amplien las opciones con nuevas versiones de python. De momento, seguiremos con <code>virtualenv</code>.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/feed/") (slash:comments nil "4")) (item nil (title nil "Cómo contratar un programador de python") (link nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/") (comments nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/#comments") (pubDate nil "Wed, 17 Oct 2012 16:30:18 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=446") (description nil "En época de crisis se produce un curioso desequilibrio de las cosas. Por un lado, están los emprendedores que se arriesgan mucho más buscando productos innovadores con los que poder competir mejor, alejados de las tendencias impuestas por las grandes empresas del sector. Son las startups, surgidas como respuestas del estancamiento de la economía actual. [...]") (content:encoded nil "<p>En época de <em>crisis</em> se produce un curioso desequilibrio de las cosas. Por un lado, están los emprendedores que se arriesgan mucho más buscando productos innovadores con los que poder competir mejor, alejados de las tendencias impuestas por las grandes empresas del sector. Son las <em>startups</em>, surgidas como respuestas del estancamiento de la economía actual. Por contra, la crisis también nos obliga a deshacernos de todo aquello que se salga de la norma, siguiendo el dictado de recortes indiscriminados, persiguiendo no se sabe bién qué fines. Al final se consigue mermar la creatividad, a costa de imponer la mediocridad en todo lo que se hace.</p><p>Centrándonos en la programación python, es paradójico que en estos momentos la carencia de programadores python esté siendo una de las razones que impida crecer a algunas pequeñas empresas. Empresas que podrían ambicionar a tener un equipo de desarrollo acorde a la demanda que están teniendo, terminan por orientar su negocio a las adaptaciones para uno o dos clientes importantes, abandonando la mejora del producto en manos de la comunidad de software libre que lo crea interesante.</p><p>Antes de seguir, habría que precisar a qué nos referimos cuando hablamos de <em>programadores python</em>. No basta con saber la sintáxis del lenguaje, del mismo modo que no es suficiente saber coser para ser cirujano. Se está buscando un perfil concreto de programador, capaz de dar soluciones creativas e ingeniosas, y que sea capaz de expresarlas como código python al resto del equipo de desarrolladores.</p><p>Si te estás preguntándo si tú encajarías en este perfil, o bien si te preguntas cómo se haría una de estas selecciones de <em>programadores python</em>, en este artículo pretendo dar una idea de las preguntas de un proceso de selección de este tipo, más pensado como <em>&#8220;filtrado&#8221;</em> de todo perfil no deseado que en ser una exhaustiva evaluación de conocimientos. En un próximo artículo pondré algunas soluciones a estas preguntas para que así tengas tiempo para reflexionar.</p><h2>1. Filtrado del simple &#8220;Hello, World!&#8221;</h2><p>Antes de perder más tiempo, lo primero es preguntar al candidato si realmente sabe de python. No son pocos los que acuden con la idea de que da igual que sea python que cualquiera de los otros lenguajes &#8220;populares&#8221; como <em>java</em> o <em>visual basic</em>. Por mucho que se insista en que tiene que ser un programador experimentado en python, muchas veces te encuentras que ni es python lo que sabe, ni tampoco es experimentado.</p><p>La prueba del &#8220;Hello, World!&#8221; en python debería ser la primera prueba para descartar a los oportunistas. Otra de las preguntas más elementales sería hablar del <em>&#8220;Zen de python&#8221;</em>, si no recitarlo entero, al menos una explicación de la regla <em>&#8220;Explicit is better than implicit&#8221;</em>.</p><h2>2. Preguntar por muestras de sus trabajos</h2><p>Todo programador que aprecie debe tener una colección de cosas en las que haya trabajado. No tienen que ser cosas asombrosas. Pueden ser simplemente aquellas muestras de saber dejadas por internet como ayuda a los demás, tal vez un perfil de <em>Stack Overflow</em> o de <em>Python Majibu</em> donde se pueda ver qué clase de comunicador y resolvedor de problemas eres. Tal vez algún repositorio de código abierto donde participes, un blog profesional, twitter,&#8230;</p><p>Simplemente, viendo la clase de trabajos que hace la gente resulta de mucha ayuda para saber en qué destaca o no un programador.</p><h2>3. Afín a la cultura de la empresa</h2><p>La experiencia dice que ser afín a la cultura de la empresa asegura mejores éxitos que el ser un monstruo programando. Un ejemplo común son las empresas de software libre cuando tienden a adoptar ciertas prácticas éticas entre sus empleados como es la de compartir todo el conocimiento.</p><p>Tratándose de python, un programador en este lenguaje tiende a adoptar un perfil muy característico. Busca como fin la sencillez y la elegancia del código, antes que la optimización y eficiencia del mismo. Intenta ser <em>&#8220;agnóstico&#8221;</em> frente a la plataforma, que el código funcione en (casi) cualquier sitio. Sin embargo, es ávido de conocer nuevas librerías que poder emplear en sus desarrollos, siempre con python como lenguaje director de la lógica de la aplicación.</p><p>Toda esta actividad se ve plasmada en las &#8220;comunidades&#8221; python, donde se proponen y discuten sobre estos temas. Destaca la comunidad de &#8220;python hispano&#8221; como un primer lugar donde buscar perfiles apropiados, pero también se puede acudir a otros foros locales como las comunidades de python en Argentina, Perú, México,&#8230; o a foros más especializados de django o zope.</p><p>Pero una empresa que se precie, que tenga un buen producto de código abierto que ofrecer, debería ser capaz de formar su propia comunidad como punto de encuentro de los afines al proyecto, que no son sólo programadores. Esta comunidad sirve tanto para difundir la filosofía de la empresa como ser el punto de encuentro del personal afín a ella. Lamentablemente, muchas empresas han creído que una comunidad se monta mediante el bombardeo publicitario y es así como han concebido sus cuentas en las redes sociales como facebook o twitter. De este modo han conseguido consumidores <em>fanáticos</em>, pero muy pocos colaboradores.</p><p>A un programador hay que darle código. Las comunidades de programadores se forman alrededor de servicios como los github, bitbucket, sourceforge, launchpad, trac, etc. Si encuentras en tu comunidad un programador que te ha hecho un gran aporte o un hacker que ha dado con una extraña y oculta vulnerabilidad, contrátalo sin más dubitaciones.</p><h2>4. Prueba de programación</h2><p>Lo siguiente es pedir la realización de algunos programas sencillos: un detector de palíndromos, crear una expresión regular para encontrar teléfonos en un texto, una conversión de una lista de tuplas a diccionario,&#8230;</p><p>Con la prueba de programación no se busca, necesariamente, una respuesta perfecta, si no el crear un contexto donde observar al programador en su compresión de los problemas, así cómo su intento de resolverlos. Dentro de las posibilidades, es una prueba que muy bien se podría hacer online, combinando videconferencia y pizarra virtual. Si saltaran demasiadas alarmas, al ser <em>online</em> se podría dar por terminada la prueba en cualquier momento y así ahorrar tiempo tanto al candidato como al seleccionador.</p><h2>5. Prueba real</h2><p>Antes de dar el paso definitivo, se puede probar al candidato sobre un caso real como resolver algún ticket del gestor de bugs o crear una extensión sencilla en un plazo determinado. Por supuesto, no debe ser ninguna parte importante, tan sólo un medio de comprobar si el candidato es capaz de cumplir los plazos establecidos para así no desequilibrar al resto del equipo.</p><p>Idealmente, sería bueno que esta labor se realizara en las mismas instalaciones de la empresa, con los recursos de la empresa y con un contrato en prácticas.</p><h2>6. Entrevista personal</h2><p>Habiendo pasando todos los puntos anteriores, es casi seguro que el candidato es apto para la empresa. La entrevista está orientada más en conocer el perfil comunicativo del candidato con vistas a su integración de un equipo de trabajo. La entrevista empieza por una presentación del candidato sobre su experiencia hasta el momento. A continuación, se le realizan una serie de preguntas encaminadas a conocer del candidato su apasionamiento por lo que hace, su capacidad para comunicarse en grupos pequeños y qué podría aportar dentro de un pequeño equipo de trabajo.</p><h2>7. Prueba de inglés</h2><p>Se quiera o no, el inglés es el idioma común del programador, y no sólo porque toda la documentación esté en inglés. Cualquier proyecto de envergadura debe usar el inglés si quiere llamar la atención y conseguir nuevos colaboradores, ya sea en internet como en presentaciones en congresos. También empieza a ser frecuente la creación de equipos multinacionales de desarrollo. El inglés es la <em>lingua franca</em> de nuestros tiempos y comunicarse en inglés es fundamental para ser programador. Al ser una prueba de comunicación, la prueba de inglés podría formar parte de la entrevista personal.</p><h2>8. Conclusión</h2><p>Si has leído hasta aquí, espero no haberte aburrido y/o decepcionado mucho. No espero que todo lo dicho sea tomado al pie de letra. Más que una lista de reglas para buscar candidatos, he pretendido que sirva más como consejos para programadores python que buscan trabajo, sepan cómo hacerlo y, sobre todo, que se animen a buscarlos. Si de paso se amplía el número de programadores profesionales de python, mejor todavía. Ganaremos todos.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/feed/") (slash:comments nil "4")))) ("Scala vs. Python vs. Lua" "<p>Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera dar una idea de porqué los recomiendo, a los tres, sin decantarme por sólo uno de ellos. Si buscabas razones para quedarte con uno de ellos, tampoco deberías desestimar otros similares como Ruby, Groovy, Haskel, Clojure o Erlang. De todos hay cosas qué aprender.</p><h2>Python</h2><p>Quizás Python sea el lenguaje más asequible para un programador que empieza o que busca un segundo lenguaje. Su aprendizaje es sencillo, mientras que su potencia y ubicuidad lo hace ideal desde los pequeños scripts que podamos necesitar en nuestro día a día, hasta escalar a servidores empresariales de tipo medio.</p><p>Puede que a muchos disguste python por su identación forzada o por su particular modelo de datos, por citar dos de las características más criticadas. Sin embargo, confía en mí si te digo que python es uno de los mayores compendios de sabiduría que puedes tener al alcance de tus manos. Cualquier cosa que creas extraña o fuera de lugar, seguramente tenga su buena explicación. El sistema colaborativo que hace evolucionar a python (conocido como PEP-<em>Python Enhancement Proposals</em>) consigue que todo el saber de la comunidad python termine decantándose hace un modelo de evolución del lenguaje que lo hace único, con el que mejora calmadamente con cada versión. Operaciones con números grandes, algoritmo MRO para herencia múltiple, estructuras de datos optimizadas (heapq, deque,…), ordenaciones por clave, operaciones sobre secuencias (sum, any, all,…)… son sólo algunos ejemplos de optimizaciones que el usuario usa sin ser realmente consciente de la cantidad de trabajo que le está ahorrando. En python casi siempre hay una forma de hacer las cosas correctamente, y además suele ser la mejor.</p><h2>Lua</h2><p>Desde mi punto de vista, considero Lua como un <em>python minimalista</em>. Sin objetos, sin posibilidad de construir tus propios tipos de datos, pero se apaña con un sólo tipo de estrutura <code>table</code> para montar un sistema de herencia y emular algunos tipos de datos. Si lenguajes como python te parece complicados, no comprendes conceptos como la herencia, la creación de tipos o para qué sirven las metaclases, la simplicidad de lua hará que entiendas mejor estos conceptos.</p><p>El reducido tamaño del intérprete de Lua lo hace apropiado para ser empotrado en otras aplicaciones. Lo tenemos en gestores de paquetes (RPM), bases de datos (mysql-lua), e IDEs (Scite), aunque quizás sea más famoso por ser el motor de script de juegos como <em>World of Warcraft</em>.</p><p>En cuanto a sintáxis, también goza de un minimalismo que, a veces, desearías tuviera python. Posee cierta relajación en la llamada a funciones que permite usarlo para crear DSLs (<em>Lenguajes Específicos del Dominio</em>), aunque quizás su mejor uso sea como lenguaje de descripción de datos en sustitución de xml, yaml o ficheros ini.</p><h2>Scala</h2><p>Reconozco que soy un ferviente partidario de la <em>Programación Funcional</em>. Python tiene algún aspecto de este paradigma, pero cada vez parece más diluido dentro del sistema de Clases Abstractas (<code>ABC</code>-Abstract Base Classes) que empiezan a generalizarse en python. La estrategia de python es optimizar el uso de estas clases abstractas, independientemente de las clases que deriven luego de ellas. Aunque es un buen enfoque de optimización, siempre estará limitado a tiempo de ejecución.</p><p>Scala posee un potente sistema de tipado estático de datos que posibilita la inferencia del tipo de una operación, lo que permite cierta relajación en el tipado que lo hace muy similar al tipado dinámico. Pero la posibilidad de crear nuevos tipos, ya no sólo de objetos, si no también a partir de funciones o de <em>patrones de código</em>, consigue interfaces más robustos y que sea el compilador quien optimize el código, antes de su ejecución.</p><p>Así que tenemos que scala es funcional, con un potente sistema de tipos y, además, 100% compatible con Java. ¿Se puede pedir algo más?</p><p>Pues sí. Incorpora el llamado modelo <em>Actor</em> para programación concurrente. Con los actores, en lugar de compartir un espacio común de memoria entre los distintos procesos concurrentes, se establece un sistema de mensajes que son enviados y recibidos. Este modelo se ha mostrado bastante eficaz en sistemas de alta demanda como son algunas webs como twitter o linkedin.</p><p>En cuanto a la sintáxis, scala también posee algunas normas relajadas para la creación de DSLs muy similar a lo que se ve en Groovy. Algunos lenguajes DSL se usan en <em>frameworks</em> de creación webs, como Play2, o para crear conjuntos de pruebas (ScalaUnit).</p><h2>Conclusión</h2><p>Espero que te haya convencido para que eches un vistazo a algunos de estos lenguajes, aunque los tres sean altamente recomendables. Si tuviera que resumir en pocas líneas lo dicho hasta ahora, sería así:</p><ul><li><p>Python: navaja suiza de los lenguajes. Sirve para todo y está presente en cualquier sitio. Es un compendio de sabiduría para hacer las cosas de la mejor forma, aún sin proponértelo.</p></li><li><p>Lua: lenguaje minimalista. Ayuda a comprender mejor algunos conceptos de programación. Es el lenguaje que me gustaría que tuviera todo navegador en lugar de javascript.</p></li><li><p>Scala: funcional y con potente sistema de tipos. Su implementación del modelo actor lo hace idóneo para la creación de sistemas de alta demanda de accesos.</p></li></ul>" "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/" (20836 29259) new 1 nil nil ((title nil "Scala vs. Python vs. Lua") (link nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/") (comments nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/#comments") (pubDate nil "Tue, 09 Apr 2013 19:55:55 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (category nil "Python") (category nil "Scala") (category nil "lua") (category nil "programming-languages") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=549") (description nil "Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera [...]") (content:encoded nil "<p>Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera dar una idea de porqué los recomiendo, a los tres, sin decantarme por sólo uno de ellos. Si buscabas razones para quedarte con uno de ellos, tampoco deberías desestimar otros similares como Ruby, Groovy, Haskel, Clojure o Erlang. De todos hay cosas qué aprender.</p><h2>Python</h2><p>Quizás Python sea el lenguaje más asequible para un programador que empieza o que busca un segundo lenguaje. Su aprendizaje es sencillo, mientras que su potencia y ubicuidad lo hace ideal desde los pequeños scripts que podamos necesitar en nuestro día a día, hasta escalar a servidores empresariales de tipo medio.</p><p>Puede que a muchos disguste python por su identación forzada o por su particular modelo de datos, por citar dos de las características más criticadas. Sin embargo, confía en mí si te digo que python es uno de los mayores compendios de sabiduría que puedes tener al alcance de tus manos. Cualquier cosa que creas extraña o fuera de lugar, seguramente tenga su buena explicación. El sistema colaborativo que hace evolucionar a python (conocido como PEP-<em>Python Enhancement Proposals</em>) consigue que todo el saber de la comunidad python termine decantándose hace un modelo de evolución del lenguaje que lo hace único, con el que mejora calmadamente con cada versión. Operaciones con números grandes, algoritmo MRO para herencia múltiple, estructuras de datos optimizadas (heapq, deque,&#8230;), ordenaciones por clave, operaciones sobre secuencias (sum, any, all,&#8230;)&#8230; son sólo algunos ejemplos de optimizaciones que el usuario usa sin ser realmente consciente de la cantidad de trabajo que le está ahorrando. En python casi siempre hay una forma de hacer las cosas correctamente, y además suele ser la mejor.</p><h2>Lua</h2><p>Desde mi punto de vista, considero Lua como un <em>python minimalista</em>. Sin objetos, sin posibilidad de construir tus propios tipos de datos, pero se apaña con un sólo tipo de estrutura <code>table</code> para montar un sistema de herencia y emular algunos tipos de datos. Si lenguajes como python te parece complicados, no comprendes conceptos como la herencia, la creación de tipos o para qué sirven las metaclases, la simplicidad de lua hará que entiendas mejor estos conceptos.</p><p>El reducido tamaño del intérprete de Lua lo hace apropiado para ser empotrado en otras aplicaciones. Lo tenemos en gestores de paquetes (RPM), bases de datos (mysql-lua), e IDEs (Scite), aunque quizás sea más famoso por ser el motor de script de juegos como <em>World of Warcraft</em>.</p><p>En cuanto a sintáxis, también goza de un minimalismo que, a veces, desearías tuviera python. Posee cierta relajación en la llamada a funciones que permite usarlo para crear DSLs (<em>Lenguajes Específicos del Dominio</em>), aunque quizás su mejor uso sea como lenguaje de descripción de datos en sustitución de xml, yaml o ficheros ini.</p><h2>Scala</h2><p>Reconozco que soy un ferviente partidario de la <em>Programación Funcional</em>. Python tiene algún aspecto de este paradigma, pero cada vez parece más diluido dentro del sistema de Clases Abstractas (<code>ABC</code>-Abstract Base Classes) que empiezan a generalizarse en python. La estrategia de python es optimizar el uso de estas clases abstractas, independientemente de las clases que deriven luego de ellas. Aunque es un buen enfoque de optimización, siempre estará limitado a tiempo de ejecución.</p><p>Scala posee un potente sistema de tipado estático de datos que posibilita la inferencia del tipo de una operación, lo que permite cierta relajación en el tipado que lo hace muy similar al tipado dinámico. Pero la posibilidad de crear nuevos tipos, ya no sólo de objetos, si no también a partir de funciones o de <em>patrones de código</em>, consigue interfaces más robustos y que sea el compilador quien optimize el código, antes de su ejecución.</p><p>Así que tenemos que scala es funcional, con un potente sistema de tipos y, además, 100% compatible con Java. ¿Se puede pedir algo más?</p><p>Pues sí. Incorpora el llamado modelo <em>Actor</em> para programación concurrente. Con los actores, en lugar de compartir un espacio común de memoria entre los distintos procesos concurrentes, se establece un sistema de mensajes que son enviados y recibidos. Este modelo se ha mostrado bastante eficaz en sistemas de alta demanda como son algunas webs como twitter o linkedin.</p><p>En cuanto a la sintáxis, scala también posee algunas normas relajadas para la creación de DSLs muy similar a lo que se ve en Groovy. Algunos lenguajes DSL se usan en <em>frameworks</em> de creación webs, como Play2, o para crear conjuntos de pruebas (ScalaUnit).</p><h2>Conclusión</h2><p>Espero que te haya convencido para que eches un vistazo a algunos de estos lenguajes, aunque los tres sean altamente recomendables. Si tuviera que resumir en pocas líneas lo dicho hasta ahora, sería así:</p><ul><li><p>Python: navaja suiza de los lenguajes. Sirve para todo y está presente en cualquier sitio. Es un compendio de sabiduría para hacer las cosas de la mejor forma, aún sin proponértelo.</p></li><li><p>Lua: lenguaje minimalista. Ayuda a comprender mejor algunos conceptos de programación. Es el lenguaje que me gustaría que tuviera todo navegador en lugar de javascript.</p></li><li><p>Scala: funcional y con potente sistema de tipos. Su implementación del modelo actor lo hace idóneo para la creación de sistemas de alta demanda de accesos.</p></li></ul>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/04/09/scala-vs-python-vs-lua/feed/") (slash:comments nil "4"))) ("De Generaciones Perdidas" "<p>Allá por los 80, en Zaragoza, cuando internet era tan sólo la <code>i</code> del protocolo TCP/IP y los meros mortales se apañaban con sus modems para acceder a alguna BBS local, y donde la única autopista de la información consistía en una cinta semanal de 200 MB. que llegaba desde el CERN de Ginebra, existía un grupo de <em>hackers</em>, en el buen sentido de la palabra<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>, que abarrotaban las pocas salas de informática que tenía la Universidad de Zaragoza. No existían enseñanza de informática y los conocimientos erán compartidos entre todos sin reservas.</p><p>Fue una época convulsa, presagio de los cambios que iban a venir y que lo cambiarían todo. Luchas por el espacio cybernético, espionaje y contraespionaje, virus y antivirus,…un mundo cruel que quedó atrás y que originó una “generación perdida”, una de tantas, pero de un nivel tecnológico sin paragón que hizo puntera a Zaragoza y de la que muy pocos tienen siquiera una mínima noción de su existencia.</p><p>A veces me he preguntado si valdría la pena dar a conocer a esta generación y todo lo que hicieron. Pero sus integrantes, una vez rehechas sus vidas ajenas a la universidad, incluso dejando sus estudios en la cuneta, callan y no parece que deseen que se hable del tema. No esperes que yo lo haga aquí, pero si quieres una pequeña muestra de lo que pasó existe una serie de historias contadas en el libro <em>“Sueños Electrónicos. Emprendedores en la Red”</em> de José Carlos Arnal (<a href=\"http://www.casadellibro.com/libro-suenos-electronicos-emprendedores-en-la-red/9788483241172/817995\">ISBN: 9788483241172</a>) que puede darte una buena idea, aunque incompleta. Como se suele decir, <em>“existen dos tipos de hackers: los buenos y los famosos”</em>. Si a álguien le interesa el tema, que lea este libro, porque de los buenos hackers nunca se hablará.</p><p>En este país nunca aprenderemos. Ya sea por guerras, conflictos políticos o por la avarienta corrupción, seguimos quemando generaciones en la gran pira de calamidades inevitables en la que se ha convertido la historia de España. Sirva este artículo como callado homenaje a esta <em>De-Generación Perdida</em> junto con el que <a href=\"http://qlio.blogspot.com.es/2012/01/jakers-finales-de-los-80s-en-zaragoza.html\">escribió Gaudi en su bitácora</a> hace ya un año.
&nbsp;</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Extraer conocimientos a través de la tecnología. <a href=\"#fnref:1\" rev=\"footnote\">↩</a></p></li></ol></div>" "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/" (20824 17663) new 2 nil nil ((title nil "De Generaciones Perdidas") (link nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/") (comments nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/#comments") (pubDate nil "Sun, 31 Mar 2013 14:15:27 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=539") (description nil "Allá por los 80, en Zaragoza, cuando internet era tan sólo la i del protocolo TCP/IP y los meros mortales se apañaban con sus modems para acceder a alguna BBS local, y donde la única autopista de la información consistía en una cinta semanal de 200 MB. que llegaba desde el CERN de Ginebra, existía [...]") (content:encoded nil "<p>Allá por los 80, en Zaragoza, cuando internet era tan sólo la <code>i</code> del protocolo TCP/IP y los meros mortales se apañaban con sus modems para acceder a alguna BBS local, y donde la única autopista de la información consistía en una cinta semanal de 200 MB. que llegaba desde el CERN de Ginebra, existía un grupo de <em>hackers</em>, en el buen sentido de la palabra<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>, que abarrotaban las pocas salas de informática que tenía la Universidad de Zaragoza. No existían enseñanza de informática y los conocimientos erán compartidos entre todos sin reservas.</p><p>Fue una época convulsa, presagio de los cambios que iban a venir y que lo cambiarían todo. Luchas por el espacio cybernético, espionaje y contraespionaje, virus y antivirus,&#8230;un mundo cruel que quedó atrás y que originó una &#8220;generación perdida&#8221;, una de tantas, pero de un nivel tecnológico sin paragón que hizo puntera a Zaragoza y de la que muy pocos tienen siquiera una mínima noción de su existencia.</p><p>A veces me he preguntado si valdría la pena dar a conocer a esta generación y todo lo que hicieron. Pero sus integrantes, una vez rehechas sus vidas ajenas a la universidad, incluso dejando sus estudios en la cuneta, callan y no parece que deseen que se hable del tema. No esperes que yo lo haga aquí, pero si quieres una pequeña muestra de lo que pasó existe una serie de historias contadas en el libro <em>&#8220;Sueños Electrónicos. Emprendedores en la Red&#8221;</em> de José Carlos Arnal (<a href=\"http://www.casadellibro.com/libro-suenos-electronicos-emprendedores-en-la-red/9788483241172/817995\">ISBN: 9788483241172</a>) que puede darte una buena idea, aunque incompleta. Como se suele decir, <em>&#8220;existen dos tipos de hackers: los buenos y los famosos&#8221;</em>. Si a álguien le interesa el tema, que lea este libro, porque de los buenos hackers nunca se hablará.</p><p>En este país nunca aprenderemos. Ya sea por guerras, conflictos políticos o por la avarienta corrupción, seguimos quemando generaciones en la gran pira de calamidades inevitables en la que se ha convertido la historia de España. Sirva este artículo como callado homenaje a esta <em>De-Generación Perdida</em> junto con el que <a href=\"http://qlio.blogspot.com.es/2012/01/jakers-finales-de-los-80s-en-zaragoza.html\">escribió Gaudi en su bitácora</a> hace ya un año.
&nbsp;</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Extraer conocimientos a través de la tecnología.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/31/de-generaciones-perdidas/feed/") (slash:comments nil "0"))) ("Mutable o inmutable, he ahí el dilema" "<p><strong>NOTA</strong>: Disponible también como <a href=\"http://nbviewer.ipython.org/5224623\">ipynb</a></p><p>Quien se enfrenta a la documentación de python por primera vez se pregunta porqué esa insistencia en mantener tipos de datos duplicados en versiones mutables e inmutables. Tenemos listas y tuplas que casi hacen lo mismo. En python3, tenemos el tipo inmutable <code>bytes</code> y el mutable <code>bytearray</code>. ¿Qué sentido tiene tener <em>“duplicados”</em> algunos tipos en sus dos versiones? La única explicación que se puede encontrar en la documentación es que los tipos inmutables son más apropiados para usarlos como índices en diccionarios. No parece mucha ventaja para la complejidad que aporta.</p><p>En este artículo veremos qué implica la <em>mutabilidad</em> de un tipo de dato y en qué puede sernos útil usar un tipo mutable u otro inmutable.</p><h2>¿Qué es lo que cambia?</h2><p>Antes de explicar nada, veamos si somos capaces de saber qué está cambiando. Veamos dos códigos muy similares:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>a<span style=\"color: black;\">)</span><br /><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">)</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span> a <span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">]</span></div></div><p>Parece que ambos códigos hagan lo mismo: añadir un fragmento, en sus versiones tupla y lista, respectivamente. Vamos a analizarlo mejor. Para saber qué pasa, usemos la función <code>id()</code>. Esta función devuelve un identificador de un objeto de tal modo que si dos objetos tienen el mismo identificador, entonces son el mismo objeto.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">(</span>a<span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><span style=\"color: #ff4500;\">192021604</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">(</span>a<span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><span style=\"color: #ff4500;\">189519828</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">(</span>a<span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><span style=\"color: #ff4500;\">189780876</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">(</span>a<span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><span style=\"color: #ff4500;\">189780876</span></div></div><p>En la versión tupla, se ha creado una nueva tupla para realizar la operación, mientras que en la versión lista se ha usado la misma lista, modificándose con el resultado. Si cambiamos el operador <code>+=</code> por una versión más explícita tal vez se vea mejor:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span>a+<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">)</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a.<span style=\"color: black;\">extend</span><span style=\"color: black;\">(</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">]</span><span style=\"color: black;\">)</span></div></div><p>Al operar con tuplas, los operandos no cambian de valor, creándose una nueva tupla como resultado de la operación. Podríamos sustituir toda la operación por el resultado final y el código funcionaría igual. En el caso de las listas, la lista se modifica <em>“in situ”</em> durante la operación. En estos casos, cambiar la expresión por el resultado final no garantiza que el programa funcione igual. Se necesita pasar por todos y cada uno de los estados intermedios para asegurar que todo funcione igual.</p><p>Esta propiedad de poder cambiar una expresión por su resultado final es conocida por <a href=\"http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)\" title=\"Referential Transparency\">Transparencia referencial</a> en programación funcional. Por lo general, los tipos inmutables se adecúan mejor a operaciones de cálculo donde el resultado final depende únicamente de los argumentos de entrada. Por otro lado, los tipos mutables son útiles para salvaguardar estados intermedios necesarios para la toma de decisiones durante la ejecución de un programa.</p><p>Por lo general, se saber elegir un tipo mutable o su homólogo inmutable es todo un arte. Ante la duda, los tipos inmutables son más fáciles de rastrear. Así mismo, veremos en próximos artículos que los tipos inmutables ayudan bastante en programación concurrente, por si estás pensando en programación multiproceso.</p><h2>Ejemplos de tipos propios</h2><p>La mutabilidad e inmutabilidad va más allá de los tipos estándar de python. Nosotros mismos podemos hacer nuestras propias clases mutables o inmutables, según nuestras necesidades.</p><p>Pongamos que creamos una clase <code>Point</code> para definir puntos, junto con unas sencillas operaciones para sumar, restar y desplazar. Nuestra idea es poder usar estos objetos en expresiones, por lo que es práctica común que toda operación devuelva el resultado como un punto para seguir encadenando operaciones.</p><p>Una versión <em>“mutable”</em> del objeto sería así:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointMutable<span style=\"color: black;\">(</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">)</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>dx<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>dy<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span></div></div><p>En todas las operaciones, operamos el objeto consigo mismo y lo retornamos como resultados. Si probamos, vemos que no funciona tal como se esperaba:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">(</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span> - <span style=\"color: black;\">(</span>p1+p2<span style=\"color: black;\">)</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Devuelve <code>&lt;Point&lt;0,0&gt;</code> independientemente de los valores iniciales y de los desplazamientos que demos. Al ser nuestro objeto mutable, cada operación lo va cambiando. Al final, toda la expresión se reduce a una simple resta <code>p1-p1</code>, que sería la última operación y que da siempre <code>&lt;Point(0,0)&gt;</code>. No parece que sea el resultado esperado.</p><p>Debemos adoptar una táctica más defensiva: el objeto nunca debe cambiar durante el cálculo. Como resultado de cada operación deberemos devolver una nueva instancia y que el estado de ésta, o sea, sus atributos, no se alteren a lo largo del cálculo:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointInmutable<span style=\"color: black;\">(</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">)</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-other.<span style=\"color: black;\">y</span><span style=\"color: black;\">)</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+other.<span style=\"color: black;\">y</span><span style=\"color: black;\">)</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">(</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+dx<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+dy<span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&lt;</span>code<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&lt;</span><span style=\"color: #dc143c;\">code</span> lang<span style=\"color: #66cc66;\">=</span><span style=\"color: #483d8b;\">&quot;python&quot;</span><span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">(</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span> - <span style=\"color: black;\">(</span>p1+p2<span style=\"color: black;\">)</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">)</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>-<span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Siendo perfeccionistas, deberíamos blindar mejor los atributos de la clase para hacerlos de <em>sólo lectura</em> mediante <code>properties</code>.</p><p>En este ejemplo hemos podido ver los resultados imprevisibles que podemos tener si abusamos de la mutabilidad. Estos problemas se ven incrementados si hubiera varios hilos de ejecución y cada hilo estuviera modificando las mismas variables comunes. Lamentablemente, es un caso bastante común debido a una mala previsión a la hora de iniciar un proyecto de desarrollo. Pero ésto lo veremos en un próximo artículo.</p>" "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/" (20812 50920) new 3 nil nil ((title nil "Mutable o inmutable, he ahí el dilema") (link nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/") (comments nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/#comments") (pubDate nil "Fri, 22 Mar 2013 21:02:32 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=536") (description nil "NOTA: Disponible también como ipynb Quien se enfrenta a la documentación de python por primera vez se pregunta porqué esa insistencia en mantener tipos de datos duplicados en versiones mutables e inmutables. Tenemos listas y tuplas que casi hacen lo mismo. En python3, tenemos el tipo inmutable bytes y el mutable bytearray. ¿Qué sentido tiene [...]") (content:encoded nil "<p><strong>NOTA</strong>: Disponible también como <a href=\"http://nbviewer.ipython.org/5224623\">ipynb</a></p><p>Quien se enfrenta a la documentación de python por primera vez se pregunta porqué esa insistencia en mantener tipos de datos duplicados en versiones mutables e inmutables. Tenemos listas y tuplas que casi hacen lo mismo. En python3, tenemos el tipo inmutable <code>bytes</code> y el mutable <code>bytearray</code>. ¿Qué sentido tiene tener <em>&#8220;duplicados&#8221;</em> algunos tipos en sus dos versiones? La única explicación que se puede encontrar en la documentación es que los tipos inmutables son más apropiados para usarlos como índices en diccionarios. No parece mucha ventaja para la complejidad que aporta.</p><p>En este artículo veremos qué implica la <em>mutabilidad</em> de un tipo de dato y en qué puede sernos útil usar un tipo mutable u otro inmutable.</p><h2>¿Qué es lo que cambia?</h2><p>Antes de explicar nada, veamos si somos capaces de saber qué está cambiando. Veamos dos códigos muy similares:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span> a <span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span></div></div><p>Parece que ambos códigos hagan lo mismo: añadir un fragmento, en sus versiones tupla y lista, respectivamente. Vamos a analizarlo mejor. Para saber qué pasa, usemos la función <code>id()</code>. Esta función devuelve un identificador de un objeto de tal modo que si dos objetos tienen el mismo identificador, entonces son el mismo objeto.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">192021604</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189519828</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189780876</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">id</span><span style=\"color: black;\">&#40;</span>a<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff4500;\">189780876</span></div></div><p>En la versión tupla, se ha creado una nueva tupla para realizar la operación, mientras que en la versión lista se ha usado la misma lista, modificándose con el resultado. Si cambiamos el operador <code>+=</code> por una versión más explícita tal vez se vea mejor:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span>a+<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#41;</span></div></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> a.<span style=\"color: black;\">extend</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">6</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">7</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span></div></div><p>Al operar con tuplas, los operandos no cambian de valor, creándose una nueva tupla como resultado de la operación. Podríamos sustituir toda la operación por el resultado final y el código funcionaría igual. En el caso de las listas, la lista se modifica <em>&#8220;in situ&#8221;</em> durante la operación. En estos casos, cambiar la expresión por el resultado final no garantiza que el programa funcione igual. Se necesita pasar por todos y cada uno de los estados intermedios para asegurar que todo funcione igual.</p><p>Esta propiedad de poder cambiar una expresión por su resultado final es conocida por <a href=\"http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)\" title=\"Referential Transparency\">Transparencia referencial</a> en programación funcional. Por lo general, los tipos inmutables se adecúan mejor a operaciones de cálculo donde el resultado final depende únicamente de los argumentos de entrada. Por otro lado, los tipos mutables son útiles para salvaguardar estados intermedios necesarios para la toma de decisiones durante la ejecución de un programa.</p><p>Por lo general, se saber elegir un tipo mutable o su homólogo inmutable es todo un arte. Ante la duda, los tipos inmutables son más fáciles de rastrear. Así mismo, veremos en próximos artículos que los tipos inmutables ayudan bastante en programación concurrente, por si estás pensando en programación multiproceso.</p><h2>Ejemplos de tipos propios</h2><p>La mutabilidad e inmutabilidad va más allá de los tipos estándar de python. Nosotros mismos podemos hacer nuestras propias clases mutables o inmutables, según nuestras necesidades.</p><p>Pongamos que creamos una clase <code>Point</code> para definir puntos, junto con unas sencillas operaciones para sumar, restar y desplazar. Nuestra idea es poder usar estos objetos en expresiones, por lo que es práctica común que toda operación devuelva el resultado como un punto para seguir encadenando operaciones.</p><p>Una versión <em>&#8220;mutable&#8221;</em> del objeto sería así:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointMutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">x</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>other.<span style=\"color: black;\">y</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+<span style=\"color: #66cc66;\">=</span>dx<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+<span style=\"color: #66cc66;\">=</span>dy<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #008000;\">self</span></div></div><p>En todas las operaciones, operamos el objeto consigo mismo y lo retornamos como resultados. Si probamos, vemos que no funciona tal como se esperaba:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointMutable<span style=\"color: black;\">&#40;</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span> - <span style=\"color: black;\">&#40;</span>p1+p2<span style=\"color: black;\">&#41;</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Devuelve <code>&lt;Point&lt;0,0&gt;</code> independientemente de los valores iniciales y de los desplazamientos que demos. Al ser nuestro objeto mutable, cada operación lo va cambiando. Al final, toda la expresión se reduce a una simple resta <code>p1-p1</code>, que sería la última operación y que da siempre <code>&lt;Point(0,0)&gt;</code>. No parece que sea el resultado esperado.</p><p>Debemos adoptar una táctica más defensiva: el objeto nunca debe cambiar durante el cálculo. Como resultado de cada operación deberemos devolver una nueva instancia y que el estado de ésta, o sea, sus atributos, no se alteren a lo largo del cálculo:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">class</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">object</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__init__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: #66cc66;\">,</span> y<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">=</span>x<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: #66cc66;\">=</span>y<br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__repr__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #483d8b;\">&quot;&lt;Point(%d,%d)&gt;&quot;</span>%<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__sub__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>-other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>-other.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span><span style=\"color: #0000cd;\">__add__</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> other<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+other.<span style=\"color: black;\">x</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+other.<span style=\"color: black;\">y</span><span style=\"color: black;\">&#41;</span><br />
&nbsp;<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">def</span> move<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span><span style=\"color: #66cc66;\">,</span> dx<span style=\"color: #66cc66;\">,</span> dy<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">x</span>+dx<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">self</span>.<span style=\"color: black;\">y</span>+dy<span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>code<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&lt;</span><span style=\"color: #dc143c;\">code</span> lang<span style=\"color: #66cc66;\">=</span><span style=\"color: #483d8b;\">&quot;python&quot;</span><span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p1<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> p2<span style=\"color: #66cc66;\">=</span>PointInmutable<span style=\"color: black;\">&#40;</span>-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">print</span> p1.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span> - <span style=\"color: black;\">&#40;</span>p1+p2<span style=\"color: black;\">&#41;</span>.<span style=\"color: black;\">move</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #66cc66;\">&lt;</span>Point<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>-<span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">&gt;</span></div></div><p>Siendo perfeccionistas, deberíamos blindar mejor los atributos de la clase para hacerlos de <em>sólo lectura</em> mediante <code>properties</code>.</p><p>En este ejemplo hemos podido ver los resultados imprevisibles que podemos tener si abusamos de la mutabilidad. Estos problemas se ven incrementados si hubiera varios hilos de ejecución y cada hilo estuviera modificando las mismas variables comunes. Lamentablemente, es un caso bastante común debido a una mala previsión a la hora de iniciar un proyecto de desarrollo. Pero ésto lo veremos en un próximo artículo.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/22/mutable-o-inmutable-he-ahi-el-dilema/feed/") (slash:comments nil "0"))) ("Mutabilidad de Listas" "<p><strong>NOTA</strong>: puedes visionar este artículo y descargártelo como notebook ipython en <a href=\"http://nbviewer.ipython.org/5177340\">http://nbviewer.ipython.org/5177340</a></p><p>Mucha gente, cuando se enfrenta por primera vez al lenguaje python, no entiende bien el concepto de <em>“inmutabilidad”</em> que tanto repite la documentación al tratar de diferenciar algunos tipos contenedores como tuplas, listas, conjuntos y diccionarios.</p><p>Por lo general, la gente formada en lenguajes de programación clásicos tiene la idea de que las variables son porciones de memoria donde colocar valores. Que una variable no se éso, <em>variable</em>, resulta un contrasentido. Han visto <em>constantes</em>, pero sólo sirven para inicializar variables y poco más. Si en su carrera hubieran sido formados en algún lenguaje funcional se darían cuenta que hay quienes piensan que las variables que cambian de valor son las raras, que lo más natural es que una variable conserve su valor inicial, o sea, que sea inmutable.</p><p>Por poner un ejemplo, el siguiente código está basado en una pregunta reciente en la lista <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">python-es</a>. Tenemos una lista de pares y queremos quitar las parejas repetidas con orden cambiado:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> quitar_dup<span style=\"color: black;\">(</span>lista<span style=\"color: black;\">)</span>:<br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; item.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span><br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lista.<span style=\"color: black;\">remove</span><span style=\"color: black;\">(</span>item<span style=\"color: black;\">)</span><br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> lista<br /><br />
L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">]</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">]</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">]</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">]</span><span style=\"color: black;\">]</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> quitar_dup<span style=\"color: black;\">(</span>L<span style=\"color: black;\">)</span> &nbsp;<span style=\"color: #808080; font-style: italic;\">#res: [[1, 3], [3, 1]]</span></div></td></tr></tbody></table></div><p>A simple vista, el código parece correcto, pero tenemos dos operaciones que pueden mutar listas: <code>.reverse()</code> y <code>.remove()</code>. De hecho, el resultado es incorrecto: <code>[[1, 3], [3, 1]]</code></p><p>A medida que recorremos la lista en el bucle <code>for</code>, la lista se va modificando, lo que da lugar a resultados inesperados. Si no lo ves bien, basta añadir algunos <code>prints</code> en lugares estratégicos para que comprobar lo que pasa. De hecho, sólo existen dos iteraciones para cuatro elementos que tiene la lista.</p><p>Otro tipo de casos son cuando pasamos listas a funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">(</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">)</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>a<span style=\"color: black;\">]</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span></div></td></tr></tbody></table></div><p>Como efecto colateral, la función ha modificado la lista pasada como argumento, algo que no es siempre deseable. El problema se agrava más si empleamos listas en valores por defecto:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">(</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">]</span><span style=\"color: black;\">)</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>a<span style=\"color: black;\">]</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">[</span><span style=\"color: black;\">]</span><span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">)</span><br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span></div></td></tr></tbody></table></div><p>Como se puede ver, aunque intentemos <em>resetear</em> el valor por defecto, la función tiene un efecto memoria que es imposible de eliminar. Este efecto es a veces buscado, pero en general debe ser siempre evitado ya que desvirtúa el sentido que tiene dar valores por defecto.</p><p>Estos efectos son todavía más perniciosos con la <em>funciones lambda</em>. Al carecer de una <em>clausura</em> como las funciones, la evaluación de una función lambda depende del <em>scope</em> donde han sido definidas. Por ejemplo, observa esta creación de una lista de funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">fns<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">]</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; fns.<span style=\"color: black;\">append</span><span style=\"color: black;\">(</span><span style=\"color: #ff7700;font-weight:bold;\">lambda</span> x: x+i<span style=\"color: black;\">)</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">]</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">)</span><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">]</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">)</span></div></td></tr></tbody></table></div><p>Siempre añade <code>4</code> al argumento, que es el valor de <code>i</code> al acabar el bucle, independientemente de qué valor tenía esta variable en el momento de crear la función lambda. No es de extrañar que se recomiende dejar de usar estas funciones.</p><p>Por último, otro efecto funesto de la mutabilidad de las listas aparece en la creación de <em>listas multidimensionales</em> (aka <em>matrices</em>). Una forma rápida de crear una matriz de 2×2 es: <code>[[0]*2]*2</code>. El problema aquí está en que cuando clonamos listas, en lugar de copiar los elementos, los enlaza entre sí. Quizás se vea mejor si hacemos alguna operación:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">&gt;&gt;&gt; l=[[0]*2]*2<br />
[[0, 0], [0, 0]]<br />
&gt;&gt;&gt; l[0][0]<br />
0<br />
&gt;&gt;&gt; l[0][0]=1<br />
&gt;&gt;&gt; l<br />
[[1, 0], [1, 0]]<br />
&gt;&gt;&gt; l[0] is l[1]<br />
True</div></div><p>Los elementos <code>l[0]</code> y <code>l[1]</code> son el mismo elemento. Que los elementos de una lista puedan estar <em>entrelazados</em> resulta muy interante para algunos algoritmos de búsquedas. Pero hay que conocer bien lo que estamos haciendo si no queremos llevarnos alguna sorpresa.</p><h2>Recomendaciones para hacer código funcional</h2><h3>Copia de listas</h3><p>En funciones y métodos, si recibimos una lista como argumento, la primera acción defensiva que deberíamos hacer es copiar la lista en una variable local y trabajar solo con la variable local desde ese momento. Con una asignación directa no se realiza una copia, más bien estaríamos <em>enlazando</em> una nueva referenciasin solucionar nada.</p><p>La forma consensuada entre programadores python de copiar una lista es con la operación de <em>spliting</em><code>L[:]</code>, aunque sirven otras operaciones idempotentes como <code>L*1</code> ó <code>L+[]</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>. Para listas de elementos entrelazados tendremos que acudir a otros mecanismos de copia como los que ofrece el <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">módulo <code>copy</code></a>, aunque no será frecuente que lo necesitemos.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">(</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: black;\">)</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l<span style=\"color: #66cc66;\">=</span>lista<span style=\"color: black;\">[</span>:<span style=\"color: black;\">]</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>a<span style=\"color: black;\">]</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><p>En cuanto a los argumentos por defecto, lo mejor es no usar nunca una lista para tal cosa. Una buena estrategia defensiva consiste en usar <code>None</code> de esta forma:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">(</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">None</span><span style=\"color: black;\">)</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">]</span><span style=\"color: #ff7700;font-weight:bold;\">if</span> lista <span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #008000;\">None</span><span style=\"color: #ff7700;font-weight:bold;\">else</span> lista<span style=\"color: black;\">[</span>:<span style=\"color: black;\">]</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>a<span style=\"color: black;\">]</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><h3>Operaciones inmutables con listas</h3><p>En cuanto a evitar las operaciones que mutan listas, siempre hay alternativas inmutables de todas estas operaciones. El siguiente cuadro puede servir como referencia:</p><p><style type=\"text/css\">
table {
color:#333333;
border-width: 1px;
border-color: #666666;
border-collapse: collapse;
font-family: \"New Courier\", monospaced, fixed;
font-size:14px;
}
table th {
border-width: 1px;
padding: 8px;
border-style: solid;
border-color: #666666;
background-color: #dedede;
}
table td {
border-width: 1px;
padding: 8px;
border-style: solid;
border-color: #666666;
background-color: #ffffff;
}
</style></p><table><thead><tr><th>Mutable</th><th>Inmutable</th></tr></thead><tbody><tr><td><code>L.append(item)</code></td><td><code>L+[item]</code></td></tr><tr><td><code>L.extend(sequence)</code></td><td><code>L + list(sequence)</code></td></tr><tr><td><code>L.insert(index, item)</code></td><td><code>L[:index] + [item] + L[index:]</code></td></tr><tr><td><code>L.reverse()</code></td><td><code>L[::-1]</code></td></tr><tr><td><code>L.sort()</code></td><td><code>sorted(L)</code></td></tr><tr><td><code>item = L.pop()</code></td><td><code>item,L = L[-1],L[:-1]</code></td></tr><tr><td><code>item = L.pop(0)</code></td><td><code>item,L = L[0],L[1:]</code></td></tr><tr><td><code>item = L.pop(index)</code></td><td><code>item, L = L[item], L[:item]+L[item+1:]</code></td></tr><tr><td><code>L.remove(item)</code></td><td><code>L=L[:item]+L[item+1:]</code></td></tr><tr><td><code>L[i:j] = K</code></td><td><code>L[:i] + K + L[j:]</code></td></tr></tbody></table><p>A la hora de decidir qué versión usar, la versión inmutable es más apropiada para programación funcional y resulta incluos más intuitiva de interpretar. No es extraño ver errores de código donde se espera resultados de las operaciones <code>.sort()</code> o <code>.reverse()</code>, que siempre devuelven <code>None</code>. Para el intérprete de python no hay error, pero a veces nos será difícil darnos cuenta de estos errores:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO ERRÓNEO: machacamos la lista con None</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> l.<span style=\"color: black;\">sort</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span><span style=\"color: black;\">]</span><br />
Traceback <span style=\"color: black;\">(</span>most recent call last<span style=\"color: black;\">)</span>:<br />
&nbsp; File <span style=\"color: #483d8b;\">&quot;&lt;stdin&gt;&quot;</span><span style=\"color: #66cc66;\">,</span> line <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #66cc66;\">&lt;</span>module<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #008000;\">TypeError</span>: <span style=\"color: #483d8b;\">'NoneType'</span><span style=\"color: #008000;\">object</span><span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #ff7700;font-weight:bold;\">not</span> iterable</div></td></tr></tbody></table></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO CORRECTO</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">sorted</span><span style=\"color: black;\">(</span>l<span style=\"color: black;\">)</span><span style=\"color: black;\">]</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2<br /><span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">9</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">16</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">25</span><span style=\"color: black;\">]</span></div></td></tr></tbody></table></div><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>De hecho, la operación <code>L*1</code> es más eficiente que <code>L[:]</code>. <a href=\"#fnref:1\" rev=\"footnote\">↩</a></p></li></ol></div>" "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/" (20804 34657) new 4 nil nil ((title nil "Mutabilidad de Listas") (link nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/") (comments nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/#comments") (pubDate nil "Sat, 16 Mar 2013 14:53:21 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=514") (description nil "NOTA: puedes visionar este artículo y descargártelo como notebook ipython en http://nbviewer.ipython.org/5177340 Mucha gente, cuando se enfrenta por primera vez al lenguaje python, no entiende bien el concepto de &#8220;inmutabilidad&#8221; que tanto repite la documentación al tratar de diferenciar algunos tipos contenedores como tuplas, listas, conjuntos y diccionarios. Por lo general, la gente formada en [...]") (content:encoded nil "<p><strong>NOTA</strong>: puedes visionar este artículo y descargártelo como notebook ipython en <a href=\"http://nbviewer.ipython.org/5177340\">http://nbviewer.ipython.org/5177340</a></p><p>Mucha gente, cuando se enfrenta por primera vez al lenguaje python, no entiende bien el concepto de <em>&#8220;inmutabilidad&#8221;</em> que tanto repite la documentación al tratar de diferenciar algunos tipos contenedores como tuplas, listas, conjuntos y diccionarios.</p><p>Por lo general, la gente formada en lenguajes de programación clásicos tiene la idea de que las variables son porciones de memoria donde colocar valores. Que una variable no se éso, <em>variable</em>, resulta un contrasentido. Han visto <em>constantes</em>, pero sólo sirven para inicializar variables y poco más. Si en su carrera hubieran sido formados en algún lenguaje funcional se darían cuenta que hay quienes piensan que las variables que cambian de valor son las raras, que lo más natural es que una variable conserve su valor inicial, o sea, que sea inmutable.</p><p>Por poner un ejemplo, el siguiente código está basado en una pregunta reciente en la lista <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">python-es</a>. Tenemos una lista de pares y queremos quitar las parejas repetidas con orden cambiado:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> quitar_dup<span style=\"color: black;\">&#40;</span>lista<span style=\"color: black;\">&#41;</span>:<br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; item.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><br /><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> item <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista:<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lista.<span style=\"color: black;\">remove</span><span style=\"color: black;\">&#40;</span>item<span style=\"color: black;\">&#41;</span><br /><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> lista<br /><br />
L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#93;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> quitar_dup<span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span> &nbsp;<span style=\"color: #808080; font-style: italic;\">#res: [[1, 3], [3, 1]]</span></div></td></tr></tbody></table></div><p>A simple vista, el código parece correcto, pero tenemos dos operaciones que pueden mutar listas: <code>.reverse()</code> y <code>.remove()</code>. De hecho, el resultado es incorrecto: <code>[[1, 3], [3, 1]]</code></p><p>A medida que recorremos la lista en el bucle <code>for</code>, la lista se va modificando, lo que da lugar a resultados inesperados. Si no lo ves bien, basta añadir algunos <code>prints</code> en lugares estratégicos para que comprobar lo que pasa. De hecho, sólo existen dos iteraciones para cuatro elementos que tiene la lista.</p><p>Otro tipo de casos son cuando pasamos listas a funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">&#41;</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span>L<span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> L<br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><p>Como efecto colateral, la función ha modificado la lista pasada como argumento, algo que no es siempre deseable. El problema se agrava más si empleamos listas en valores por defecto:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> l<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span>:<br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
... &nbsp; &nbsp; <span style=\"color: black;\">l</span>+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
... &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l<br />
... <br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> add<span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><p>Como se puede ver, aunque intentemos <em>resetear</em> el valor por defecto, la función tiene un efecto memoria que es imposible de eliminar. Este efecto es a veces buscado, pero en general debe ser siempre evitado ya que desvirtúa el sentido que tiene dar valores por defecto.</p><p>Estos efectos son todavía más perniciosos con la <em>funciones lambda</em>. Al carecer de una <em>clausura</em> como las funciones, la evaluación de una función lambda depende del <em>scope</em> donde han sido definidas. Por ejemplo, observa esta creación de una lista de funciones:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">fns<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; fns.<span style=\"color: black;\">append</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff7700;font-weight:bold;\">lambda</span> x: x+i<span style=\"color: black;\">&#41;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span><br /><span style=\"color: #ff7700;font-weight:bold;\">print</span> fns<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span></div></td></tr></tbody></table></div><p>Siempre añade <code>4</code> al argumento, que es el valor de <code>i</code> al acabar el bucle, independientemente de qué valor tenía esta variable en el momento de crear la función lambda. No es de extrañar que se recomiende dejar de usar estas funciones.</p><p>Por último, otro efecto funesto de la mutabilidad de las listas aparece en la creación de <em>listas multidimensionales</em> (aka <em>matrices</em>). Una forma rápida de crear una matriz de 2&#215;2 es: <code>[[0]*2]*2</code>. El problema aquí está en que cuando clonamos listas, en lugar de copiar los elementos, los enlaza entre sí. Quizás se vea mejor si hacemos alguna operación:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">&gt;&gt;&gt; l=[[0]*2]*2<br />
[[0, 0], [0, 0]]<br />
&gt;&gt;&gt; l[0][0]<br />
0<br />
&gt;&gt;&gt; l[0][0]=1<br />
&gt;&gt;&gt; l<br />
[[1, 0], [1, 0]]<br />
&gt;&gt;&gt; l[0] is l[1]<br />
True</div></div><p>Los elementos <code>l[0]</code> y <code>l[1]</code> son el mismo elemento. Que los elementos de una lista puedan estar <em>entrelazados</em> resulta muy interante para algunos algoritmos de búsquedas. Pero hay que conocer bien lo que estamos haciendo si no queremos llevarnos alguna sorpresa.</p><h2>Recomendaciones para hacer código funcional</h2><h3>Copia de listas</h3><p>En funciones y métodos, si recibimos una lista como argumento, la primera acción defensiva que deberíamos hacer es copiar la lista en una variable local y trabajar solo con la variable local desde ese momento. Con una asignación directa no se realiza una copia, más bien estaríamos <em>enlazando</em> una nueva referenciasin solucionar nada.</p><p>La forma consensuada entre programadores python de copiar una lista es con la operación de <em>spliting</em><code>L[:]</code>, aunque sirven otras operaciones idempotentes como <code>L*1</code> ó <code>L+[]</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>. Para listas de elementos entrelazados tendremos que acudir a otros mecanismos de copia como los que ofrece el <a href=\"http://docs.python.org/3.3/library/copy.html\" title=\"Módulo copy\">módulo <code>copy</code></a>, aunque no será frecuente que lo necesitemos.</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: black;\">&#41;</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l<span style=\"color: #66cc66;\">=</span>lista<span style=\"color: black;\">&#91;</span>:<span style=\"color: black;\">&#93;</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><p>En cuanto a los argumentos por defecto, lo mejor es no usar nunca una lista para tal cosa. Una buena estrategia defensiva consiste en usar <code>None</code> de esta forma:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> add<span style=\"color: black;\">&#40;</span>a<span style=\"color: #66cc66;\">,</span> lista<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">None</span><span style=\"color: black;\">&#41;</span>:<br /><span style=\"display:block;background-color:#ffff66\">&nbsp; l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: #ff7700;font-weight:bold;\">if</span> lista <span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #008000;\">None</span><span style=\"color: #ff7700;font-weight:bold;\">else</span> lista<span style=\"color: black;\">&#91;</span>:<span style=\"color: black;\">&#93;</span><br /></span>&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">if</span> a <span style=\"color: #ff7700;font-weight:bold;\">not</span><span style=\"color: #ff7700;font-weight:bold;\">in</span> l:<br />
&nbsp; &nbsp; l+<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>a<span style=\"color: black;\">&#93;</span><br />
&nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> l</div></td></tr></tbody></table></div><h3>Operaciones inmutables con listas</h3><p>En cuanto a evitar las operaciones que mutan listas, siempre hay alternativas inmutables de todas estas operaciones. El siguiente cuadro puede servir como referencia:</p><p><style type=\"text/css\">
table {
    color:#333333;
    border-width: 1px;
    border-color: #666666;
    border-collapse: collapse;
    font-family: \"New Courier\", monospaced, fixed;
    font-size:14px;
}
table th {
    border-width: 1px;
    padding: 8px;
    border-style: solid;
    border-color: #666666;
    background-color: #dedede;
}
table td {
    border-width: 1px;
    padding: 8px;
    border-style: solid;
    border-color: #666666;
    background-color: #ffffff;
}
</style></p><table><thead><tr><th>Mutable</th><th>Inmutable</th></tr></thead><tbody><tr><td><code>L.append(item)</code></td><td><code>L+[item]</code></td></tr><tr><td><code>L.extend(sequence)</code></td><td><code>L + list(sequence)</code></td></tr><tr><td><code>L.insert(index, item)</code></td><td><code>L[:index] + [item] + L[index:]</code></td></tr><tr><td><code>L.reverse()</code></td><td><code>L[::-1]</code></td></tr><tr><td><code>L.sort()</code></td><td><code>sorted(L)</code></td></tr><tr><td><code>item = L.pop()</code></td><td><code>item,L = L[-1],L[:-1]</code></td></tr><tr><td><code>item = L.pop(0)</code></td><td><code>item,L = L[0],L[1:]</code></td></tr><tr><td><code>item = L.pop(index)</code></td><td><code>item, L = L[item], L[:item]+L[item+1:]</code></td></tr><tr><td><code>L.remove(item)</code></td><td><code>L=L[:item]+L[item+1:]</code></td></tr><tr><td><code>L[i:j] = K</code></td><td><code>L[:i] + K + L[j:]</code></td></tr></tbody></table><p>A la hora de decidir qué versión usar, la versión inmutable es más apropiada para programación funcional y resulta incluos más intuitiva de interpretar. No es extraño ver errores de código donde se espera resultados de las operaciones <code>.sort()</code> o <code>.reverse()</code>, que siempre devuelven <code>None</code>. Para el intérprete de python no hay error, pero a veces nos será difícil darnos cuenta de estos errores:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO ERRÓNEO: machacamos la lista con None</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> l.<span style=\"color: black;\">sort</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
Traceback <span style=\"color: black;\">&#40;</span>most recent call last<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; File <span style=\"color: #483d8b;\">&quot;&lt;stdin&gt;&quot;</span><span style=\"color: #66cc66;\">,</span> line <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #66cc66;\">&lt;</span>module<span style=\"color: #66cc66;\">&gt;</span><br /><span style=\"color: #008000;\">TypeError</span>: <span style=\"color: #483d8b;\">'NoneType'</span><span style=\"color: #008000;\">object</span><span style=\"color: #ff7700;font-weight:bold;\">is</span><span style=\"color: #ff7700;font-weight:bold;\">not</span> iterable</div></td></tr></tbody></table></div><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td style=\"padding:5px;text-align:center;color:#888888;background-color:#EEEEEE;border-right: 1px solid #9F9F9F;font: normal 12px/1.4em Monaco, Lucida Console, monospace;\"><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span><span style=\"color: #808080; font-style: italic;\">#MODO CORRECTO</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2 <span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>x*x <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">sorted</span><span style=\"color: black;\">&#40;</span>l<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br /><span style=\"color: #66cc66;\">&gt;&gt;&gt;</span> l_2<br /><span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">4</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">9</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">16</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">25</span><span style=\"color: black;\">&#93;</span></div></td></tr></tbody></table></div><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>De hecho, la operación <code>L*1</code> es más eficiente que <code>L[:]</code>.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/03/16/mutabilidad-de-listas/feed/") (slash:comments nil "1"))) ("Dobleces en python" "<p>En el <a href=\"http://ch3m4.org/blog/2013/02/21/collage-vs-origami/\" title=\"Collage vs. Origami\">último artículo</a> del blog contaba en qué consistía <em>doblar código</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>:</p><blockquote><p>“…un código que se pliega sobre sí mismo. Un código que te
lleva desde un principio a un final por el camino más corto.”</p></blockquote><p>Para ilustrar este concepto voy a usar un trozo de código python que se ve frecuentemente entre los programadores recién llegados de otros lenguajes:</p><p><sub><em>NOTA: se usará python 3.x para los siguientes ejemplos</em></sub></p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">(</span>args<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>args<span style=\"color: black;\">)</span><br />
&nbsp; &nbsp; i<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">0</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">(</span>i<span style=\"color: #66cc66;\">&lt;</span>num<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">[</span>i<span style=\"color: black;\">]</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>format<span style=\"color: black;\">(</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">)</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; i+<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">1</span><br /><br />
fich<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">)</span><br />
lineas<span style=\"color: #66cc66;\">=</span>fich.<span style=\"color: black;\">readlines</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span><br />
listar<span style=\"color: black;\">(</span>lineas<span style=\"color: black;\">)</span></div></div><p>Resumen: se define una función para imprimir en pantalla la lista de líneas leídas de un fichero, precedidas con el número de caracteres que tiene la línea.</p><p>Quien tenga algo de experiencia con python seguramente vea raro este código, incluso lo califique como <em>“poco pythónico”</em>. Nombrar a la función <code>listar</code>, como verbo, es señal de que el programador proviene de un lenguaje de <em>programación imperativo</em>. El programador ha buscado en python las mismas estructuras de control que tenía en su lenguaje de origen y sólo ha encontrado familiar la estructura <code>while</code>.</p><p>Rebuscando un poco más, tal vez encuentre cómo se usan los bucles <code>for</code> en python:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">(</span>args<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>args<span style=\"color: black;\">)</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>num<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">[</span>i<span style=\"color: black;\">]</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>format<span style=\"color: black;\">(</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">)</span></div></div><p>Un bucle <code>for</code> se caracteriza por concentrar en una sentencia todo el control del bucle, una gran ayuda visual para quien vaya a leer este código. La variable de control solo se modifica en la sentencia <code>for</code>, lo que evita errores.</p><p>Analizando más detenidamente, el bucle <code>for</code> itera sobre una secuencia de enteros dada por <code>range(0,num)</code>, de donde se sacan los índices con los que acceder a cada elemento de la lista <code>args</code>. Ésta sería la visión clásica de cómo operar con <code>arrays</code>.</p><p>Pero esta visión ha evolucionado con el tiempo hasta llegar al concepto de <em>“Colección”</em> que ya poseen casi todos los lenguajes, bien en su sintaxis, bien como librería estándar. Una <em>“Colección”</em> consiste en un grupo de objetos sobre los que puede iterar. <code>range(0,num)</code> sería una colección ordenada de números. El siguiente paso a dar sería iterar directamente sobre la lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">(</span>args<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> args:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>format<span style=\"color: black;\">(</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">)</span></div></div><p>Con este código hemos conseguido un doble objetivo, mejorar la legibilidad y darle más robustez al despreocuparnos por los índices de acceso. Los índices de acceso fuera de límites suelen ser origen de multitud de errores.</p><p>Pero tenemos algo más: al no usar índices hemos generalizado el uso de la función por cualquier secuencia, generador o <a href=\"http://docs.python.org/3/library/stdtypes.html#iterator-types\" title=\"Tipo iterador\">iterador</a>. Concretamente, los objetos <code>files</code> cumplen con el protocolo iterador, por lo que sería posible pasarlo directamente a esta función sin necesidad de volcar todas las líneas del fichero a una lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">(</span>it<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>format<span style=\"color: black;\">(</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">)</span><br /><br />
listar<span style=\"color: black;\">(</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span></div></div><p>Con este último doblez hemos ganado concisión. Pero sobre hemos ahorrado recursos ya que no necesitamos leer todo el fichero en memoria. La lectura del fichero se hará progresivamente en el momento que se solicite la siguiente línea, por lo que este código debería funcionar incluso con ficheros enormes, independiente de la cantidad de memoria disponible. Sólo se empleará la memoria suficiente para cachear una pocas líneas para ir renovándolas a medida que se prosiga la lectura del fichero.</p><p>Es un buen momento para comparar esta versión del código con la original de la que hemos partido.</p><h2>Programación Funcional</h2><p>Entre doblez y doblez, hemos perdido algunas variables intermedias superfluas. Esta <em>manía</em> por deshacerse de variables intermedias es señal de estar aproximándonos a un estilo de <em>programación funcional</em>.</p><p>Una posible definición de <em>“Programación Funcional”</em> sería como <em>aquella programación que difiere la evaluación de una expresión hasta el momento último en el que se vaya a usar su valor</em>.</p><p>Para este propósito, la expresión no puede depender de factores externos como variables globales o cambios de estado. No sabemos cuándo será evaluada una expresión. Lo único posible es hacer depender el resultado de una expresión en función del valor de otra, lo que se conoce por <em>“Composición de funciones”</em> (y de ahí el nombre de programación funcional).</p><p>Este modo de diferir la evaluación es lo que hicimos con el iterador fichero, cuyas líneas no se leían hasta el momento preciso. La pregunta es ¿podemos mejorar la orientación funcional de nuestro código?</p><p>La función <code>listar</code> no devuelve nada, tan sólo busca un efecto colateral. Es lo que se conoce en otros lenguajes como <em>“procedimiento”</em> (<em>procedure</em>). En nuestra metáfora de “pliegues”, una función que no devuelve nada la podríamos considerar como un “corte”, ya que no podemos hacer nada más a partir de aquí.</p><p>¿Qué pasaría si queremos cambiar la línea que se imprime en pantalla? ¿Y si queremos parar después de imprimir un número de líneas? En este punto, lo mejor es “desdoblar” el código y darle una orientación más funcional:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">from</span><span style=\"color: #dc143c;\">itertools</span><span style=\"color: #ff7700;font-weight:bold;\">import</span> islice<br /><br /><span style=\"color: #ff7700;font-weight:bold;\">def</span> lineas<span style=\"color: black;\">(</span>it<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">yield</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;{: 5d} {}&quot;</span>.<span style=\"color: black;\">format</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><br />
it<span style=\"color: #66cc66;\">=</span>lineas<span style=\"color: black;\">(</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;pr.py&quot;</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> n<span style=\"color: #66cc66;\">,</span> l <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">enumerate</span><span style=\"color: black;\">(</span>islice<span style=\"color: black;\">(</span>it<span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span>n<span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;|&quot;</span><span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">)</span></div></div><p>La función <code>listar</code> ha pasado a ser el iterador <code>lineas</code> que retorna las líneas ya formateadas. Asimismo, se ha cambiado la función <code>format</code> por el método <code>format</code> de los <code>strings</code> con el que se pueden formatear mejor varios valores a la vez. La impresión de las líneas en pantalla se deja para el último momento, cuando se necesita ver el resultado. Es en este momento cuando se decide cuántas líneas se van a imprimir, que es lo que hace el <code>islice</code> acortando el iterador <code>lineas</code> a 5 iteraciones. También se usa el iterador <code>enumerate</code> para ir enumerando las líneas a medida que las obtenemos.</p><p>Como se ve, una orientación funcional permite encadenar varias operaciones sin necesidad de mantener estados intermedios<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>. Además de lo que supone de ahorro de recursos, no tener que mantener un contexto con los estados intermedios hará más sencillo migrar la ejecución de un proceso a otro en programación concurrente (eg: <em>multihilo</em>). Hoy en día, tal como evolucionan los ordenadores, quien no programe pensando en la ejecución concurrente terminará programando dos veces.</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Puede que prefieras usar el término <a href=\"http://es.wikipedia.org/wiki/Refactorización\" title=\"Refactorización\"><em>“refactorizar”</em></a>, pero he pensado que es mejor dejar este término para la programación orientada a objeto y usar <em>“doblez”</em> para dar una idea más afín a la programación funcional. <a href=\"#fnref:1\" rev=\"footnote\">↩</a></p></li><li id=\"fn:2\"><p>En realidad, no es del todo cierto que la función no dependa de estados externos ya que el iterador <code>it</code> que hemos pasado como argumento podría cambiar externamente entre iteraciones. <a href=\"#fnref:2\" rev=\"footnote\">↩</a></p></li></ol></div>" "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/" (20782 28412) new 5 nil nil ((title nil "Dobleces en python") (link nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/") (comments nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/#comments") (pubDate nil "Wed, 27 Feb 2013 20:39:24 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=502") (description nil "En el último artículo del blog contaba en qué consistía doblar código1: &#8220;&#8230;un código que se pliega sobre sí mismo. Un código que te lleva desde un principio a un final por el camino más corto.&#8221; Para ilustrar este concepto voy a usar un trozo de código python que se ve frecuentemente entre los programadores [...]") (content:encoded nil "<p>En el <a href=\"http://ch3m4.org/blog/2013/02/21/collage-vs-origami/\" title=\"Collage vs. Origami\">último artículo</a> del blog contaba en qué consistía <em>doblar código</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>:</p><blockquote><p>&#8220;&#8230;un código que se pliega sobre sí mismo. Un código que te
  lleva desde un principio a un final por el camino más corto.&#8221;</p></blockquote><p>Para ilustrar este concepto voy a usar un trozo de código python que se ve frecuentemente entre los programadores recién llegados de otros lenguajes:</p><p><sub><em>NOTA: se usará python 3.x para los siguientes ejemplos</em></sub></p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; i<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">0</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">&#40;</span>i<span style=\"color: #66cc66;\">&lt;</span>num<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; i+<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">1</span><br /><br />
fich<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">&#41;</span><br />
lineas<span style=\"color: #66cc66;\">=</span>fich.<span style=\"color: black;\">readlines</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><br />
listar<span style=\"color: black;\">&#40;</span>lineas<span style=\"color: black;\">&#41;</span></div></div><p>Resumen: se define una función para imprimir en pantalla la lista de líneas leídas de un fichero, precedidas con el número de caracteres que tiene la línea.</p><p>Quien tenga algo de experiencia con python seguramente vea raro este código, incluso lo califique como <em>&#8220;poco pythónico&#8221;</em>. Nombrar a la función <code>listar</code>, como verbo, es señal de que el programador proviene de un lenguaje de <em>programación imperativo</em>. El programador ha buscado en python las mismas estructuras de control que tenía en su lenguaje de origen y sólo ha encontrado familiar la estructura <code>while</code>.</p><p>Rebuscando un poco más, tal vez encuentre cómo se usan los bucles <code>for</code> en python:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; num<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>num<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; x<span style=\"color: #66cc66;\">=</span>args<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span></div></div><p>Un bucle <code>for</code> se caracteriza por concentrar en una sentencia todo el control del bucle, una gran ayuda visual para quien vaya a leer este código. La variable de control solo se modifica en la sentencia <code>for</code>, lo que evita errores.</p><p>Analizando más detenidamente, el bucle <code>for</code> itera sobre una secuencia de enteros dada por <code>range(0,num)</code>, de donde se sacan los índices con los que acceder a cada elemento de la lista <code>args</code>. Ésta sería la visión clásica de cómo operar con <code>arrays</code>.</p><p>Pero esta visión ha evolucionado con el tiempo hasta llegar al concepto de <em>&#8220;Colección&#8221;</em> que ya poseen casi todos los lenguajes, bien en su sintaxis, bien como librería estándar. Una <em>&#8220;Colección&#8221;</em> consiste en un grupo de objetos sobre los que puede iterar. <code>range(0,num)</code> sería una colección ordenada de números. El siguiente paso a dar sería iterar directamente sobre la lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>args<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> args:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span></div></div><p>Con este código hemos conseguido un doble objetivo, mejorar la legibilidad y darle más robustez al despreocuparnos por los índices de acceso. Los índices de acceso fuera de límites suelen ser origen de multitud de errores.</p><p>Pero tenemos algo más: al no usar índices hemos generalizado el uso de la función por cualquier secuencia, generador o <a href=\"http://docs.python.org/3/library/stdtypes.html#iterator-types\" title=\"Tipo iterador\">iterador</a>. Concretamente, los objetos <code>files</code> cumplen con el protocolo iterador, por lo que sería posible pasarlo directamente a esta función sin necesidad de volcar todas las líneas del fichero a una lista:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> listar<span style=\"color: black;\">&#40;</span>it<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>format<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot; 5d&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><br /><br />
listar<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;fichero.txt&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span></div></div><p>Con este último doblez hemos ganado concisión. Pero sobre hemos ahorrado recursos ya que no necesitamos leer todo el fichero en memoria. La lectura del fichero se hará progresivamente en el momento que se solicite la siguiente línea, por lo que este código debería funcionar incluso con ficheros enormes, independiente de la cantidad de memoria disponible. Sólo se empleará la memoria suficiente para cachear una pocas líneas para ir renovándolas a medida que se prosiga la lectura del fichero.</p><p>Es un buen momento para comparar esta versión del código con la original de la que hemos partido.</p><h2>Programación Funcional</h2><p>Entre doblez y doblez, hemos perdido algunas variables intermedias superfluas. Esta <em>manía</em> por deshacerse de variables intermedias es señal de estar aproximándonos a un estilo de <em>programación funcional</em>.</p><p>Una posible definición de <em>&#8220;Programación Funcional&#8221;</em> sería como <em>aquella programación que difiere la evaluación de una expresión hasta el momento último en el que se vaya a usar su valor</em>.</p><p>Para este propósito, la expresión no puede depender de factores externos como variables globales o cambios de estado. No sabemos cuándo será evaluada una expresión. Lo único posible es hacer depender el resultado de una expresión en función del valor de otra, lo que se conoce por <em>&#8220;Composición de funciones&#8221;</em> (y de ahí el nombre de programación funcional).</p><p>Este modo de diferir la evaluación es lo que hicimos con el iterador fichero, cuyas líneas no se leían hasta el momento preciso. La pregunta es ¿podemos mejorar la orientación funcional de nuestro código?</p><p>La función <code>listar</code> no devuelve nada, tan sólo busca un efecto colateral. Es lo que se conoce en otros lenguajes como <em>&#8220;procedimiento&#8221;</em> (<em>procedure</em>). En nuestra metáfora de &#8220;pliegues&#8221;, una función que no devuelve nada la podríamos considerar como un &#8220;corte&#8221;, ya que no podemos hacer nada más a partir de aquí.</p><p>¿Qué pasaría si queremos cambiar la línea que se imprime en pantalla? ¿Y si queremos parar después de imprimir un número de líneas? En este punto, lo mejor es &#8220;desdoblar&#8221; el código y darle una orientación más funcional:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">from</span><span style=\"color: #dc143c;\">itertools</span><span style=\"color: #ff7700;font-weight:bold;\">import</span> islice<br /><br /><span style=\"color: #ff7700;font-weight:bold;\">def</span> lineas<span style=\"color: black;\">&#40;</span>it<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> it:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">yield</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;{: 5d} {}&quot;</span>.<span style=\"color: black;\">format</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span> x<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><br />
it<span style=\"color: #66cc66;\">=</span>lineas<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">open</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;pr.py&quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br /><br /><span style=\"color: #ff7700;font-weight:bold;\">for</span> n<span style=\"color: #66cc66;\">,</span> l <span style=\"color: #ff7700;font-weight:bold;\">in</span><span style=\"color: #008000;\">enumerate</span><span style=\"color: black;\">&#40;</span>islice<span style=\"color: black;\">&#40;</span>it<span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">5</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>n<span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;|&quot;</span><span style=\"color: #66cc66;\">,</span> l<span style=\"color: black;\">&#41;</span></div></div><p>La función <code>listar</code> ha pasado a ser el iterador <code>lineas</code> que retorna las líneas ya formateadas. Asimismo, se ha cambiado la función <code>format</code> por el método <code>format</code> de los <code>strings</code> con el que se pueden formatear mejor varios valores a la vez. La impresión de las líneas en pantalla se deja para el último momento, cuando se necesita ver el resultado. Es en este momento cuando se decide cuántas líneas se van a imprimir, que es lo que hace el <code>islice</code> acortando el iterador <code>lineas</code> a 5 iteraciones. También se usa el iterador <code>enumerate</code> para ir enumerando las líneas a medida que las obtenemos.</p><p>Como se ve, una orientación funcional permite encadenar varias operaciones sin necesidad de mantener estados intermedios<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>. Además de lo que supone de ahorro de recursos, no tener que mantener un contexto con los estados intermedios hará más sencillo migrar la ejecución de un proceso a otro en programación concurrente (eg: <em>multihilo</em>). Hoy en día, tal como evolucionan los ordenadores, quien no programe pensando en la ejecución concurrente terminará programando dos veces.</p><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Puede que prefieras usar el término <a href=\"http://es.wikipedia.org/wiki/Refactorización\" title=\"Refactorización\"><em>&#8220;refactorizar&#8221;</em></a>, pero he pensado que es mejor dejar este término para la programación orientada a objeto y usar <em>&#8220;doblez&#8221;</em> para dar una idea más afín a la programación funcional.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li><li id=\"fn:2\"><p>En realidad, no es del todo cierto que la función no dependa de estados externos ya que el iterador <code>it</code> que hemos pasado como argumento podría cambiar externamente entre iteraciones.&#160;<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/27/dobleces-en-python/feed/") (slash:comments nil "5"))) ("Collage vs. Origami" "<p>En mis años como programador he visto mucho código. Lo suficiente como para saber qué estilo tiene el programador que lo escribe, cuáles son sus vicios y cuáles son sus errores de concepto.</p><p>Nos resulta imposible definir conceptos como <em>“elegancia”</em> o <em>“claridad”</em> en un código. Son conceptos más afines a la <em>Estética</em> que a las <em>Ciencias de la Computación</em>, siendo difíciles de medir objetivamente. Nunca serán parte de una metodología y, sin embargo, se consideran objetivos a alcanzar por todo programador que se precie.</p><p>En nuestra simpleza, necesitamos compartimentar todo lo que conocemos en grandes grupos: imperativo vs. dinámico, tipado estático vs. tipado dinámico, estructural vs. orientado a objeto, orientado a objeto vs. funcional, …</p><p>En este mundo de <em>versus</em>, podemos hacer una similitud de la programación de código con el versus <em>“Collage vs. Origami”</em>.</p><ul><li><p>Un <strong>código collage</strong> sería un código construido como parches. Secciones de estructuras distintas, con controles que encajen todas las piezas. Todo pensado para que si una pieza no funciona, se “arranca” y se pone otra encima.</p></li><li><p>Un <strong>código origami</strong> sería un código que se pliega sobre sí mismo. Un código que te lleva desde un principio a un final por el camino más corto. Si algo no funciona, se vuelve atrás, se “desdobla” y se hace un doblez nuevo.</p></li></ul><p>Al igual que el origami, la creación de código requiere muchas veces pararse a pensar qué parte del código se complicó demasiado y actuar sobre esa parte. Si no se entiende bien, una repetición consistente en teclear decenas de veces ese código ayuda a entender mejor lo que hace y el motivo que hacía que fuera tan complicado. Es muy similar a repetir los mismos dobleces de una figura de papel hasta lograr su doblado perfecto.</p><p>Como parte de tribunales de selección para puestos informáticos, me he sentido muchas veces molesto por tener que redactar tediosos cuestionarios de preguntas técnicas que nada valoraban la capacidad real del candidato para el futuro trabajo que iba a realizar. El objeto era realizar una fuerte criba entre los candidatos y, sobre todo, ordenarlos por puntos para hacer más sencilla su selección posterior.</p><p>Pero era en la posterior prueba práctica donde mejor podía apreciar la valía de un candidato. Una visión del código fuente y la documentación asociada permitía apreciar claramente quiénes eran los adecuados para el puesto. Pero ¿cómo valorar con una puntuación esta percepción?</p><p>Puede que para la próxima vez empiece por pedir al candidato que doble el papel de los enunciados de la prueba. Seguramente consiga saber más de él que de las respuestas que pueda darme.</p>" "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/" (20774 36116) new 6 nil nil ((title nil "Collage vs. Origami") (link nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/") (comments nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/#comments") (pubDate nil "Thu, 21 Feb 2013 21:09:40 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=499") (description nil "En mis años como programador he visto mucho código. Lo suficiente como para saber qué estilo tiene el programador que lo escribe, cuáles son sus vicios y cuáles son sus errores de concepto. Nos resulta imposible definir conceptos como &#8220;elegancia&#8221; o &#8220;claridad&#8221; en un código. Son conceptos más afines a la Estética que a las [...]") (content:encoded nil "<p>En mis años como programador he visto mucho código. Lo suficiente como para saber qué estilo tiene el programador que lo escribe, cuáles son sus vicios y cuáles son sus errores de concepto.</p><p>Nos resulta imposible definir conceptos como <em>&#8220;elegancia&#8221;</em> o <em>&#8220;claridad&#8221;</em> en un código. Son conceptos más afines a la <em>Estética</em> que a las <em>Ciencias de la Computación</em>, siendo difíciles de medir objetivamente. Nunca serán parte de una metodología y, sin embargo, se consideran objetivos a alcanzar por todo programador que se precie.</p><p>En nuestra simpleza, necesitamos compartimentar todo lo que conocemos en grandes grupos: imperativo vs. dinámico, tipado estático vs. tipado dinámico, estructural vs. orientado a objeto, orientado a objeto vs. funcional, &#8230;</p><p>En este mundo de <em>versus</em>, podemos hacer una similitud de la programación de código con el versus <em>&#8220;Collage vs. Origami&#8221;</em>.</p><ul><li><p>Un <strong>código collage</strong> sería un código construido como parches. Secciones de estructuras distintas, con controles que encajen todas las piezas. Todo pensado para que si una pieza no funciona, se &#8220;arranca&#8221; y se pone otra encima.</p></li><li><p>Un <strong>código origami</strong> sería un código que se pliega sobre sí mismo. Un código que te lleva desde un principio a un final por el camino más corto. Si algo no funciona, se vuelve atrás, se &#8220;desdobla&#8221; y se hace un doblez nuevo.</p></li></ul><p>Al igual que el origami, la creación de código requiere muchas veces pararse a pensar qué parte del código se complicó demasiado y actuar sobre esa parte. Si no se entiende bien, una repetición consistente en teclear decenas de veces ese código ayuda a entender mejor lo que hace y el motivo que hacía que fuera tan complicado. Es muy similar a repetir los mismos dobleces de una figura de papel hasta lograr su doblado perfecto.</p><p>Como parte de tribunales de selección para puestos informáticos, me he sentido muchas veces molesto por tener que redactar tediosos cuestionarios de preguntas técnicas que nada valoraban la capacidad real del candidato para el futuro trabajo que iba a realizar. El objeto era realizar una fuerte criba entre los candidatos y, sobre todo, ordenarlos por puntos para hacer más sencilla su selección posterior.</p><p>Pero era en la posterior prueba práctica donde mejor podía apreciar la valía de un candidato. Una visión del código fuente y la documentación asociada permitía apreciar claramente quiénes eran los adecuados para el puesto. Pero ¿cómo valorar con una puntuación esta percepción?</p><p>Puede que para la próxima vez empiece por pedir al candidato que doble el papel de los enunciados de la prueba. Seguramente consiga saber más de él que de las respuestas que pueda darme.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/21/collage-vs-origami/feed/") (slash:comments nil "6"))) ("Estado de situación" "<p>Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su influencia.</p><p>En mi trabajo como informático en una administración pública, soy testigo de cómo se están aplicando medidas de austeridad sin contramedidas que eviten el colapso del sistema. Sin duda alguna, el objetivo de estas medidas no puede ser otro que liquidar el sistema público para su sustitución por otro basado en el libre mercado, menos solidario y más injusto.</p><p>Pero no quiero hablar de la crisis en general. Hay otros muchos blogs que lo hacen mucho mejor que yo y con mayor profundidad. Solo quisiera hablar ahora de los cambios que estoy viviendo en mi entorno de trabajo.</p><p>Por un lado, todos aquellos proyectos innovadores en los que estaba implicado han sido cancelados o aminorados por los nuevos gestores. Como primera consecuencia de ello, han quedado sin uso todos mis programas hechos en python con los que extraía la información que necesitaba la dirección para la toma de decisiones (<abbr title=\" \"Management Information System\" - \"Sistema de información gerencial (SIG)\"\">MIS</abbr>). Confío que algún día vuelva a interesar el <em>estado real</em> de la administración donde trabajo, aunque sospecho que para entonces será demasiado tarde.</p><p>Se puede afirmar que ahora mismo ya no programo en python. Por si fuera poco, a ésto hay que añadir la cantidad de proyectos que se nos están quedando huérfanos por no poder renovar su mantenimiento o, simplemente, por quebrar y desaparecer las empresas que los llevaban. Todos estos proyectos están cayendo en mi bandeja de tareas pendientes, con lo que ahora he tenido que volver a programar en lenguajes que creía olvidados como Visual Basic, TSQL o PHP. Un gran paso atrás del que no veo que podamos salir en bastantes años.</p><p>Por este motivo, cuando un grupo de entusiastas programadores españoles de python unieron esfuerzos para crear una <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\">asociación</a> con la que montar la primera <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\"><strong>PyCon</strong> española</a>, no he podido dejar de pensar lo lejos que estoy en estos momentos de considerarme <em>“programador python”</em>. Se me incluyó en un principio entre los <em>“socios fundadores”</em> de la asociación, supongo que debido a mi labor en la lista de <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a> todos estos años. Pero pienso que un socio fundador debe ser una especie de socio <em>“compromisario”</em> que trabaje duro para hacer viable la asociación, sobre todo en sus inicios más difíciles. En estos momentos, no me veo capaz de algo así, ni siquiera de mostrar el más mínimo entusiasmo. Por éso mismo, he preferido declinar el ofrecimiento y figurar como un socio más, a pesar de haber podido disgustar a más de uno.</p><p>Como puntilla a lo dicho, últimamente estoy dedicando todo mi tiempo disponible al estudio del lenguaje <a href=\"http://www.scala-lang.org/\">scala</a>. Además de reconciliarme con la programación funcional, me ha hecho férreo defensor del tipado estático frente al tipado dinámico que usa python. No quiero decir de ninguna manera que abandone python, pero preveo que este año lo dedicaré a convertirme en experto programador de scala. Definitivamente, no encajo preparando la PyCon. Mis disculpas por ello.</p>" "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/" (20771 58141) new 7 nil nil ((title nil "Estado de situación") (link nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/") (comments nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/#comments") (pubDate nil "Tue, 19 Feb 2013 20:39:57 +0000") (dc:creator nil "Chema Cortés") (category nil "Pensamientos") (category nil "PyConES") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=497") (description nil "Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su influencia. En mi trabajo como informático en una administración pública, soy testigo de cómo [...]") (content:encoded nil "<p>Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su influencia.</p><p>En mi trabajo como informático en una administración pública, soy testigo de cómo se están aplicando medidas de austeridad sin contramedidas que eviten el colapso del sistema. Sin duda alguna, el objetivo de estas medidas no puede ser otro que liquidar el sistema público para su sustitución por otro basado en el libre mercado, menos solidario y más injusto.</p><p>Pero no quiero hablar de la crisis en general. Hay otros muchos blogs que lo hacen mucho mejor que yo y con mayor profundidad. Solo quisiera hablar ahora de los cambios que estoy viviendo en mi entorno de trabajo.</p><p>Por un lado, todos aquellos proyectos innovadores en los que estaba implicado han sido cancelados o aminorados por los nuevos gestores. Como primera consecuencia de ello, han quedado sin uso todos mis programas hechos en python con los que extraía la información que necesitaba la dirección para la toma de decisiones (<abbr title=\" \"Management Information System\" - \"Sistema de información gerencial (SIG)\"\">MIS</abbr>). Confío que algún día vuelva a interesar el <em>estado real</em> de la administración donde trabajo, aunque sospecho que para entonces será demasiado tarde.</p><p>Se puede afirmar que ahora mismo ya no programo en python. Por si fuera poco, a ésto hay que añadir la cantidad de proyectos que se nos están quedando huérfanos por no poder renovar su mantenimiento o, simplemente, por quebrar y desaparecer las empresas que los llevaban. Todos estos proyectos están cayendo en mi bandeja de tareas pendientes, con lo que ahora he tenido que volver a programar en lenguajes que creía olvidados como Visual Basic, TSQL o PHP. Un gran paso atrás del que no veo que podamos salir en bastantes años.</p><p>Por este motivo, cuando un grupo de entusiastas programadores españoles de python unieron esfuerzos para crear una <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\">asociación</a> con la que montar la primera <a href=\"http://www.es.pycon.org/\" title=\"PyCon España\"><strong>PyCon</strong> española</a>, no he podido dejar de pensar lo lejos que estoy en estos momentos de considerarme <em>&#8220;programador python&#8221;</em>. Se me incluyó en un principio entre los <em>&#8220;socios fundadores&#8221;</em> de la asociación, supongo que debido a mi labor en la lista de <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a> todos estos años. Pero pienso que un socio fundador debe ser una especie de socio <em>&#8220;compromisario&#8221;</em> que trabaje duro para hacer viable la asociación, sobre todo en sus inicios más difíciles. En estos momentos, no me veo capaz de algo así, ni siquiera de mostrar el más mínimo entusiasmo. Por éso mismo, he preferido declinar el ofrecimiento y figurar como un socio más, a pesar de haber podido disgustar a más de uno.</p><p>Como puntilla a lo dicho, últimamente estoy dedicando todo mi tiempo disponible al estudio del lenguaje <a href=\"http://www.scala-lang.org/\">scala</a>. Además de reconciliarme con la programación funcional, me ha hecho férreo defensor del tipado estático frente al tipado dinámico que usa python. No quiero decir de ninguna manera que abandone python, pero preveo que este año lo dedicaré a convertirme en experto programador de scala. Definitivamente, no encajo preparando la PyCon. Mis disculpas por ello.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2013/02/19/estado-de-situacion/feed/") (slash:comments nil "4"))) ("Pruebas básicas de python (y scala)" "<p>Como continuación del artículo <a href=\"http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/\" title=\"Cómo contratar un programador de python\">“Cómo contratar a un programador de python”</a> voy a dar las soluciones a algunas de las pruebas básicas que comentaba del proceso de selección. Añado también las soluciones sobre cómo sería con <em>scala</em> y de paso comparamos ambos lenguajes<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p><h2>Prueba del “Hello, World!”</h2><p>Desde que se inventó el lenguaje C, la prueba del <code>\"Hello, World!\"</code> es la prueba que inicialmente caracteriza a un lenguaje. Y en python sería:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span></div></div><p>Lo que hay que saber es que este código no funciona en python3 y será lo primero que te pregunte el seleccionador. En python3, el comando <code>print</code> se convierte en una función, por lo que se debe añadir los paréntesis:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: black;\">)</span></div></div><p>Con esta introducción, el seleccionador te puede preguntar alguna cosa más sobre el comando <code>print</code>, como si se puede usar con cualquier objeto o si se puede sacar fácilmente una salida tabulada.</p><p>En scala, la respuesta también es simple:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">println<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: #F78811;\">)</span></div></div><p><code>println</code> es una función, como es lógico al tratarse de un <em>lenguaje funcional</em>. Un seleccionador te puede preguntar por el sufijo <code>ln</code>, que no es otra cosa que añadir un salto de línea en la salida. Este código es equivalente a:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">print<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!<span style=\"color: #0000ff; font-weight: bold;\">\\n</span>&quot;</span><span style=\"color: #F78811;\">)</span></div></div><p>Se puede ver al final una expresión de escape que representa al salto de línea, universalmente aceptada por un buen número de lenguajes (python incluído).</p><h2>Detector de palíndromos</h2><p>Un palíndromo sería una frase que resulta igual leída del principio al final, que del final al principio. Algunos ejemplos:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">A man, a plan, a canal: Panama!<br />
Dábale arroz a la zorra el Abad</div></div><p>Para hacer un detector de palíndromos en python tenemos que hacer una función que lo primero que haga sea filtrar todos los espacios en blancos y los signos de puntuación de la frase, convertir todas las letras a minúsculas (o mayúsculas) y comprobar luego si la frase es igual en un sentido y otro:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> isPalindrome<span style=\"color: black;\">(</span>frase<span style=\"color: black;\">)</span>:<br />
&nbsp; &nbsp; frase_limpia<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span>c.<span style=\"color: black;\">lower</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span><span style=\"color: #ff7700;font-weight:bold;\">from</span> c <span style=\"color: #ff7700;font-weight:bold;\">in</span> frase <span style=\"color: #ff7700;font-weight:bold;\">if</span> c<span style=\"color: #66cc66;\">&gt;=</span><span style=\"color: #483d8b;\">&quot;A&quot;</span><span style=\"color: black;\">]</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> frase_limpia<span style=\"color: #66cc66;\">==</span>frase_limpia.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span></div></div><p>Como primera aproximación puede valer. Se filtra la frase para que sólo aparezcan letras (<code>c&gt;=\"A\"</code>), quitando espacios y signos de puntuación. También se ha convertido a minúsculas con <code>c.lower()</code> para hacer mejor la comparación. El problema es que no convierte las vocales con tilde a vocales sin tilde, con lo que el palíndromo <em>“Dábale arroz a la zorra el Abad”</em> no lo va a detectar bien. El <em>“candidato”</em> debe darse cuenta de ello e intentar explicar algún modo de resolverlo (cuya resolución completa quedaría fuera de la prueba real y del presente artículo<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>).</p><p>En scala sería algo así:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">(</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">{</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">=</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">(</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">)</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">==</span>frase<span style=\"color: #000080;\">_</span>limpia.<span style=\"color: #000000;\">reverse</span><br /><span style=\"color: #F78811;\">}</span></div></div><p>Aquí todas las operaciones se han hecho con el tipo <code>String</code>, sin necesidad de pasar a una lista como en python. La última sentencia de la función será el resultado que devuelve la función. En sí, esta función sería correcta, pero usar una variable intermedia como <code>frase_limpia</code> para guardar un estado intermedio va en contra de la filosofía de la programación funcional. Un programa funcional <em>intenta retrasar todo lo que se pueda la evaluación del resultado con el fin de evitar posibles efectos colaterales</em>. Lo ideal sería que sólo se hiciera la <em>evaluación</em> en la última sentencia de la función.</p><p>Una forma de hacerlo más <em>“funcional”</em>:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">(</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">{</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> f<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">(</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> g<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">(</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">=&gt;</span>s.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">(</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">)</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">(</span>f compose g<span style=\"color: #F78811;\">)</span><span style=\"color: #F78811;\">(</span>frase<span style=\"color: #F78811;\">)</span><br /><span style=\"color: #F78811;\">}</span></div></div><p>…o todo junto en una línea:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">(</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">(</span><span style=\"color: #F78811;\">(</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">)</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><span style=\"color: #F78811;\">)</span><span style=\"color: #F78811;\">(</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">(</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">)</span>.<span style=\"color: #000000;\">toLowerCase</span><span style=\"color: #F78811;\">)</span></div></div><h2>Expresión regular para encontrar teléfonos en un texto</h2><p>Lo más simple es buscar 9 dígitos seguidos y sin espacios: <code>\"\\d{9}\"</code></p><p>El examinador probablemente quiera que te esfuerces algo más. Te puede decir que esa expresión no sirve para localizar teléfonos como el <code>+34 666 010101</code> y quiere saber cómo se podría hacer. La cosa se complica bastante, aunque no es imposible. En este momento NUNCA digas que haría falta leerse bien la documentación y que tendrías que investigar un poco, suena muy mal. Lo de <em>investigar</em> da la idea que vas a buscar una solución por internet, que acabarás en un blog como éste y que vas a copiarte la solución sin siquiera leer cómo funciona.</p><p>Más vale que busques otra alternativa, aunque sea sin usar expresiones regulares. Lo que realmente interesa al entrevistador es que tengas ideas propias y originales que se puedan aplicar para resolver el problema que se te plantea.</p><p>A continuación pongo una posible solución, aunque te aconsejo que la estudies antes de aplicarla literalmente a tu código:</p><pre><code>    \"((\\+34 )?\\d{3} ?\\d{6})\"
</code></pre><h2>Una conversión de lista de tuplas a diccionario</h2><p>Este es uno de esos casos que cuesta más explicar el problema que su solución. Se pretende ver si el candidato comprende realmente los conceptos que se tratan, si sabe lo que es una tupla y un diccionario, y si tiene claro el concepto de <em>“mapping”</em> por el cuál se contruye el diccionario.</p><p>La solución empieza por poner en dependencia el segundo elemento del primero:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">)</span><span style=\"color: black;\">]</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">(</span>lista<span style=\"color: black;\">)</span></div></div><p>En scala es muy parecido:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">(</span><span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">)</span>,<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">2</span><span style=\"color: #F78811;\">)</span>,<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">)</span><span style=\"color: #F78811;\">)</span><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista.<span style=\"color: #000000;\">toMap</span></div></div><p>Por complicarlo algo más, se puede pedir que se repita el ejercicio, pero con tuplas de más de dos elementos, con el primero como clave del <em>mapping</em>:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">)</span><span style=\"color: black;\">]</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">(</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">]</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">]</span><span style=\"color: black;\">)</span><span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista<span style=\"color: black;\">)</span></div></div><p>En scala es algo más complicado. Lo que en python se entiende por tupla (una secuencia inmutable), en scala son en realidad las listas. Las listas mutables, como se entienden en python, son instancias de la clase <code>MutableList</code>. Las tuplas de scala se usan para paso de parámetros y poco más:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">(</span>List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">)</span>,List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">)</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">)</span><span style=\"color: #F78811;\">)</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">{</span>x <span style=\"color: #000080;\">=&gt;</span> x.<span style=\"color: #000000;\">head</span>-<span style=\"color: #000080;\">&gt;</span>x.<span style=\"color: #000000;\">tail</span><span style=\"color: #F78811;\">}</span> toMap</div></div><p>Aquí se ve el uso de los atributos <code>head</code> y <code>tail</code> para manejar listas que son tan característicos de los lenguajes funcionales.</p><p>Las últimas versiones de Scala incorporan la “comparación de patrones” (<em>“pattern matching”</em>) que consiguen hacer algo más legible el código:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">{</span><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<span style=\"color: #F78811;\">}</span> toMap</div></div><p>No parece que haya variado mucho. La potencia de los patrones está en poder realizar distintas operaciones según el tipo de los parámetros. En otros lenguajes se necesitaría incorporar expresiones condicionales o sobrecarga de operadores.</p><p>Por ejemplo, imagina que la lista tuviera elementos extra como cadenas y números:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">(</span>List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">)</span>,List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">)</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">(</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">)</span>,List<span style=\"color: #F78811;\">(</span><span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span>,<span style=\"color: #F78811;\">4</span>,<span style=\"color: #F78811;\">5</span><span style=\"color: #F78811;\">)</span>,List<span style=\"color: #F78811;\">(</span><span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">)</span>, <span style=\"color: #6666FF;\">&quot;Hola&quot;</span>, <span style=\"color: #F78811;\">1.5</span><span style=\"color: #F78811;\">)</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista collect <span style=\"color: #F78811;\">{</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> s<span style=\"color: #000080;\">:</span>String <span style=\"color: #000080;\">=&gt;</span> s-<span style=\"color: #000080;\">&gt;</span>List<span style=\"color: #F78811;\">(</span><span style=\"color: #F78811;\">)</span><br />
&nbsp; &nbsp;<span style=\"color: #F78811;\">}</span> toMap</div></div><p>Vemos el resultado:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">//for((k,v)&lt;-dic) println(k,v)<br />
(Hola,List())<br />
(1,List())<br />
(a,List(1, 2, 3))<br />
(b,List(10, 20, 30))<br />
(c,List(100, 200, 300))</div></div><p>En el primer patrón, <code>h::t</code> (llamado de <em>extracción de lista</em>), sólo encajarán los items que son listas; en el segundo patrón <code>s:String</code> sólo encaja la <code>String \"Hola\"</code>; mientras que el último elemento de la lista, el <code>double 1.5</code>, no coincide con ningún patrón y será filtrado por el método <code>collect</code>.</p><p>Si intentamos hacer lo mismo con python nos saldría un código bastante menos legible:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">[</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">)</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;Hola&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1.5</span><span style=\"color: black;\">]</span><br /><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">(</span><span style=\"color: black;\">(</span><span style=\"color: black;\">(</span>x<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">]</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">[</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">]</span><span style=\"color: black;\">)</span><span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">(</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">tuple</span><span style=\"color: black;\">)</span><span style=\"color: #ff7700;font-weight:bold;\">else</span><span style=\"color: black;\">(</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista <span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">(</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">(</span><span style=\"color: #008000;\">tuple</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">basestring</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span><span style=\"color: black;\">)</span></div></div><h2>Conclusión</h2><p>Con estos ejemplos tan sólo he querido darte una idea de qué cosas podemos encontrarnos en una prueba de selección. En programación, debería interesar más la capacidad resolutiva del <em>candidato</em> que su nivel de conocimientos. Una solución innovadora o que aporte otro punto de vista no contemplado en un principio suele ser de más valor que dar la solución correcta. Busca distintos ejemplos de resolver los mismos problemas, incluso en lenguajes de programación diferentes, y estarás preparado para todo reto que se te presente.</p><hr /><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Si te preguntas porqué <em>scala</em>, la respuesta simple sería
<em>porque es el lenguaje que estoy aprendiendo ahora mismo</em>. Pero si realmente te preguntas qué puede aprender un programador python de un lenguaje como scala, no te pierdas el próximo artículo. <a href=\"#fnref:1\" rev=\"footnote\">↩</a></p></li><li id=\"fn:2\"><p>Busca en la lista <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a> <a href=\"#fnref:2\" rev=\"footnote\">↩</a></p></li></ol></div>" "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/" (20617 25330) new 8 nil nil ((title nil "Pruebas básicas de python (y scala)") (link nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/") (comments nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/#comments") (pubDate nil "Thu, 25 Oct 2012 16:04:02 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (category nil "Scala") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=457") (description nil "Como continuación del artículo &#8220;Cómo contratar a un programador de python&#8221; voy a dar las soluciones a algunas de las pruebas básicas que comentaba del proceso de selección. Añado también las soluciones sobre cómo sería con scala y de paso comparamos ambos lenguajes1. Prueba del &#8220;Hello, World!&#8221; Desde que se inventó el lenguaje C, la [...]") (content:encoded nil "<p>Como continuación del artículo <a href=\"http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/\" title=\"Cómo contratar un programador de python\">&#8220;Cómo contratar a un programador de python&#8221;</a> voy a dar las soluciones a algunas de las pruebas básicas que comentaba del proceso de selección. Añado también las soluciones sobre cómo sería con <em>scala</em> y de paso comparamos ambos lenguajes<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p><h2>Prueba del &#8220;Hello, World!&#8221;</h2><p>Desde que se inventó el lenguaje C, la prueba del <code>\"Hello, World!\"</code> es la prueba que inicialmente caracteriza a un lenguaje. Y en python sería:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span></div></div><p>Lo que hay que saber es que este código no funciona en python3 y será lo primero que te pregunte el seleccionador. En python3, el comando <code>print</code> se convierte en una función, por lo que se debe añadir los paréntesis:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: black;\">&#41;</span></div></div><p>Con esta introducción, el seleccionador te puede preguntar alguna cosa más sobre el comando <code>print</code>, como si se puede usar con cualquier objeto o si se puede sacar fácilmente una salida tabulada.</p><p>En scala, la respuesta también es simple:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">println<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!&quot;</span><span style=\"color: #F78811;\">&#41;</span></div></div><p><code>println</code> es una función, como es lógico al tratarse de un <em>lenguaje funcional</em>. Un seleccionador te puede preguntar por el sufijo <code>ln</code>, que no es otra cosa que añadir un salto de línea en la salida. Este código es equivalente a:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">print<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;¡Hola, Mundo!<span style=\"color: #0000ff; font-weight: bold;\">\\n</span>&quot;</span><span style=\"color: #F78811;\">&#41;</span></div></div><p>Se puede ver al final una expresión de escape que representa al salto de línea, universalmente aceptada por un buen número de lenguajes (python incluído).</p><h2>Detector de palíndromos</h2><p>Un palíndromo sería una frase que resulta igual leída del principio al final, que del final al principio. Algunos ejemplos:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">A man, a plan, a canal: Panama!<br />
Dábale arroz a la zorra el Abad</div></div><p>Para hacer un detector de palíndromos en python tenemos que hacer una función que lo primero que haga sea filtrar todos los espacios en blancos y los signos de puntuación de la frase, convertir todas las letras a minúsculas (o mayúsculas) y comprobar luego si la frase es igual en un sentido y otro:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> isPalindrome<span style=\"color: black;\">&#40;</span>frase<span style=\"color: black;\">&#41;</span>:<br />
&nbsp; &nbsp; frase_limpia<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span>c.<span style=\"color: black;\">lower</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">from</span> c <span style=\"color: #ff7700;font-weight:bold;\">in</span> frase <span style=\"color: #ff7700;font-weight:bold;\">if</span> c<span style=\"color: #66cc66;\">&gt;=</span><span style=\"color: #483d8b;\">&quot;A&quot;</span><span style=\"color: black;\">&#93;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">return</span> frase_limpia<span style=\"color: #66cc66;\">==</span>frase_limpia.<span style=\"color: black;\">reverse</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span></div></div><p>Como primera aproximación puede valer. Se filtra la frase para que sólo aparezcan letras (<code>c&gt;=\"A\"</code>), quitando espacios y signos de puntuación. También se ha convertido a minúsculas con <code>c.lower()</code> para hacer mejor la comparación. El problema es que no convierte las vocales con tilde a vocales sin tilde, con lo que el palíndromo <em>&#8220;Dábale arroz a la zorra el Abad&#8221;</em> no lo va a detectar bien. El <em>&#8220;candidato&#8221;</em> debe darse cuenta de ello e intentar explicar algún modo de resolverlo (cuya resolución completa quedaría fuera de la prueba real y del presente artículo<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>).</p><p>En scala sería algo así:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">=</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; frase<span style=\"color: #000080;\">_</span>limpia<span style=\"color: #000080;\">==</span>frase<span style=\"color: #000080;\">_</span>limpia.<span style=\"color: #000000;\">reverse</span><br /><span style=\"color: #F78811;\">&#125;</span></div></div><p>Aquí todas las operaciones se han hecho con el tipo <code>String</code>, sin necesidad de pasar a una lista como en python. La última sentencia de la función será el resultado que devuelve la función. En sí, esta función sería correcta, pero usar una variable intermedia como <code>frase_limpia</code> para guardar un estado intermedio va en contra de la filosofía de la programación funcional. Un programa funcional <em>intenta retrasar todo lo que se pueda la evaluación del resultado con el fin de evitar posibles efectos colaterales</em>. Lo ideal sería que sólo se hiciera la <em>evaluación</em> en la última sentencia de la función.</p><p>Una forma de hacerlo más <em>&#8220;funcional&#8221;</em>:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> f<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> g<span style=\"color: #000080;\">=</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">&#40;</span>f compose g<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #F78811;\">&#41;</span><br /><span style=\"color: #F78811;\">&#125;</span></div></div><p>&#8230;o todo junto en una línea:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">def</span></a> isPalindrome<span style=\"color: #F78811;\">&#40;</span>frase<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">:</span>Boolean<span style=\"color: #000080;\">=</span><br />
&nbsp; &nbsp; <span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#40;</span>s<span style=\"color: #000080;\">:</span>String<span style=\"color: #F78811;\">&#41;</span><span style=\"color: #000080;\">=&gt;</span>s<span style=\"color: #000080;\">==</span>s.<span style=\"color: #000000;\">reverse</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#40;</span>frase.<span style=\"color: #000000;\">filter</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #000080;\">_&gt;=</span><span style=\"color: #6666FF;\">'A'</span><span style=\"color: #F78811;\">&#41;</span>.<span style=\"color: #000000;\">toLowerCase</span><span style=\"color: #F78811;\">&#41;</span></div></div><h2>Expresión regular para encontrar teléfonos en un texto</h2><p>Lo más simple es buscar 9 dígitos seguidos y sin espacios: <code>\"\\d{9}\"</code></p><p>El examinador probablemente quiera que te esfuerces algo más. Te puede decir que esa expresión no sirve para localizar teléfonos como el <code>+34 666 010101</code> y quiere saber cómo se podría hacer. La cosa se complica bastante, aunque no es imposible. En este momento NUNCA digas que haría falta leerse bien la documentación y que tendrías que investigar un poco, suena muy mal. Lo de <em>investigar</em> da la idea que vas a buscar una solución por internet, que acabarás en un blog como éste y que vas a copiarte la solución sin siquiera leer cómo funciona.</p><p>Más vale que busques otra alternativa, aunque sea sin usar expresiones regulares. Lo que realmente interesa al entrevistador es que tengas ideas propias y originales que se puedan aplicar para resolver el problema que se te plantea.</p><p>A continuación pongo una posible solución, aunque te aconsejo que la estudies antes de aplicarla literalmente a tu código:</p><pre><code>    \"((\\+34 )?\\d{3} ?\\d{6})\"
</code></pre><h2>Una conversión de lista de tuplas a diccionario</h2><p>Este es uno de esos casos que cuesta más explicar el problema que su solución. Se pretende ver si el candidato comprende realmente los conceptos que se tratan, si sabe lo que es una tupla y un diccionario, y si tiene claro el concepto de <em>&#8220;mapping&#8221;</em> por el cuál se contruye el diccionario.</p><p>La solución empieza por poner en dependencia el segundo elemento del primero:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span>lista<span style=\"color: black;\">&#41;</span></div></div><p>En scala es muy parecido:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">&#41;</span>,<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">2</span><span style=\"color: #F78811;\">&#41;</span>,<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#41;</span><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista.<span style=\"color: #000000;\">toMap</span></div></div><p>Por complicarlo algo más, se puede pedir que se repita el ejercicio, pero con tuplas de más de dos elementos, con el primero como clave del <em>mapping</em>:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#93;</span><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista<span style=\"color: black;\">&#41;</span></div></div><p>En scala es algo más complicado. Lo que en python se entiende por tupla (una secuencia inmutable), en scala son en realidad las listas. Las listas mutables, como se entienden en python, son instancias de la clase <code>MutableList</code>. Las tuplas de scala se usan para paso de parámetros y poco más:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">&#41;</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">&#41;</span><span style=\"color: #F78811;\">&#41;</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">&#123;</span>x <span style=\"color: #000080;\">=&gt;</span> x.<span style=\"color: #000000;\">head</span>-<span style=\"color: #000080;\">&gt;</span>x.<span style=\"color: #000000;\">tail</span><span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>Aquí se ve el uso de los atributos <code>head</code> y <code>tail</code> para manejar listas que son tan característicos de los lenguajes funcionales.</p><p>Las últimas versiones de Scala incorporan la &#8220;comparación de patrones&#8221; (<em>&#8220;pattern matching&#8221;</em>) que consiguen hacer algo más legible el código:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista map <span style=\"color: #F78811;\">&#123;</span><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>No parece que haya variado mucho. La potencia de los patrones está en poder realizar distintas operaciones según el tipo de los parámetros. En otros lenguajes se necesitaría incorporar expresiones condicionales o sobrecarga de operadores.</p><p>Por ejemplo, imagina que la lista tuviera elementos extra como cadenas y números:</p><div class=\"codecolorer-container scala dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"scala codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> lista<span style=\"color: #000080;\">=</span>List<span style=\"color: #F78811;\">&#40;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;a&quot;</span>,<span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;b&quot;</span>,<span style=\"color: #F78811;\">10</span>,<span style=\"color: #F78811;\">20</span>,<span style=\"color: #F78811;\">30</span><span style=\"color: #F78811;\">&#41;</span>,<br />
&nbsp; List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #6666FF;\">&quot;c&quot;</span>,<span style=\"color: #F78811;\">100</span>,<span style=\"color: #F78811;\">200</span>,<span style=\"color: #F78811;\">300</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">1</span>,<span style=\"color: #F78811;\">2</span>,<span style=\"color: #F78811;\">3</span>,<span style=\"color: #F78811;\">4</span>,<span style=\"color: #F78811;\">5</span><span style=\"color: #F78811;\">&#41;</span>,List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">1</span><span style=\"color: #F78811;\">&#41;</span>, <span style=\"color: #6666FF;\">&quot;Hola&quot;</span>, <span style=\"color: #F78811;\">1.5</span><span style=\"color: #F78811;\">&#41;</span><br /><br /><a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">val</span></a> dic<span style=\"color: #000080;\">=</span>lista collect <span style=\"color: #F78811;\">&#123;</span><br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> h<span style=\"color: #000080;\">::</span>t <span style=\"color: #000080;\">=&gt;</span> h-<span style=\"color: #000080;\">&gt;</span>t<br />
&nbsp; &nbsp; <a href=\"http://scala-lang.org\"><span style=\"color: #0000ff; font-weight: bold;\">case</span></a> s<span style=\"color: #000080;\">:</span>String <span style=\"color: #000080;\">=&gt;</span> s-<span style=\"color: #000080;\">&gt;</span>List<span style=\"color: #F78811;\">&#40;</span><span style=\"color: #F78811;\">&#41;</span><br />
&nbsp; &nbsp;<span style=\"color: #F78811;\">&#125;</span> toMap</div></div><p>Vemos el resultado:</p><div class=\"codecolorer-container text dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"text codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">//for((k,v)&lt;-dic) println(k,v)<br />
(Hola,List())<br />
(1,List())<br />
(a,List(1, 2, 3))<br />
(b,List(10, 20, 30))<br />
(c,List(100, 200, 300))</div></div><p>En el primer patrón, <code>h::t</code> (llamado de <em>extracción de lista</em>), sólo encajarán los items que son listas; en el segundo patrón <code>s:String</code> sólo encaja la <code>String \"Hola\"</code>; mientras que el último elemento de la lista, el <code>double 1.5</code>, no coincide con ningún patrón y será filtrado por el método <code>collect</code>.</p><p>Si intentamos hacer lo mismo con python nos saldría un código bastante menos legible:</p><div class=\"codecolorer-container python dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"python codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">lista<span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;a&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">3</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;b&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">20</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">30</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #483d8b;\">&quot;c&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">100</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">200</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">300</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #483d8b;\">&quot;Hola&quot;</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">1.5</span><span style=\"color: black;\">&#93;</span><br /><br />
dic<span style=\"color: #66cc66;\">=</span><span style=\"color: #008000;\">dict</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span>x<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span>:<span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">tuple</span><span style=\"color: black;\">&#41;</span><span style=\"color: #ff7700;font-weight:bold;\">else</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><br />
&nbsp; &nbsp; <span style=\"color: #ff7700;font-weight:bold;\">for</span> x <span style=\"color: #ff7700;font-weight:bold;\">in</span> lista <span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: #008000;\">isinstance</span><span style=\"color: black;\">&#40;</span>x<span style=\"color: #66cc66;\">,</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">tuple</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">basestring</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span></div></div><h2>Conclusión</h2><p>Con estos ejemplos tan sólo he querido darte una idea de qué cosas podemos encontrarnos en una prueba de selección. En programación, debería interesar más la capacidad resolutiva del <em>candidato</em> que su nivel de conocimientos. Una solución innovadora o que aporte otro punto de vista no contemplado en un principio suele ser de más valor que dar la solución correcta. Busca distintos ejemplos de resolver los mismos problemas, incluso en lenguajes de programación diferentes, y estarás preparado para todo reto que se te presente.</p><hr /><div class=\"footnotes\"><hr /><ol><li id=\"fn:1\"><p>Si te preguntas porqué <em>scala</em>, la respuesta simple sería 
<em>porque es el lenguaje que estoy aprendiendo ahora mismo</em>. Pero si realmente te preguntas qué puede aprender un programador python de un lenguaje como scala, no te pierdas el próximo artículo.&#160;<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li><li id=\"fn:2\"><p>Busca en la lista <a href=\"http://mail.python.org/mailman/listinfo/python-es\">python-es</a>&#160;<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li></ol></div>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/25/pruebas-basicas-de-python-y-scala/feed/") (slash:comments nil "0"))) ("Entornos virtuales en python 3.3" "<p>Con la <a href=\"http://docs.python.org/3.3/whatsnew/3.3.html\" title=\"What's new in python 3.3?\">nueva versión de python 3.3</a> se ha incorporado la propuesta <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a> que añade al repertorio interno de python la posibilidad de crear entornos virtuales de modo parecido a virtualenv (vimos esta herramienta hace poco al hablar de la <a href=\"http://ch3m4.org/blog/2012/07/24/instalacion-de-modulos/\">instalación de módulos</a>.</p><p>Tal como lo define <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a>: <em>“Los <em>entornos virtuales</em> poseen su propio conjunto de paquetes instalados localmente, segregados del resto de paquetes instalados del sistema”</em>. Para crear y administrar estos entornos virtuales, se incluye el módulo <code>venv</code>, así como el script <code>pyvenv.py</code>.</p><p>Para crear un entorno virtual se puede utilizar el script <code>pyvenv</code> (con python 3.3):</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>pyvenv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>En windows, probablemente haya que ejecutar el script que se encuentra en <code>\"C:\\&gt; Python33\\Tools\\Scripts\\pyvenv.py\"</code>. Posiblemente sea más sencillo ejecutar directamente el módulo <code>venv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>python <span style=\"color: #660033;\">-m</span> venv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>Entrando dentro del nuevo directorio, activamos el entorno de modo similar a como hacíamos con <code>virtualenv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">$ <span style=\"color: #7a0874; font-weight: bold;\">cd</span><span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual<br />
$ <span style=\"color: #7a0874; font-weight: bold;\">source</span> bin<span style=\"color: #000000; font-weight: bold;\">/</span>activate</div></div><p>Hay que notar que el script <code>activate</code> se debe ejecutar con <code>source</code> ya que necesita cambiar algunas variables del entorno de ejecución actual.</p><p>En windows, se debe ejecutar el script <code>Scripts\\activate.bat</code>.</p><div class=\"codecolorer-container powershell dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"powershell codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">C:\\<span style=\"color: pink;\">&gt;</span><span style=\"color: #008080; font-weight: bold;\">cd</span> entorno_virtual<br />
C:\\<span style=\"color: pink;\">&gt;</span> Scripts\\activate.bat</div></div><p>Una vez activado el entorno veremos que el prompt de la línea de comandos ha cambiado para indicarnos que estamos dentro. Las variables de entorno han cambiado, como puedes comprobar si miras <code>$PATH</code>. A partir de aquí, la instalación de paquetes con <code>easy_install</code> o <code>pip</code> se realizarán dentro del entorno. A diferencia con <code>virtualenv</code>, el módulo <code>venv</code> no instala en nuestro entorno ninguna de estas herramientas, por lo que lo primero que tendremos que hacer será instalarlas:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #7a0874; font-weight: bold;\">(</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">)</span> $ curl <span style=\"color: #660033;\">-O</span> http:<span style=\"color: #000000; font-weight: bold;\">//</span>python-distribute.org<span style=\"color: #000000; font-weight: bold;\">/</span>distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">(</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">)</span> $ python distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">(</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">)</span> $ easy_install pip</div></div><p>Para desactivar el entorno se ejecuta <code>deactivate</code>.</p><p>Aunque <code>venv</code> sigue el mismo funcionamiento que <code>virtualenv</code>, tiene notables carencias:</p><ul><li><p>No permite configurar versiones distintas de python</p></li><li><p>No replica la instalación python del sistema en la copia local</p></li><li><p>No permite independizar el entorno virtual del la ruta donde se crea (<em>no relocatable</em>)</p></li></ul><p>En definitiva, los entornos virtuales creados con <code>venv</code> no son completamente independientes de la instalación python del sistema como sí puede hacer <code>virtualenv</code>. Esperemos que se amplien las opciones con nuevas versiones de python. De momento, seguiremos con <code>virtualenv</code>.</p>" "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/" (20614 63204) new 9 nil nil ((title nil "Entornos virtuales en python 3.3") (link nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/") (comments nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/#comments") (pubDate nil "Tue, 23 Oct 2012 19:58:28 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=452") (description nil "Con la nueva versión de python 3.3 se ha incorporado la propuesta PEP-405 que añade al repertorio interno de python la posibilidad de crear entornos virtuales de modo parecido a virtualenv (vimos esta herramienta hace poco al hablar de la instalación de módulos. Tal como lo define PEP-405: &#8220;Los entornos virtuales poseen su propio conjunto [...]") (content:encoded nil "<p>Con la <a href=\"http://docs.python.org/3.3/whatsnew/3.3.html\" title=\"What's new in python 3.3?\">nueva versión de python 3.3</a> se ha incorporado la propuesta <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a> que añade al repertorio interno de python la posibilidad de crear entornos virtuales de modo parecido a virtualenv (vimos esta herramienta hace poco al hablar de la <a href=\"http://ch3m4.org/blog/2012/07/24/instalacion-de-modulos/\">instalación de módulos</a>.</p><p>Tal como lo define <a href=\"http://www.python.org/dev/peps/pep-0405\" title=\"PEP-0405 Python Virtual Environments\">PEP-405</a>: <em>&#8220;Los <em>entornos virtuales</em> poseen su propio conjunto de paquetes instalados localmente, segregados del resto de paquetes instalados del sistema&#8221;</em>. Para crear y administrar estos entornos virtuales, se incluye el módulo <code>venv</code>, así como el script <code>pyvenv.py</code>.</p><p>Para crear un entorno virtual se puede utilizar el script <code>pyvenv</code> (con python 3.3):</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>pyvenv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>En windows, probablemente haya que ejecutar el script que se encuentra en <code>\"C:\\&gt; Python33\\Tools\\Scripts\\pyvenv.py\"</code>. Posiblemente sea más sencillo ejecutar directamente el módulo <code>venv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #666666;\">$ </span>python <span style=\"color: #660033;\">-m</span> venv <span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual</div></div><p>Entrando dentro del nuevo directorio, activamos el entorno de modo similar a como hacíamos con <code>virtualenv</code>:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">$ <span style=\"color: #7a0874; font-weight: bold;\">cd</span><span style=\"color: #000000; font-weight: bold;\">/</span>ruta<span style=\"color: #000000; font-weight: bold;\">/</span>al<span style=\"color: #000000; font-weight: bold;\">/</span>nuevo<span style=\"color: #000000; font-weight: bold;\">/</span>entorno<span style=\"color: #000000; font-weight: bold;\">/</span>virtual<br />
$ <span style=\"color: #7a0874; font-weight: bold;\">source</span> bin<span style=\"color: #000000; font-weight: bold;\">/</span>activate</div></div><p>Hay que notar que el script <code>activate</code> se debe ejecutar con <code>source</code> ya que necesita cambiar algunas variables del entorno de ejecución actual.</p><p>En windows, se debe ejecutar el script <code>Scripts\\activate.bat</code>.</p><div class=\"codecolorer-container powershell dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"powershell codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\">C:\\<span style=\"color: pink;\">&gt;</span><span style=\"color: #008080; font-weight: bold;\">cd</span> entorno_virtual<br />
C:\\<span style=\"color: pink;\">&gt;</span> Scripts\\activate.bat</div></div><p>Una vez activado el entorno veremos que el prompt de la línea de comandos ha cambiado para indicarnos que estamos dentro. Las variables de entorno han cambiado, como puedes comprobar si miras <code>$PATH</code>. A partir de aquí, la instalación de paquetes con <code>easy_install</code> o <code>pip</code> se realizarán dentro del entorno. A diferencia con <code>virtualenv</code>, el módulo <code>venv</code> no instala en nuestro entorno ninguna de estas herramientas, por lo que lo primero que tendremos que hacer será instalarlas:</p><div class=\"codecolorer-container bash dawn\" style=\"overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;\"><div class=\"bash codecolorer\" style=\"padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap\"><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ curl <span style=\"color: #660033;\">-O</span> http:<span style=\"color: #000000; font-weight: bold;\">//</span>python-distribute.org<span style=\"color: #000000; font-weight: bold;\">/</span>distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ python distribute_setup.py<br /><span style=\"color: #7a0874; font-weight: bold;\">&#40;</span>py3.3<span style=\"color: #7a0874; font-weight: bold;\">&#41;</span> $ easy_install pip</div></div><p>Para desactivar el entorno se ejecuta <code>deactivate</code>.</p><p>Aunque <code>venv</code> sigue el mismo funcionamiento que <code>virtualenv</code>, tiene notables carencias:</p><ul><li><p>No permite configurar versiones distintas de python</p></li><li><p>No replica la instalación python del sistema en la copia local</p></li><li><p>No permite independizar el entorno virtual del la ruta donde se crea (<em>no relocatable</em>)</p></li></ul><p>En definitiva, los entornos virtuales creados con <code>venv</code> no son completamente independientes de la instalación python del sistema como sí puede hacer <code>virtualenv</code>. Esperemos que se amplien las opciones con nuevas versiones de python. De momento, seguiremos con <code>virtualenv</code>.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/23/entornos-virtuales-en-python-3-3/feed/") (slash:comments nil "4"))) ("Cómo contratar un programador de python" "<p>En época de <em>crisis</em> se produce un curioso desequilibrio de las cosas. Por un lado, están los emprendedores que se arriesgan mucho más buscando productos innovadores con los que poder competir mejor, alejados de las tendencias impuestas por las grandes empresas del sector. Son las <em>startups</em>, surgidas como respuestas del estancamiento de la economía actual. Por contra, la crisis también nos obliga a deshacernos de todo aquello que se salga de la norma, siguiendo el dictado de recortes indiscriminados, persiguiendo no se sabe bién qué fines. Al final se consigue mermar la creatividad, a costa de imponer la mediocridad en todo lo que se hace.</p><p>Centrándonos en la programación python, es paradójico que en estos momentos la carencia de programadores python esté siendo una de las razones que impida crecer a algunas pequeñas empresas. Empresas que podrían ambicionar a tener un equipo de desarrollo acorde a la demanda que están teniendo, terminan por orientar su negocio a las adaptaciones para uno o dos clientes importantes, abandonando la mejora del producto en manos de la comunidad de software libre que lo crea interesante.</p><p>Antes de seguir, habría que precisar a qué nos referimos cuando hablamos de <em>programadores python</em>. No basta con saber la sintáxis del lenguaje, del mismo modo que no es suficiente saber coser para ser cirujano. Se está buscando un perfil concreto de programador, capaz de dar soluciones creativas e ingeniosas, y que sea capaz de expresarlas como código python al resto del equipo de desarrolladores.</p><p>Si te estás preguntándo si tú encajarías en este perfil, o bien si te preguntas cómo se haría una de estas selecciones de <em>programadores python</em>, en este artículo pretendo dar una idea de las preguntas de un proceso de selección de este tipo, más pensado como <em>“filtrado”</em> de todo perfil no deseado que en ser una exhaustiva evaluación de conocimientos. En un próximo artículo pondré algunas soluciones a estas preguntas para que así tengas tiempo para reflexionar.</p><h2>1. Filtrado del simple “Hello, World!”</h2><p>Antes de perder más tiempo, lo primero es preguntar al candidato si realmente sabe de python. No son pocos los que acuden con la idea de que da igual que sea python que cualquiera de los otros lenguajes “populares” como <em>java</em> o <em>visual basic</em>. Por mucho que se insista en que tiene que ser un programador experimentado en python, muchas veces te encuentras que ni es python lo que sabe, ni tampoco es experimentado.</p><p>La prueba del “Hello, World!” en python debería ser la primera prueba para descartar a los oportunistas. Otra de las preguntas más elementales sería hablar del <em>“Zen de python”</em>, si no recitarlo entero, al menos una explicación de la regla <em>“Explicit is better than implicit”</em>.</p><h2>2. Preguntar por muestras de sus trabajos</h2><p>Todo programador que aprecie debe tener una colección de cosas en las que haya trabajado. No tienen que ser cosas asombrosas. Pueden ser simplemente aquellas muestras de saber dejadas por internet como ayuda a los demás, tal vez un perfil de <em>Stack Overflow</em> o de <em>Python Majibu</em> donde se pueda ver qué clase de comunicador y resolvedor de problemas eres. Tal vez algún repositorio de código abierto donde participes, un blog profesional, twitter,…</p><p>Simplemente, viendo la clase de trabajos que hace la gente resulta de mucha ayuda para saber en qué destaca o no un programador.</p><h2>3. Afín a la cultura de la empresa</h2><p>La experiencia dice que ser afín a la cultura de la empresa asegura mejores éxitos que el ser un monstruo programando. Un ejemplo común son las empresas de software libre cuando tienden a adoptar ciertas prácticas éticas entre sus empleados como es la de compartir todo el conocimiento.</p><p>Tratándose de python, un programador en este lenguaje tiende a adoptar un perfil muy característico. Busca como fin la sencillez y la elegancia del código, antes que la optimización y eficiencia del mismo. Intenta ser <em>“agnóstico”</em> frente a la plataforma, que el código funcione en (casi) cualquier sitio. Sin embargo, es ávido de conocer nuevas librerías que poder emplear en sus desarrollos, siempre con python como lenguaje director de la lógica de la aplicación.</p><p>Toda esta actividad se ve plasmada en las “comunidades” python, donde se proponen y discuten sobre estos temas. Destaca la comunidad de “python hispano” como un primer lugar donde buscar perfiles apropiados, pero también se puede acudir a otros foros locales como las comunidades de python en Argentina, Perú, México,… o a foros más especializados de django o zope.</p><p>Pero una empresa que se precie, que tenga un buen producto de código abierto que ofrecer, debería ser capaz de formar su propia comunidad como punto de encuentro de los afines al proyecto, que no son sólo programadores. Esta comunidad sirve tanto para difundir la filosofía de la empresa como ser el punto de encuentro del personal afín a ella. Lamentablemente, muchas empresas han creído que una comunidad se monta mediante el bombardeo publicitario y es así como han concebido sus cuentas en las redes sociales como facebook o twitter. De este modo han conseguido consumidores <em>fanáticos</em>, pero muy pocos colaboradores.</p><p>A un programador hay que darle código. Las comunidades de programadores se forman alrededor de servicios como los github, bitbucket, sourceforge, launchpad, trac, etc. Si encuentras en tu comunidad un programador que te ha hecho un gran aporte o un hacker que ha dado con una extraña y oculta vulnerabilidad, contrátalo sin más dubitaciones.</p><h2>4. Prueba de programación</h2><p>Lo siguiente es pedir la realización de algunos programas sencillos: un detector de palíndromos, crear una expresión regular para encontrar teléfonos en un texto, una conversión de una lista de tuplas a diccionario,…</p><p>Con la prueba de programación no se busca, necesariamente, una respuesta perfecta, si no el crear un contexto donde observar al programador en su compresión de los problemas, así cómo su intento de resolverlos. Dentro de las posibilidades, es una prueba que muy bien se podría hacer online, combinando videconferencia y pizarra virtual. Si saltaran demasiadas alarmas, al ser <em>online</em> se podría dar por terminada la prueba en cualquier momento y así ahorrar tiempo tanto al candidato como al seleccionador.</p><h2>5. Prueba real</h2><p>Antes de dar el paso definitivo, se puede probar al candidato sobre un caso real como resolver algún ticket del gestor de bugs o crear una extensión sencilla en un plazo determinado. Por supuesto, no debe ser ninguna parte importante, tan sólo un medio de comprobar si el candidato es capaz de cumplir los plazos establecidos para así no desequilibrar al resto del equipo.</p><p>Idealmente, sería bueno que esta labor se realizara en las mismas instalaciones de la empresa, con los recursos de la empresa y con un contrato en prácticas.</p><h2>6. Entrevista personal</h2><p>Habiendo pasando todos los puntos anteriores, es casi seguro que el candidato es apto para la empresa. La entrevista está orientada más en conocer el perfil comunicativo del candidato con vistas a su integración de un equipo de trabajo. La entrevista empieza por una presentación del candidato sobre su experiencia hasta el momento. A continuación, se le realizan una serie de preguntas encaminadas a conocer del candidato su apasionamiento por lo que hace, su capacidad para comunicarse en grupos pequeños y qué podría aportar dentro de un pequeño equipo de trabajo.</p><h2>7. Prueba de inglés</h2><p>Se quiera o no, el inglés es el idioma común del programador, y no sólo porque toda la documentación esté en inglés. Cualquier proyecto de envergadura debe usar el inglés si quiere llamar la atención y conseguir nuevos colaboradores, ya sea en internet como en presentaciones en congresos. También empieza a ser frecuente la creación de equipos multinacionales de desarrollo. El inglés es la <em>lingua franca</em> de nuestros tiempos y comunicarse en inglés es fundamental para ser programador. Al ser una prueba de comunicación, la prueba de inglés podría formar parte de la entrevista personal.</p><h2>8. Conclusión</h2><p>Si has leído hasta aquí, espero no haberte aburrido y/o decepcionado mucho. No espero que todo lo dicho sea tomado al pie de letra. Más que una lista de reglas para buscar candidatos, he pretendido que sirva más como consejos para programadores python que buscan trabajo, sepan cómo hacerlo y, sobre todo, que se animen a buscarlos. Si de paso se amplía el número de programadores profesionales de python, mejor todavía. Ganaremos todos.</p>" "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/" (20606 56602) new 10 nil nil ((title nil "Cómo contratar un programador de python") (link nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/") (comments nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/#comments") (pubDate nil "Wed, 17 Oct 2012 16:30:18 +0000") (dc:creator nil "Chema Cortés") (category nil "Python") (guid ((isPermaLink . "false")) "http://ch3m4.org/blog/?p=446") (description nil "En época de crisis se produce un curioso desequilibrio de las cosas. Por un lado, están los emprendedores que se arriesgan mucho más buscando productos innovadores con los que poder competir mejor, alejados de las tendencias impuestas por las grandes empresas del sector. Son las startups, surgidas como respuestas del estancamiento de la economía actual. [...]") (content:encoded nil "<p>En época de <em>crisis</em> se produce un curioso desequilibrio de las cosas. Por un lado, están los emprendedores que se arriesgan mucho más buscando productos innovadores con los que poder competir mejor, alejados de las tendencias impuestas por las grandes empresas del sector. Son las <em>startups</em>, surgidas como respuestas del estancamiento de la economía actual. Por contra, la crisis también nos obliga a deshacernos de todo aquello que se salga de la norma, siguiendo el dictado de recortes indiscriminados, persiguiendo no se sabe bién qué fines. Al final se consigue mermar la creatividad, a costa de imponer la mediocridad en todo lo que se hace.</p><p>Centrándonos en la programación python, es paradójico que en estos momentos la carencia de programadores python esté siendo una de las razones que impida crecer a algunas pequeñas empresas. Empresas que podrían ambicionar a tener un equipo de desarrollo acorde a la demanda que están teniendo, terminan por orientar su negocio a las adaptaciones para uno o dos clientes importantes, abandonando la mejora del producto en manos de la comunidad de software libre que lo crea interesante.</p><p>Antes de seguir, habría que precisar a qué nos referimos cuando hablamos de <em>programadores python</em>. No basta con saber la sintáxis del lenguaje, del mismo modo que no es suficiente saber coser para ser cirujano. Se está buscando un perfil concreto de programador, capaz de dar soluciones creativas e ingeniosas, y que sea capaz de expresarlas como código python al resto del equipo de desarrolladores.</p><p>Si te estás preguntándo si tú encajarías en este perfil, o bien si te preguntas cómo se haría una de estas selecciones de <em>programadores python</em>, en este artículo pretendo dar una idea de las preguntas de un proceso de selección de este tipo, más pensado como <em>&#8220;filtrado&#8221;</em> de todo perfil no deseado que en ser una exhaustiva evaluación de conocimientos. En un próximo artículo pondré algunas soluciones a estas preguntas para que así tengas tiempo para reflexionar.</p><h2>1. Filtrado del simple &#8220;Hello, World!&#8221;</h2><p>Antes de perder más tiempo, lo primero es preguntar al candidato si realmente sabe de python. No son pocos los que acuden con la idea de que da igual que sea python que cualquiera de los otros lenguajes &#8220;populares&#8221; como <em>java</em> o <em>visual basic</em>. Por mucho que se insista en que tiene que ser un programador experimentado en python, muchas veces te encuentras que ni es python lo que sabe, ni tampoco es experimentado.</p><p>La prueba del &#8220;Hello, World!&#8221; en python debería ser la primera prueba para descartar a los oportunistas. Otra de las preguntas más elementales sería hablar del <em>&#8220;Zen de python&#8221;</em>, si no recitarlo entero, al menos una explicación de la regla <em>&#8220;Explicit is better than implicit&#8221;</em>.</p><h2>2. Preguntar por muestras de sus trabajos</h2><p>Todo programador que aprecie debe tener una colección de cosas en las que haya trabajado. No tienen que ser cosas asombrosas. Pueden ser simplemente aquellas muestras de saber dejadas por internet como ayuda a los demás, tal vez un perfil de <em>Stack Overflow</em> o de <em>Python Majibu</em> donde se pueda ver qué clase de comunicador y resolvedor de problemas eres. Tal vez algún repositorio de código abierto donde participes, un blog profesional, twitter,&#8230;</p><p>Simplemente, viendo la clase de trabajos que hace la gente resulta de mucha ayuda para saber en qué destaca o no un programador.</p><h2>3. Afín a la cultura de la empresa</h2><p>La experiencia dice que ser afín a la cultura de la empresa asegura mejores éxitos que el ser un monstruo programando. Un ejemplo común son las empresas de software libre cuando tienden a adoptar ciertas prácticas éticas entre sus empleados como es la de compartir todo el conocimiento.</p><p>Tratándose de python, un programador en este lenguaje tiende a adoptar un perfil muy característico. Busca como fin la sencillez y la elegancia del código, antes que la optimización y eficiencia del mismo. Intenta ser <em>&#8220;agnóstico&#8221;</em> frente a la plataforma, que el código funcione en (casi) cualquier sitio. Sin embargo, es ávido de conocer nuevas librerías que poder emplear en sus desarrollos, siempre con python como lenguaje director de la lógica de la aplicación.</p><p>Toda esta actividad se ve plasmada en las &#8220;comunidades&#8221; python, donde se proponen y discuten sobre estos temas. Destaca la comunidad de &#8220;python hispano&#8221; como un primer lugar donde buscar perfiles apropiados, pero también se puede acudir a otros foros locales como las comunidades de python en Argentina, Perú, México,&#8230; o a foros más especializados de django o zope.</p><p>Pero una empresa que se precie, que tenga un buen producto de código abierto que ofrecer, debería ser capaz de formar su propia comunidad como punto de encuentro de los afines al proyecto, que no son sólo programadores. Esta comunidad sirve tanto para difundir la filosofía de la empresa como ser el punto de encuentro del personal afín a ella. Lamentablemente, muchas empresas han creído que una comunidad se monta mediante el bombardeo publicitario y es así como han concebido sus cuentas en las redes sociales como facebook o twitter. De este modo han conseguido consumidores <em>fanáticos</em>, pero muy pocos colaboradores.</p><p>A un programador hay que darle código. Las comunidades de programadores se forman alrededor de servicios como los github, bitbucket, sourceforge, launchpad, trac, etc. Si encuentras en tu comunidad un programador que te ha hecho un gran aporte o un hacker que ha dado con una extraña y oculta vulnerabilidad, contrátalo sin más dubitaciones.</p><h2>4. Prueba de programación</h2><p>Lo siguiente es pedir la realización de algunos programas sencillos: un detector de palíndromos, crear una expresión regular para encontrar teléfonos en un texto, una conversión de una lista de tuplas a diccionario,&#8230;</p><p>Con la prueba de programación no se busca, necesariamente, una respuesta perfecta, si no el crear un contexto donde observar al programador en su compresión de los problemas, así cómo su intento de resolverlos. Dentro de las posibilidades, es una prueba que muy bien se podría hacer online, combinando videconferencia y pizarra virtual. Si saltaran demasiadas alarmas, al ser <em>online</em> se podría dar por terminada la prueba en cualquier momento y así ahorrar tiempo tanto al candidato como al seleccionador.</p><h2>5. Prueba real</h2><p>Antes de dar el paso definitivo, se puede probar al candidato sobre un caso real como resolver algún ticket del gestor de bugs o crear una extensión sencilla en un plazo determinado. Por supuesto, no debe ser ninguna parte importante, tan sólo un medio de comprobar si el candidato es capaz de cumplir los plazos establecidos para así no desequilibrar al resto del equipo.</p><p>Idealmente, sería bueno que esta labor se realizara en las mismas instalaciones de la empresa, con los recursos de la empresa y con un contrato en prácticas.</p><h2>6. Entrevista personal</h2><p>Habiendo pasando todos los puntos anteriores, es casi seguro que el candidato es apto para la empresa. La entrevista está orientada más en conocer el perfil comunicativo del candidato con vistas a su integración de un equipo de trabajo. La entrevista empieza por una presentación del candidato sobre su experiencia hasta el momento. A continuación, se le realizan una serie de preguntas encaminadas a conocer del candidato su apasionamiento por lo que hace, su capacidad para comunicarse en grupos pequeños y qué podría aportar dentro de un pequeño equipo de trabajo.</p><h2>7. Prueba de inglés</h2><p>Se quiera o no, el inglés es el idioma común del programador, y no sólo porque toda la documentación esté en inglés. Cualquier proyecto de envergadura debe usar el inglés si quiere llamar la atención y conseguir nuevos colaboradores, ya sea en internet como en presentaciones en congresos. También empieza a ser frecuente la creación de equipos multinacionales de desarrollo. El inglés es la <em>lingua franca</em> de nuestros tiempos y comunicarse en inglés es fundamental para ser programador. Al ser una prueba de comunicación, la prueba de inglés podría formar parte de la entrevista personal.</p><h2>8. Conclusión</h2><p>Si has leído hasta aquí, espero no haberte aburrido y/o decepcionado mucho. No espero que todo lo dicho sea tomado al pie de letra. Más que una lista de reglas para buscar candidatos, he pretendido que sirva más como consejos para programadores python que buscan trabajo, sepan cómo hacerlo y, sobre todo, que se animen a buscarlos. Si de paso se amplía el número de programadores profesionales de python, mejor todavía. Ganaremos todos.</p>
") (wfw:commentRss nil "http://ch3m4.org/blog/2012/10/17/como-contratar-un-programador-de-python/feed/") (slash:comments nil "4"))))