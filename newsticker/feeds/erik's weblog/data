;; -*- coding: utf-8 -*-
(("arv-o-matic" "The Weblog of Erik Arvidsson" nil (20849 42754 612973) feed 0 nil nil ((title ((type . "text")) "arv-o-matic") (subtitle ((type . "text")) "The Weblog of Erik Arvidsson") (updated nil "2013-04-14T23:08:54Z") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net"))) (id nil "http://erik.eae.net/feed/atom/") (link ((rel . "self") (type . "application/atom+xml") (href . "http://erik.eae.net/feed/atom/"))) (generator ((uri . "http://wordpress.org/") (version . "3.5.1")) "WordPress") (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "JavaScript: Muddy Waters of Reflection") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/"))) (id nil "http://erik.eae.net/?p=367") (updated nil "2013-04-11T20:03:07Z") (published nil "2013-02-24T20:59:21Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "ES6"))) (summary ((type . "html")) "Just like a lot of other people I have a love-hate relationship with JavaScript. I love how expressive it is and I love that it runs everywhere but there are also some things where the languages falls very short. The gripe of the day is how JS makes reflection part of the everyday programming flow. ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2013/02/24/12.59.21/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2013/02/24/12.59.21/")) "<p>Just like a lot of other people I have a love-hate relationship with JavaScript. I love how expressive it is and I love that it runs everywhere but there are also some things where the languages falls very short.</p><p>The gripe of the day is how JS makes reflection part of the everyday programming flow. And it is not reliable reflection, it is crippled reflection with lots of gotchas. I&#8217;ll focus on two reflection mechanisms in JS today, for-in loops and square bracket annotations (member lookup expression, <code>array['length']</code>). The foor-in loop is used to loop over the properties of an object. But it only includes enumerable properties. Also, it incudes the enumerable properties of the objects prototype. The member lookup expression is used to lookup a property based on its name, which is always a string.</p><p>The problem is that people tend to use this reflective mechanism to do Map data structures. It is not surprising since there is no Map data structure in JS (before ES6) and the syntax is very convenient. Of course you want to write what you mean; <code>map[key] = value</code> instead of <code>map.set(key, value)</code>.</p><p>Lets go on. What if I want to add a <code>size</code> getter on my map that returns the number of entries in the map? Now I can no longer add an entry with the key <code>\"size\"</code> since that would replace or shadow the <code>size</code> getter. This is a real problem and a lot of web site crash if you enter the string <code>\"__proto__\"</code> or the string <code>\"hasOwnProperty</code>. For example Google Docs used to crash if you entered the former of those two.</p><p>What if I wanted to have non string keys? Nope, only strings are allowed and the key will be the <code>toString()</code> string of the key object. The common solution to this is to build a Map data structure where the key is a unique ID (UID) and the UID gets added to the real key object. This of course breaks if the key is a non extensible objects and those of you who have been around for a long time might remember that Nodes coming from an XHR in IE where non extensible causing all kinds of head aches.</p><h2>The Future</h2><p>ES6 has a new kind of loop called for-of. The for of loop is not a reflective loop. It is an iteration loop. The object that you want to iterate over must have an iterator and by default <code>Object.prototype</code> does not. <code>Array.prototype</code> on the other hand has an iterator that iterates over the elements in the array. Just what you always wanted!</p><pre><code>for (let value of [0, 'one', true]) {
  console.log(value);
}

for (let value of {a: 1}) {  <span style=\"color: red\">// throws not iterable</span>
  console.log(value);
}
</code></pre><p>ES6 has Map and Set which allows any value as a key. This solves some of the issues but we still have the mess with the member lookup expression.</p><p>There is a <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:object_model_reformation\">proposal on the ES wiki</a> that tries to reform the object model and decouple <code>[]</code> from property lookup. The basic idea is that any object can override the <code>[]</code> operations. Existing objects would continue to work as they do today but new objects could opt in to this new behavior.</p><p>For example, we could extend the ES6 Map objects to allow <code>[]</code> and <code>[]=</code> like this:</p><pre><code>import {elementGet, elementSet} from '@name';
Map.prototype[elementSet] = function(key, value) {
  return this.set(key, value);
};
Map.prototype[elementGet] = function(key) {
  return this.get(key);
};

var m = new Map;
var key = {};
m[key] = 42;
console.log(m[key]);
</code></pre><p>The reformed object model also allows us to finally explain how arrays work. It also allows us to implement all of the DOM interfaces in pure JavaScript. For example we could implement NodeList like this:</p><pre><code>import {create, elementGet} from '@name';
const ownerName = create();
const lengthName = create();

export function NodeList(owner) {
  this[ownerName] = owner;
}

NodeList.prototype  = {
  get length() {
    let i = 0;
    for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
      i++;
    }
    return i;
  },

  [elementGet]: function(index) {
    let i = 0;
    for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
      if (i++ === index)
        return node;
    }
    return node;
  }
};
</code></pre><h2>Today</h2><p>Map and Set are implemented in SpiderMonkey and V8 and is available under a <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">flag in Chrome</a> and in Firefox without a flag.</p><p>For-of loops are available in Firefox. V8 hasn&#8217;t started working on for-of loops nor iterators so don&#8217;t expect to be able to use these without a transpiler any time soon.</p><p>Both for-of loops and the reformed object model are available in the <a href=\"http://code.google.com/p/traceur-compiler/\">Traceur</a> compiler. There is a na√Øve <a href=\"http://traceur-compiler.googlecode.com/git/example/collection.html\">demo</a> of a string keyed map too. Note that [] keys are not yet supported in object/class literals so the demo uses assignment instead.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/#comments") (thr:count . "2"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/feed/atom/") (thr:count . "2"))) (thr:total nil "2")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Iterating over Harmony Maps") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/"))) (id nil "http://erik.eae.net/?p=352") (updated nil "2013-04-14T23:04:49Z") (published nil "2012-02-05T21:40:34Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "A while ago Chrome got some JavaScript Harmony features (behind a flag). One of these features is the new Map &#8220;class&#8221;. The current implementation does not provide a way to iterate over the keys or values because that depends on Harmony iterators which are not yet implemented in V8. However, we can create our own ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2012/02/05/13.40.34/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2012/02/05/13.40.34/")) "<p>A while ago Chrome <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">got</a> some JavaScript Harmony features (behind a flag). One of these features is the new <a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\" title=\"Harmony Collections\">Map</a> &#8220;class&#8221;. The current implementation does not provide a way to iterate over the keys or values because that depends on <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">Harmony iterators</a> which are not yet implemented in V8.</p><p>However, we can create our own class that adds support for iteration. I&#8217;ve uploaded a <a href=\"https://github.com/arv/for-each-map\">simple implementation</a> to GitHub.</p><p>The implementation creates a new &#8220;class&#8221; since V8 does not correctly allow sub classing of <code>Map</code>. The name of this &#8220;class&#8221; is <code>ForEachMap</code> since it provides one additional method over the standard <code>Map</code>, a <code>forEach</code> method. The <code>forEach</code> method calls a function for every key-value pair in the map.</p><p>Usage:</p><pre><code>var map = new ForEachMap;
map.set('a', 'A');
map.set('b', 'B');
map.forEach(function(value, key) {
  console.log(key, value); 
});
</code></pre><p>The iteration order is the same as the key-value pair creation order. Changes to the map is allowed during iteration and deleted keys are guaranteed to not be visited and new keys will be visited in the current iteration.</p><p>The implementation uses a <code>WeakMap</code> as a side table for the private state of the map. The private state contains arrays with keys and values and a real <code>Map</code> that maps the key to the given index. It also keeps track of number of holes in these arrays so that we can reindex the arrays when there are too many holes.</p><p>This wrapper is of course unfortunate but at least it makes the <code>Map</code> &#8220;class&#8221; more useful while we wait for implementations to add support for native iteration.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/#comments") (thr:count . "0"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/feed/atom/") (thr:count . "0"))) (thr:total nil "0")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Proxies") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/"))) (id nil "http://erik.eae.net/?p=318") (updated nil "2013-04-14T23:05:03Z") (published nil "2011-12-31T08:00:01Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "V8 currently implements the same Proxy API as Firefox. The API for proxies has changed a bit since then so be extra careful when testing this. Proxies are a very low lever construct. The are very powerful and they allow an object to intercept any access to its properties as well as intercept things like ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/31/00.00.01/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/31/00.00.01/")) "<p>V8 currently implements the same <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Proxy\">Proxy API as Firefox</a>. The API for proxies has <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies\">changed a bit</a> since then so be extra careful when testing this.</p><p>Proxies are a very low lever construct. The are very powerful and they allow an object to intercept any access to its properties as well as intercept things like <code>[[Call]]</code> and <code>[[Construct]]</code>. There are some limitations though; the <code>[[Prototype]]</code> cannot change once created and there is currently no way to intercept internal properties such as <code>[[Class]]</code>.</p><p>The basic idea is that you create a new object (the proxy) that has a handler. The handler has a bunch of functions that will get called when different operations are done to the proxy object. For example when someone sets a property the <code>set</code> set trap of the proxy is called.</p><pre><code>var handler = {
  set: function(receiver, name, value) {
    console.log(name, 'was set to', value, 'on', receiver);
  }
};
var proxy = Proxy.create(handler, {});
proxy.meaning = 42;  // Logs 'meaning' was set to 42 on [Object object]
</code></pre><p>Proxies are useful to emulate DOM as well as for doing membranes etc. I don&#8217;t expect anyone but library authors to ever have to use them directly.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/feed/atom/") (thr:count . "1"))) (thr:total nil "1")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "typeof null") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/"))) (id nil "http://erik.eae.net/?p=313") (updated nil "2013-04-14T23:06:09Z") (published nil "2011-12-30T20:00:40Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "In ES5 typeof null evaluates to 'object'. This quirk was one of the changes we wanted to fix in ES5 but at the time we agreed that we did not want any semantic changes. With Harmony there will be a way to opt in (TBD) so when you opt in we can now provide a ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/30/12.00.40/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/30/12.00.40/")) "<p>In ES5 <code>typeof null</code> evaluates to <code>'object'</code>. This quirk was one of the changes we wanted to fix in ES5 but at the time we agreed that we did not want any semantic changes. With Harmony there will be a way to opt in (TBD) so when you opt in we can now provide a better value for <code>typeof null</code>.</p><pre><code>
typeof null  // 'null'
</code></pre><p>In V8 with the Harmony flag turned on this changes all the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null\"><code>typeof</code></a> expressions so beware and please update your JS libraries to be future compatible to handle this correctly. Something along the following lines should make your code work both in ES5 and in future versions of ES:</p><pre><code>
switch (typeof expression) {
  case 'boolean':
    ...
    break;
  case 'function':
    ...
    break;
  case 'number':
    ...
    break;
  case 'string':
    ...
    break;
  case 'undefined':
    ...
    break;
  default:  // object or null
    var isNull = expression === null;
    ...
}

// Bad, because it included null in old ES versions
typeof object === 'object'

// Good
object === null
</code></pre><p></p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/feed/atom/") (thr:count . "1"))) (thr:total nil "1")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Block Scope") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/"))) (id nil "http://erik.eae.net/?p=327") (updated nil "2013-04-14T23:06:15Z") (published nil "2011-12-30T08:00:27Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "Did you know that ES5.1 does not support function declarations inside blocks? Browsers do allow it but they do not agree on the semantics. For ES Harmony we are specifying the semantics for functions inside blocks. Functions inside block use let scope, which means that they are limited to the current block scope. function f() ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/30/00.00.27/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/30/00.00.27/")) "<p>Did you know that ES5.1 does not support function declarations inside blocks? Browsers do allow it but they do not agree on the semantics. For ES Harmony we are specifying the semantics for <a hre=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_functions\">functions inside blocks</a>. Functions inside block use <code>let</code> scope, which means that they are limited to the current block scope.</p><pre><code>function f() { console.log('outer'); }

{
  function f() { console.log('inner'); }
  f();  // logs 'inner'
}
f();  // logs 'outer'
</code></pre><p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_scoped_bindings\">block scoped bindings</a> proposal also covers <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:let<br />
\"><code>let</code></a> and <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:const<br />
\"><code>const</code></a>. The <code>let</code> binding is like a <code>var</code> except that its scope is limited to the current block. <code>const</code> is like let but it requires an initializer and can only be written to once.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
  var x = i;
  functions.push(function() {
    alert(x);
  });
}
functions[0]();
</code></pre><p>The code above alerts <code>5</code> because that is what x is when the function is called. Now lets change the inner <code>var</code> to a <code>let</code>.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
  let x = i;
  functions.push(function() {
    alert(x);
  });
}
functions[0]();
</code></pre><p>This now alerts <code>0</code> since every iteration gets a fresh local variable.</p><pre><code>const PI = 3.14159265;
// ...
PI = 'Apple Pie';  // throws because PI cannot be reassigned to.
</code></pre><p></p><p>To use these you currently need to use strict mode.</p><pre><code>'use strict';
// ...

// or
function f() {
  'use strict';
  // ...
}
</code></pre>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/feed/atom/") (thr:count . "1"))) (thr:total nil "1")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Harmony Collections") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/"))) (id nil "http://erik.eae.net/?p=323") (updated nil "2013-04-14T23:06:23Z") (published nil "2011-12-29T20:00:11Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "Simple maps and sets allow you to create a Map with an object as the key. Normally people use Object.create(null) as a map but that limits the keys to strings. The Set constructor is similar and it allows a set containing objects. Neither of these currently support a way of iteration since iteration is planned ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/29/12.00.11/")) "<p>Simple maps and sets allow you to create a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Map</a> with an object as the key. Normally people use <code>Object.create(null)</code> as a map but that limits the keys to strings. The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Set</a> constructor is similar and it allows a set containing objects. Neither of these currently support a way of iteration since iteration is planned to be covered by the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">iteration</a> proposal which is not yet implemented.</p><pre><code>var map = new Map;
map.set('a', 'A');
map.get('a');  // 'A'
var b = {};
map.set(b, 'B');
map.get(b);  // 'B'
map.has(b);  // true
</code></pre><pre><code>var set = new Set;
set.add('a');
set.has('a');  // true
var b = {};
set.add(b);
set.has(b);  // true
</code></pre><p>Harmony also provides another kind of map called <code>WeakMap</code>. This has the same API as <code>Map</code> but it has different GC semantics. A normal <code>Map</code> using an object as a key prevents the object from being garbage collected but with a <code>WeakMap</code> the object can be garbaged collected. This is useful when you associate data with someone else&#8217;s object.</p><pre><code>var map = new WeakMap;
map.set(elementA, 'A');
map.get(elementA);  // 'A'
map.set(elementB, 'B');
map.get(elementB);  // 'B'
map.has(elementB);  // true
</code></pre><p>In the above example, if the element is removed from the DOM and the script has no references to it the element can be garbage collected.</p><p>Unlike <code>Map</code> and <code>Set</code>, <code>WeakMap</code> will never have a way to iterate over the items since that would expose the GC behavior.</p><p></p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/#comments") (thr:count . "2"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/feed/atom/") (thr:count . "2"))) (thr:total nil "2")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "JavaScript Harmony in Chrome") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/"))) (id nil "http://erik.eae.net/?p=309") (updated nil "2013-04-14T23:06:33Z") (published nil "2011-12-29T08:00:29Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "We recently added a way to turn on JavaScript Harmony features in Chrome. If you have a Canary or a recent Developer Channel build of Chrome you can turn on some Harmony features from chrome://flags. You need to manually enter that address in your browser. Look for an entry called &#8220;Enable Experimental JavaScript&#8221; The following ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/29/00.00.29/")) "<p>We recently added a way to turn on JavaScript Harmony features in Chrome. If you have a <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Canary</a> or a recent <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Developer Channel</a> build of Chrome you can turn on some Harmony features from <code>chrome://flags</code>. You need to manually enter that address in your browser. Look for an entry called &#8220;Enable Experimental JavaScript&#8221;</p><p>The following 4 features are currently enabled if you turn on the experiment.</p><ul><li><a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\">Collections (<code>Map</code>, <code>Set</code>, <code>WeakMap</code>)</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/00.00.27/\">Block scoped bindings</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/12.00.40/\"><code>typeof null === 'null'</code></a><li><a href=\"http://erik.eae.net/archives/2011/12/31/00.00.01/\">Proxies</a></ul><p>Over the next couple days I&#8217;ll post individual posts about each of these.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/#comments") (thr:count . "8"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/feed/atom/") (thr:count . "8"))) (thr:total nil "8")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Adding transformation passes to Traceur Compiler") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/"))) (id nil "http://erik.eae.net/?p=302") (updated nil "2013-04-14T23:06:43Z") (published nil "2011-09-17T05:52:24Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (summary ((type . "html")) "Traceur Compiler is an open source ES.next to ES5 compiler. We released it a while back but today I finished writing a tutorial about how to add new transformation passes. As you can see it is pretty easy to add new passes and all you need to know is JavaScript to prototype the future of ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/09/16/21.52.24/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/09/16/21.52.24/")) "<p>Traceur Compiler is an open source ES.next to ES5 compiler. We released it a while back but today I finished writing a tutorial about how to add new <a href=\"http://code.google.com/p/traceur-compiler/wiki/AddingTransformationPasses\">transformation passes</a>. As you can see it is pretty easy to add new passes and all you need to know is JavaScript to prototype the future of JavaScript now.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/feed/atom/") (thr:count . "1"))) (thr:total nil "1")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Inheritance Antipattern") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/"))) (id nil "http://erik.eae.net/?p=286") (updated nil "2013-04-14T23:06:51Z") (published nil "2009-11-10T05:12:16Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "Michael Bolin wrote an excellent blog post about the inheritance antipattern that is gaining a lot of foothold among JavaScript developers these days. The post also links to an article giving a lot more depth on the topic. When I attended The Ajax Experience 2009, I saw a number of &#8220;misguided&#8221; things that people were ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2009/11/09/21.12.16/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2009/11/09/21.12.16/")) "<p><a href=\"http://blog.bolinfest.com/\">Michael Bolin</a> wrote an excellent blog post about the <a href=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\">inheritance antipattern</a> that is gaining a lot of foothold among JavaScript developers these days. The post also links to <a href=\"http://bolinfest.com/javascript/inheritance.php\">an article</a> giving a lot more depth on the topic.</p><blockquote cite=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\"><p>
When I attended The Ajax Experience 2009, I saw a number of &#8220;misguided&#8221; things that people were doing with JavaScript. [snip].. I wanted to get up and yell, &#8220;Stop &#8212; you&#8217;re all doing it wrong!&#8221;
</p></blockquote><p>Although I agree with almost everything Michael writes I think it is worth pointing out some things.</p><h3>Background</h3><p>For those too lazy to read Michael&#8217;s post and article here is an example of the classic inheritance pattern as well as the functional inheritance pattern. This example is intentionally very simple.</p><h4>Classic inheritance pattern</h4><pre>
function Phone(phoneNumber) {
  this.phoneNumber_ = phoneNumber;
};

Phone.prototype.getPhoneNumber = function() {
  return this.phoneNumber_;
};
</pre><h4>Functional inheritance pattern</h4><pre>
function Phone(phoneNumber) {
  var that = {};
  that.getPhoneNumber = function() {
    return phoneNumber;
  };
  return that;
};
</pre><h3>Compilation</h3><p>Michael argues that the functional pattern is not good because methods cannot be inlined and the end result is much larger. He also says that it uses more memory. I think it is important to realize that it uses a LOT more memory and is significantly slower. Given a <i>class</i> with 1 methods It is about 100 times slower in Chrome, 20 times slower in Safari and about 10 times slower in Firefox.</p><h3>Prototype object literal</h3><p>Michael also mentions the following pattern:</p><pre>
function Phone(phoneNumber) {
  this.phoneNumber_ = phoneNumber;
}
Phone.prototype = {
  getPhoneNumber: function() {
    return this.phoneNumber_;
  }
};
</pre><p>I like this pattern but it has one serious drawback. It cannot be used to extend existing <i>classes</i> because in that case the protytype must be an instance of the <i>class</i> you are inheriting from.</p><p>If you do not care about IE support this can be done by using <code>__proto__</code> like this:</p><pre>
function SmartPhone(phoneNumber) {
  Phone.call(this, phoneNumber);
}
SmartPhone.prototype = {
  <b>__proto__: Phone.prototype,</b>
  sendEmail: function(email) {
    ...
  }
};
</pre><h3>Semantics</h3><p>I understand why people like Douglas Crockford preaches the functional inheritance pattern. Due to its closure the local variable is truly private and this is important when you are doing mashups and other security sensitive code. However, when it comes to building large scale applications like Gmail you cannot afford this extra memory and performance overhead.</p><h3>Conclusion</h3><p>Prototype based inheritance is the way to go if you care about memory usage and performance. If you are planning to use the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> you will also see greater code size reduction using this pattern.</p><h3>Update</h3><p>As some people pointed out method dispatch is slightly slower using the classic inheritance pattern because we have to walk the prototype chain to find the method. I&#8217;m also posting my tests and results for reference:</p><ul><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-perf.html\">Create test</a></li><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-call-perf.html\">Method dispatch test</a></li><li><a href=\"http://spreadsheets.google.com/pub?key=tNL6gDY557Bb4aQjSb6rQ9g&#038;output=html\">Table of results</a></li></ul><p>You might need to reduce the number of runs to get this to wrok in IE. The only surprising thing here is that the classical pattern is faster in Firefox nightlies.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/#comments") (thr:count . "20"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/feed/atom/") (thr:count . "20"))) (thr:total nil "20")) (entry nil (author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Closure") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/"))) (id nil "http://erik.eae.net/?p=271") (updated nil "2013-04-14T23:07:28Z") (published nil "2009-11-06T06:27:29Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (category ((scheme . "http://erik.eae.net") (term . "Google"))) (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "Today we finally announced and released Closure (or Closure Library as the JS library is officially known as). History Me and Dan Pupius started the JS library at Google a long time ago. At the time there was a lot of good JS code at Google but there was really no order to it and ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2009/11/05/22.27.29/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2009/11/05/22.27.29/")) "<p>Today we finally announced and released Closure (or Closure Library as the JS library is officially known as).</p><h3>History</h3><p>Me and <a href=\"http://pupius.co.uk/blog/\">Dan Pupius</a> started the JS library at Google a long time ago. At the time there was a lot of good JS code at Google but there was really no order to it and the code was spread out all over the code base. This of course made it hard to discover which in turn lead to the same code being reimplemented over and over. As you might guess the code that existed was not very consistent and sometimes did not even work in the presence of other code. Closure was an attempt to bring a <a href=\"http://en.wikipedia.org/wiki/Closure_(psychology)\">closure</a> to this mess. The name is also a play on the <a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\">programming language feature</a> as well as the desire to make our js library be a <a href=\"http://en.wikipedia.org/wiki/Transitive_closure\">closure</a> of all the existing js code at Google.</p><p>At the time we were considering using <a href=\"http://www.dojotoolkit.org/\">Dojo</a> as our base for this new library. We were very impressed with Dojo but back then Dojo was too unstable and we had heard too many horror stories of upgrade migration head aches. We also looked at <a href=\"http://mochikit.com/\">MochiKit</a> which was more stable but it did not really solve any of our problems. (<a href=\"third_party\">*</a>)</p><h3>Today</h3><p>We have had more than 400 Google engineer contributing code to Closure. The code is constantly evolving but I feel like it has stabilized a lot over the last year or so. It is used by almost all of Google&#8217;s web applications and the amount of QA and usage these apps have is unheard of for any web application.</p><p>I&#8217;m very happy that <a href=\"http://www.nanaze.com/\">Nathan</a> and <a href=\"http://www.ginnotvodka.com/\">Daniel</a> took upon themselves to release this because neither me nor Dan has had the bandwidth to do it.</p><h3>Future</h3><p>I hope we can see more code being shared among the different open source JS libraries out there. We would love to be able to <code>goog.require</code> some Dojo code (especially their data model code) and I&#8217;m sure they would love to be able to <code>dojo.require</code> our data structures and i18n code.</p><h3>Closure Compiler</h3><p>Closure relies heavily on the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> to concatenate files, doing static type analysis, as well as code optimizations such as inlining and dead code removal. Closure Library is great for prototyping but it gets slow real fast due to all the network request that are done at startup as well as downloading all the code that you do not really need. The compiler solves both these problems.</p><h4 id=\"third_party\">Third Party Code</h4><p>We ended up using both Dojo (we use Acme for <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/dojo/dom/query.js\">goog.dom.query</a>) and we use MochiKit&#8217;s Deferred in <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/mochikit/async/deferred.js\">goog.async.Deferred</a>.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/#comments") (thr:count . "23"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/feed/atom/") (thr:count . "23"))) (thr:total nil "23")))) ("JavaScript: Muddy Waters of Reflection" "<p>Just like a lot of other people I have a love-hate relationship with JavaScript. I love how expressive it is and I love that it runs everywhere but there are also some things where the languages falls very short.</p><p>The gripe of the day is how JS makes reflection part of the everyday programming flow. And it is not reliable reflection, it is crippled reflection with lots of gotchas. I‚Äôll focus on two reflection mechanisms in JS today, for-in loops and square bracket annotations (member lookup expression, <code>array['length']</code>). The foor-in loop is used to loop over the properties of an object. But it only includes enumerable properties. Also, it incudes the enumerable properties of the objects prototype. The member lookup expression is used to lookup a property based on its name, which is always a string.</p><p>The problem is that people tend to use this reflective mechanism to do Map data structures. It is not surprising since there is no Map data structure in JS (before ES6) and the syntax is very convenient. Of course you want to write what you mean; <code>map[key] = value</code> instead of <code>map.set(key, value)</code>.</p><p>Lets go on. What if I want to add a <code>size</code> getter on my map that returns the number of entries in the map? Now I can no longer add an entry with the key <code>\"size\"</code> since that would replace or shadow the <code>size</code> getter. This is a real problem and a lot of web site crash if you enter the string <code>\"__proto__\"</code> or the string <code>\"hasOwnProperty</code>. For example Google Docs used to crash if you entered the former of those two.</p><p>What if I wanted to have non string keys? Nope, only strings are allowed and the key will be the <code>toString()</code> string of the key object. The common solution to this is to build a Map data structure where the key is a unique ID (UID) and the UID gets added to the real key object. This of course breaks if the key is a non extensible objects and those of you who have been around for a long time might remember that Nodes coming from an XHR in IE where non extensible causing all kinds of head aches.</p><h2>The Future</h2><p>ES6 has a new kind of loop called for-of. The for of loop is not a reflective loop. It is an iteration loop. The object that you want to iterate over must have an iterator and by default <code>Object.prototype</code> does not. <code>Array.prototype</code> on the other hand has an iterator that iterates over the elements in the array. Just what you always wanted!</p><pre><code>for (let value of [0, 'one', true]) {
console.log(value);
}
for (let value of {a: 1}) {  <span style=\"color: red\">// throws not iterable</span>
console.log(value);
}
</code></pre><p>ES6 has Map and Set which allows any value as a key. This solves some of the issues but we still have the mess with the member lookup expression.</p><p>There is a <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:object_model_reformation\">proposal on the ES wiki</a> that tries to reform the object model and decouple <code>[]</code> from property lookup. The basic idea is that any object can override the <code>[]</code> operations. Existing objects would continue to work as they do today but new objects could opt in to this new behavior.</p><p>For example, we could extend the ES6 Map objects to allow <code>[]</code> and <code>[]=</code> like this:</p><pre><code>import {elementGet, elementSet} from '@name';
Map.prototype[elementSet] = function(key, value) {
return this.set(key, value);
};
Map.prototype[elementGet] = function(key) {
return this.get(key);
};
var m = new Map;
var key = {};
m[key] = 42;
console.log(m[key]);
</code></pre><p>The reformed object model also allows us to finally explain how arrays work. It also allows us to implement all of the DOM interfaces in pure JavaScript. For example we could implement NodeList like this:</p><pre><code>import {create, elementGet} from '@name';
const ownerName = create();
const lengthName = create();
export function NodeList(owner) {
this[ownerName] = owner;
}
NodeList.prototype  = {
get length() {
let i = 0;
for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
i++;
}
return i;
},
[elementGet]: function(index) {
let i = 0;
for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
if (i++ === index)
return node;
}
return node;
}
};
</code></pre><h2>Today</h2><p>Map and Set are implemented in SpiderMonkey and V8 and is available under a <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">flag in Chrome</a> and in Firefox without a flag.</p><p>For-of loops are available in Firefox. V8 hasn‚Äôt started working on for-of loops nor iterators so don‚Äôt expect to be able to use these without a transpiler any time soon.</p><p>Both for-of loops and the reformed object model are available in the <a href=\"http://code.google.com/p/traceur-compiler/\">Traceur</a> compiler. There is a na√Øve <a href=\"http://traceur-compiler.googlecode.com/git/example/collection.html\">demo</a> of a string keyed map too. Note that [] keys are not yet supported in object/class literals so the demo uses assignment instead.</p>" "http://erik.eae.net/archives/2013/02/24/12.59.21/" (20839 5883) old 1 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "JavaScript: Muddy Waters of Reflection") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/"))) (id nil "http://erik.eae.net/?p=367") (updated nil "2013-04-11T20:03:07Z") (published nil "2013-02-24T20:59:21Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "ES6"))) (summary ((type . "html")) "Just like a lot of other people I have a love-hate relationship with JavaScript. I love how expressive it is and I love that it runs everywhere but there are also some things where the languages falls very short. The gripe of the day is how JS makes reflection part of the everyday programming flow. ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2013/02/24/12.59.21/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2013/02/24/12.59.21/")) "<p>Just like a lot of other people I have a love-hate relationship with JavaScript. I love how expressive it is and I love that it runs everywhere but there are also some things where the languages falls very short.</p><p>The gripe of the day is how JS makes reflection part of the everyday programming flow. And it is not reliable reflection, it is crippled reflection with lots of gotchas. I&#8217;ll focus on two reflection mechanisms in JS today, for-in loops and square bracket annotations (member lookup expression, <code>array['length']</code>). The foor-in loop is used to loop over the properties of an object. But it only includes enumerable properties. Also, it incudes the enumerable properties of the objects prototype. The member lookup expression is used to lookup a property based on its name, which is always a string.</p><p>The problem is that people tend to use this reflective mechanism to do Map data structures. It is not surprising since there is no Map data structure in JS (before ES6) and the syntax is very convenient. Of course you want to write what you mean; <code>map[key] = value</code> instead of <code>map.set(key, value)</code>.</p><p>Lets go on. What if I want to add a <code>size</code> getter on my map that returns the number of entries in the map? Now I can no longer add an entry with the key <code>\"size\"</code> since that would replace or shadow the <code>size</code> getter. This is a real problem and a lot of web site crash if you enter the string <code>\"__proto__\"</code> or the string <code>\"hasOwnProperty</code>. For example Google Docs used to crash if you entered the former of those two.</p><p>What if I wanted to have non string keys? Nope, only strings are allowed and the key will be the <code>toString()</code> string of the key object. The common solution to this is to build a Map data structure where the key is a unique ID (UID) and the UID gets added to the real key object. This of course breaks if the key is a non extensible objects and those of you who have been around for a long time might remember that Nodes coming from an XHR in IE where non extensible causing all kinds of head aches.</p><h2>The Future</h2><p>ES6 has a new kind of loop called for-of. The for of loop is not a reflective loop. It is an iteration loop. The object that you want to iterate over must have an iterator and by default <code>Object.prototype</code> does not. <code>Array.prototype</code> on the other hand has an iterator that iterates over the elements in the array. Just what you always wanted!</p><pre><code>for (let value of [0, 'one', true]) {
  console.log(value);
}

for (let value of {a: 1}) {  <span style=\"color: red\">// throws not iterable</span>
  console.log(value);
}
</code></pre><p>ES6 has Map and Set which allows any value as a key. This solves some of the issues but we still have the mess with the member lookup expression.</p><p>There is a <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:object_model_reformation\">proposal on the ES wiki</a> that tries to reform the object model and decouple <code>[]</code> from property lookup. The basic idea is that any object can override the <code>[]</code> operations. Existing objects would continue to work as they do today but new objects could opt in to this new behavior.</p><p>For example, we could extend the ES6 Map objects to allow <code>[]</code> and <code>[]=</code> like this:</p><pre><code>import {elementGet, elementSet} from '@name';
Map.prototype[elementSet] = function(key, value) {
  return this.set(key, value);
};
Map.prototype[elementGet] = function(key) {
  return this.get(key);
};

var m = new Map;
var key = {};
m[key] = 42;
console.log(m[key]);
</code></pre><p>The reformed object model also allows us to finally explain how arrays work. It also allows us to implement all of the DOM interfaces in pure JavaScript. For example we could implement NodeList like this:</p><pre><code>import {create, elementGet} from '@name';
const ownerName = create();
const lengthName = create();

export function NodeList(owner) {
  this[ownerName] = owner;
}

NodeList.prototype  = {
  get length() {
    let i = 0;
    for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
      i++;
    }
    return i;
  },

  [elementGet]: function(index) {
    let i = 0;
    for (let node = this[ownerName].firstChild; node; node = node.nextSibling) {
      if (i++ === index)
        return node;
    }
    return node;
  }
};
</code></pre><h2>Today</h2><p>Map and Set are implemented in SpiderMonkey and V8 and is available under a <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">flag in Chrome</a> and in Firefox without a flag.</p><p>For-of loops are available in Firefox. V8 hasn&#8217;t started working on for-of loops nor iterators so don&#8217;t expect to be able to use these without a transpiler any time soon.</p><p>Both for-of loops and the reformed object model are available in the <a href=\"http://code.google.com/p/traceur-compiler/\">Traceur</a> compiler. There is a na√Øve <a href=\"http://traceur-compiler.googlecode.com/git/example/collection.html\">demo</a> of a string keyed map too. Note that [] keys are not yet supported in object/class literals so the demo uses assignment instead.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/#comments") (thr:count . "2"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2013/02/24/12.59.21/feed/atom/") (thr:count . "2"))) (thr:total nil "2"))) ("Iterating over Harmony Maps" "<p>A while ago Chrome <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">got</a> some JavaScript Harmony features (behind a flag). One of these features is the new <a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\" title=\"Harmony Collections\">Map</a> ‚Äúclass‚Äù. The current implementation does not provide a way to iterate over the keys or values because that depends on <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">Harmony iterators</a> which are not yet implemented in V8.</p><p>However, we can create our own class that adds support for iteration. I‚Äôve uploaded a <a href=\"https://github.com/arv/for-each-map\">simple implementation</a> to GitHub.</p><p>The implementation creates a new ‚Äúclass‚Äù since V8 does not correctly allow sub classing of <code>Map</code>. The name of this ‚Äúclass‚Äù is <code>ForEachMap</code> since it provides one additional method over the standard <code>Map</code>, a <code>forEach</code> method. The <code>forEach</code> method calls a function for every key-value pair in the map.</p><p>Usage:</p><pre><code>var map = new ForEachMap;
map.set('a', 'A');
map.set('b', 'B');
map.forEach(function(value, key) {
console.log(key, value);
});
</code></pre><p>The iteration order is the same as the key-value pair creation order. Changes to the map is allowed during iteration and deleted keys are guaranteed to not be visited and new keys will be visited in the current iteration.</p><p>The implementation uses a <code>WeakMap</code> as a side table for the private state of the map. The private state contains arrays with keys and values and a real <code>Map</code> that maps the key to the given index. It also keeps track of number of holes in these arrays so that we can reindex the arrays when there are too many holes.</p><p>This wrapper is of course unfortunate but at least it makes the <code>Map</code> ‚Äúclass‚Äù more useful while we wait for implementations to add support for native iteration.</p>" "http://erik.eae.net/archives/2012/02/05/13.40.34/" (20843 13841) old 2 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Iterating over Harmony Maps") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/"))) (id nil "http://erik.eae.net/?p=352") (updated nil "2013-04-14T23:04:49Z") (published nil "2012-02-05T21:40:34Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "A while ago Chrome got some JavaScript Harmony features (behind a flag). One of these features is the new Map &#8220;class&#8221;. The current implementation does not provide a way to iterate over the keys or values because that depends on Harmony iterators which are not yet implemented in V8. However, we can create our own ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2012/02/05/13.40.34/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2012/02/05/13.40.34/")) "<p>A while ago Chrome <a href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\" title=\"JavaScript Harmony in Chrome\">got</a> some JavaScript Harmony features (behind a flag). One of these features is the new <a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\" title=\"Harmony Collections\">Map</a> &#8220;class&#8221;. The current implementation does not provide a way to iterate over the keys or values because that depends on <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">Harmony iterators</a> which are not yet implemented in V8.</p><p>However, we can create our own class that adds support for iteration. I&#8217;ve uploaded a <a href=\"https://github.com/arv/for-each-map\">simple implementation</a> to GitHub.</p><p>The implementation creates a new &#8220;class&#8221; since V8 does not correctly allow sub classing of <code>Map</code>. The name of this &#8220;class&#8221; is <code>ForEachMap</code> since it provides one additional method over the standard <code>Map</code>, a <code>forEach</code> method. The <code>forEach</code> method calls a function for every key-value pair in the map.</p><p>Usage:</p><pre><code>var map = new ForEachMap;
map.set('a', 'A');
map.set('b', 'B');
map.forEach(function(value, key) {
  console.log(key, value); 
});
</code></pre><p>The iteration order is the same as the key-value pair creation order. Changes to the map is allowed during iteration and deleted keys are guaranteed to not be visited and new keys will be visited in the current iteration.</p><p>The implementation uses a <code>WeakMap</code> as a side table for the private state of the map. The private state contains arrays with keys and values and a real <code>Map</code> that maps the key to the given index. It also keeps track of number of holes in these arrays so that we can reindex the arrays when there are too many holes.</p><p>This wrapper is of course unfortunate but at least it makes the <code>Map</code> &#8220;class&#8221; more useful while we wait for implementations to add support for native iteration.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/#comments") (thr:count . "0"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2012/02/05/13.40.34/feed/atom/") (thr:count . "0"))) (thr:total nil "0"))) ("Proxies" "<p>V8 currently implements the same <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Proxy\">Proxy API as Firefox</a>. The API for proxies has <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies\">changed a bit</a> since then so be extra careful when testing this.</p><p>Proxies are a very low lever construct. The are very powerful and they allow an object to intercept any access to its properties as well as intercept things like <code>[[Call]]</code> and <code>[[Construct]]</code>. There are some limitations though; the <code>[[Prototype]]</code> cannot change once created and there is currently no way to intercept internal properties such as <code>[[Class]]</code>.</p><p>The basic idea is that you create a new object (the proxy) that has a handler. The handler has a bunch of functions that will get called when different operations are done to the proxy object. For example when someone sets a property the <code>set</code> set trap of the proxy is called.</p><pre><code>var handler = {
set: function(receiver, name, value) {
console.log(name, 'was set to', value, 'on', receiver);
}
};
var proxy = Proxy.create(handler, {});
proxy.meaning = 42;  // Logs 'meaning' was set to 42 on [Object object]
</code></pre><p>Proxies are useful to emulate DOM as well as for doing membranes etc. I don‚Äôt expect anyone but library authors to ever have to use them directly.</p>" "http://erik.eae.net/archives/2011/12/31/00.00.01/" (20843 13855) old 3 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Proxies") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/"))) (id nil "http://erik.eae.net/?p=318") (updated nil "2013-04-14T23:05:03Z") (published nil "2011-12-31T08:00:01Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "V8 currently implements the same Proxy API as Firefox. The API for proxies has changed a bit since then so be extra careful when testing this. Proxies are a very low lever construct. The are very powerful and they allow an object to intercept any access to its properties as well as intercept things like ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/31/00.00.01/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/31/00.00.01/")) "<p>V8 currently implements the same <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Proxy\">Proxy API as Firefox</a>. The API for proxies has <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies\">changed a bit</a> since then so be extra careful when testing this.</p><p>Proxies are a very low lever construct. The are very powerful and they allow an object to intercept any access to its properties as well as intercept things like <code>[[Call]]</code> and <code>[[Construct]]</code>. There are some limitations though; the <code>[[Prototype]]</code> cannot change once created and there is currently no way to intercept internal properties such as <code>[[Class]]</code>.</p><p>The basic idea is that you create a new object (the proxy) that has a handler. The handler has a bunch of functions that will get called when different operations are done to the proxy object. For example when someone sets a property the <code>set</code> set trap of the proxy is called.</p><pre><code>var handler = {
  set: function(receiver, name, value) {
    console.log(name, 'was set to', value, 'on', receiver);
  }
};
var proxy = Proxy.create(handler, {});
proxy.meaning = 42;  // Logs 'meaning' was set to 42 on [Object object]
</code></pre><p>Proxies are useful to emulate DOM as well as for doing membranes etc. I don&#8217;t expect anyone but library authors to ever have to use them directly.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/31/00.00.01/feed/atom/") (thr:count . "1"))) (thr:total nil "1"))) ("typeof null" "<p>In ES5 <code>typeof null</code> evaluates to <code>'object'</code>. This quirk was one of the changes we wanted to fix in ES5 but at the time we agreed that we did not want any semantic changes. With Harmony there will be a way to opt in (TBD) so when you opt in we can now provide a better value for <code>typeof null</code>.</p><pre><code>
typeof null  // 'null'
</code></pre><p>In V8 with the Harmony flag turned on this changes all the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null\"><code>typeof</code></a> expressions so beware and please update your JS libraries to be future compatible to handle this correctly. Something along the following lines should make your code work both in ES5 and in future versions of ES:</p><pre><code>
switch (typeof expression) {
case 'boolean':
...
break;
case 'function':
...
break;
case 'number':
...
break;
case 'string':
...
break;
case 'undefined':
...
break;
default:  // object or null
var isNull = expression === null;
...
}
// Bad, because it included null in old ES versions
typeof object === 'object'
// Good
object === null
</code></pre><p></p>" "http://erik.eae.net/archives/2011/12/30/12.00.40/" (20843 13921) old 4 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "typeof null") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/"))) (id nil "http://erik.eae.net/?p=313") (updated nil "2013-04-14T23:06:09Z") (published nil "2011-12-30T20:00:40Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "In ES5 typeof null evaluates to 'object'. This quirk was one of the changes we wanted to fix in ES5 but at the time we agreed that we did not want any semantic changes. With Harmony there will be a way to opt in (TBD) so when you opt in we can now provide a ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/30/12.00.40/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/30/12.00.40/")) "<p>In ES5 <code>typeof null</code> evaluates to <code>'object'</code>. This quirk was one of the changes we wanted to fix in ES5 but at the time we agreed that we did not want any semantic changes. With Harmony there will be a way to opt in (TBD) so when you opt in we can now provide a better value for <code>typeof null</code>.</p><pre><code>
typeof null  // 'null'
</code></pre><p>In V8 with the Harmony flag turned on this changes all the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null\"><code>typeof</code></a> expressions so beware and please update your JS libraries to be future compatible to handle this correctly. Something along the following lines should make your code work both in ES5 and in future versions of ES:</p><pre><code>
switch (typeof expression) {
  case 'boolean':
    ...
    break;
  case 'function':
    ...
    break;
  case 'number':
    ...
    break;
  case 'string':
    ...
    break;
  case 'undefined':
    ...
    break;
  default:  // object or null
    var isNull = expression === null;
    ...
}

// Bad, because it included null in old ES versions
typeof object === 'object'

// Good
object === null
</code></pre><p></p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/30/12.00.40/feed/atom/") (thr:count . "1"))) (thr:total nil "1"))) ("Block Scope" "<p>Did you know that ES5.1 does not support function declarations inside blocks? Browsers do allow it but they do not agree on the semantics. For ES Harmony we are specifying the semantics for <a hre=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_functions\">functions inside blocks</a>. Functions inside block use <code>let</code> scope, which means that they are limited to the current block scope.</p><pre><code>function f() { console.log('outer'); }
{
function f() { console.log('inner'); }
f();  // logs 'inner'
}
f();  // logs 'outer'
</code></pre><p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_scoped_bindings\">block scoped bindings</a> proposal also covers <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:let<br />
\"><code>let</code></a> and <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:const<br />
\"><code>const</code></a>. The <code>let</code> binding is like a <code>var</code> except that its scope is limited to the current block. <code>const</code> is like let but it requires an initializer and can only be written to once.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
var x = i;
functions.push(function() {
alert(x);
});
}
functions[0]();
</code></pre><p>The code above alerts <code>5</code> because that is what x is when the function is called. Now lets change the inner <code>var</code> to a <code>let</code>.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
let x = i;
functions.push(function() {
alert(x);
});
}
functions[0]();
</code></pre><p>This now alerts <code>0</code> since every iteration gets a fresh local variable.</p><pre><code>const PI = 3.14159265;
// ...
PI = 'Apple Pie';  // throws because PI cannot be reassigned to.
</code></pre><p></p><p>To use these you currently need to use strict mode.</p><pre><code>'use strict';
// ...
// or
function f() {
'use strict';
// ...
}
</code></pre>" "http://erik.eae.net/archives/2011/12/30/00.00.27/" (20843 13927) old 5 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Block Scope") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/"))) (id nil "http://erik.eae.net/?p=327") (updated nil "2013-04-14T23:06:15Z") (published nil "2011-12-30T08:00:27Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "Did you know that ES5.1 does not support function declarations inside blocks? Browsers do allow it but they do not agree on the semantics. For ES Harmony we are specifying the semantics for functions inside blocks. Functions inside block use let scope, which means that they are limited to the current block scope. function f() ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/30/00.00.27/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/30/00.00.27/")) "<p>Did you know that ES5.1 does not support function declarations inside blocks? Browsers do allow it but they do not agree on the semantics. For ES Harmony we are specifying the semantics for <a hre=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_functions\">functions inside blocks</a>. Functions inside block use <code>let</code> scope, which means that they are limited to the current block scope.</p><pre><code>function f() { console.log('outer'); }

{
  function f() { console.log('inner'); }
  f();  // logs 'inner'
}
f();  // logs 'outer'
</code></pre><p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:block_scoped_bindings\">block scoped bindings</a> proposal also covers <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:let<br />
\"><code>let</code></a> and <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:const<br />
\"><code>const</code></a>. The <code>let</code> binding is like a <code>var</code> except that its scope is limited to the current block. <code>const</code> is like let but it requires an initializer and can only be written to once.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
  var x = i;
  functions.push(function() {
    alert(x);
  });
}
functions[0]();
</code></pre><p>The code above alerts <code>5</code> because that is what x is when the function is called. Now lets change the inner <code>var</code> to a <code>let</code>.</p><pre><code>var functions = [];
for (var i = 0; i &lt; 5; i++) {
  let x = i;
  functions.push(function() {
    alert(x);
  });
}
functions[0]();
</code></pre><p>This now alerts <code>0</code> since every iteration gets a fresh local variable.</p><pre><code>const PI = 3.14159265;
// ...
PI = 'Apple Pie';  // throws because PI cannot be reassigned to.
</code></pre><p></p><p>To use these you currently need to use strict mode.</p><pre><code>'use strict';
// ...

// or
function f() {
  'use strict';
  // ...
}
</code></pre>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/30/00.00.27/feed/atom/") (thr:count . "1"))) (thr:total nil "1"))) ("Harmony Collections" "<p>Simple maps and sets allow you to create a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Map</a> with an object as the key. Normally people use <code>Object.create(null)</code> as a map but that limits the keys to strings. The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Set</a> constructor is similar and it allows a set containing objects. Neither of these currently support a way of iteration since iteration is planned to be covered by the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">iteration</a> proposal which is not yet implemented.</p><pre><code>var map = new Map;
map.set('a', 'A');
map.get('a');  // 'A'
var b = {};
map.set(b, 'B');
map.get(b);  // 'B'
map.has(b);  // true
</code></pre><pre><code>var set = new Set;
set.add('a');
set.has('a');  // true
var b = {};
set.add(b);
set.has(b);  // true
</code></pre><p>Harmony also provides another kind of map called <code>WeakMap</code>. This has the same API as <code>Map</code> but it has different GC semantics. A normal <code>Map</code> using an object as a key prevents the object from being garbage collected but with a <code>WeakMap</code> the object can be garbaged collected. This is useful when you associate data with someone else‚Äôs object.</p><pre><code>var map = new WeakMap;
map.set(elementA, 'A');
map.get(elementA);  // 'A'
map.set(elementB, 'B');
map.get(elementB);  // 'B'
map.has(elementB);  // true
</code></pre><p>In the above example, if the element is removed from the DOM and the script has no references to it the element can be garbage collected.</p><p>Unlike <code>Map</code> and <code>Set</code>, <code>WeakMap</code> will never have a way to iterate over the items since that would expose the GC behavior.</p><p></p>" "http://erik.eae.net/archives/2011/12/29/12.00.11/" (20843 13935) old 6 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Harmony Collections") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/"))) (id nil "http://erik.eae.net/?p=323") (updated nil "2013-04-14T23:06:23Z") (published nil "2011-12-29T20:00:11Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "Simple maps and sets allow you to create a Map with an object as the key. Normally people use Object.create(null) as a map but that limits the keys to strings. The Set constructor is similar and it allows a set containing objects. Neither of these currently support a way of iteration since iteration is planned ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/29/12.00.11/")) "<p>Simple maps and sets allow you to create a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Map</a> with an object as the key. Normally people use <code>Object.create(null)</code> as a map but that limits the keys to strings. The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets<br />
\">Set</a> constructor is similar and it allows a set containing objects. Neither of these currently support a way of iteration since iteration is planned to be covered by the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\">iteration</a> proposal which is not yet implemented.</p><pre><code>var map = new Map;
map.set('a', 'A');
map.get('a');  // 'A'
var b = {};
map.set(b, 'B');
map.get(b);  // 'B'
map.has(b);  // true
</code></pre><pre><code>var set = new Set;
set.add('a');
set.has('a');  // true
var b = {};
set.add(b);
set.has(b);  // true
</code></pre><p>Harmony also provides another kind of map called <code>WeakMap</code>. This has the same API as <code>Map</code> but it has different GC semantics. A normal <code>Map</code> using an object as a key prevents the object from being garbage collected but with a <code>WeakMap</code> the object can be garbaged collected. This is useful when you associate data with someone else&#8217;s object.</p><pre><code>var map = new WeakMap;
map.set(elementA, 'A');
map.get(elementA);  // 'A'
map.set(elementB, 'B');
map.get(elementB);  // 'B'
map.has(elementB);  // true
</code></pre><p>In the above example, if the element is removed from the DOM and the script has no references to it the element can be garbage collected.</p><p>Unlike <code>Map</code> and <code>Set</code>, <code>WeakMap</code> will never have a way to iterate over the items since that would expose the GC behavior.</p><p></p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/#comments") (thr:count . "2"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/29/12.00.11/feed/atom/") (thr:count . "2"))) (thr:total nil "2"))) ("JavaScript Harmony in Chrome" "<p>We recently added a way to turn on JavaScript Harmony features in Chrome. If you have a <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Canary</a> or a recent <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Developer Channel</a> build of Chrome you can turn on some Harmony features from <code>chrome://flags</code>. You need to manually enter that address in your browser. Look for an entry called ‚ÄúEnable Experimental JavaScript‚Äù</p><p>The following 4 features are currently enabled if you turn on the experiment.</p><ul><li><a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\">Collections (<code>Map</code>, <code>Set</code>, <code>WeakMap</code>)</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/00.00.27/\">Block scoped bindings</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/12.00.40/\"><code>typeof null === 'null'</code></a><li><a href=\"http://erik.eae.net/archives/2011/12/31/00.00.01/\">Proxies</a></ul><p>Over the next couple days I‚Äôll post individual posts about each of these.</p>" "http://erik.eae.net/archives/2011/12/29/00.00.29/" (20843 13945) old 7 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "JavaScript Harmony in Chrome") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/"))) (id nil "http://erik.eae.net/?p=309") (updated nil "2013-04-14T23:06:33Z") (published nil "2011-12-29T08:00:29Z") (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (category ((scheme . "http://erik.eae.net") (term . "Chrome"))) (summary ((type . "html")) "We recently added a way to turn on JavaScript Harmony features in Chrome. If you have a Canary or a recent Developer Channel build of Chrome you can turn on some Harmony features from chrome://flags. You need to manually enter that address in your browser. Look for an entry called &#8220;Enable Experimental JavaScript&#8221; The following ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/12/29/00.00.29/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/12/29/00.00.29/")) "<p>We recently added a way to turn on JavaScript Harmony features in Chrome. If you have a <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Canary</a> or a recent <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Developer Channel</a> build of Chrome you can turn on some Harmony features from <code>chrome://flags</code>. You need to manually enter that address in your browser. Look for an entry called &#8220;Enable Experimental JavaScript&#8221;</p><p>The following 4 features are currently enabled if you turn on the experiment.</p><ul><li><a href=\"http://erik.eae.net/archives/2011/12/29/12.00.11/\">Collections (<code>Map</code>, <code>Set</code>, <code>WeakMap</code>)</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/00.00.27/\">Block scoped bindings</a><li><a href=\"http://erik.eae.net/archives/2011/12/30/12.00.40/\"><code>typeof null === 'null'</code></a><li><a href=\"http://erik.eae.net/archives/2011/12/31/00.00.01/\">Proxies</a></ul><p>Over the next couple days I&#8217;ll post individual posts about each of these.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/#comments") (thr:count . "8"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/12/29/00.00.29/feed/atom/") (thr:count . "8"))) (thr:total nil "8"))) ("Adding transformation passes to Traceur Compiler" "<p>Traceur Compiler is an open source ES.next to ES5 compiler. We released it a while back but today I finished writing a tutorial about how to add new <a href=\"http://code.google.com/p/traceur-compiler/wiki/AddingTransformationPasses\">transformation passes</a>. As you can see it is pretty easy to add new passes and all you need to know is JavaScript to prototype the future of JavaScript now.</p>" "http://erik.eae.net/archives/2011/09/16/21.52.24/" (20843 13955) old 8 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Adding transformation passes to Traceur Compiler") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/"))) (id nil "http://erik.eae.net/?p=302") (updated nil "2013-04-14T23:06:43Z") (published nil "2011-09-17T05:52:24Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (summary ((type . "html")) "Traceur Compiler is an open source ES.next to ES5 compiler. We released it a while back but today I finished writing a tutorial about how to add new transformation passes. As you can see it is pretty easy to add new passes and all you need to know is JavaScript to prototype the future of ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2011/09/16/21.52.24/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2011/09/16/21.52.24/")) "<p>Traceur Compiler is an open source ES.next to ES5 compiler. We released it a while back but today I finished writing a tutorial about how to add new <a href=\"http://code.google.com/p/traceur-compiler/wiki/AddingTransformationPasses\">transformation passes</a>. As you can see it is pretty easy to add new passes and all you need to know is JavaScript to prototype the future of JavaScript now.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/#comments") (thr:count . "1"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2011/09/16/21.52.24/feed/atom/") (thr:count . "1"))) (thr:total nil "1"))) ("Inheritance Antipattern" "<p><a href=\"http://blog.bolinfest.com/\">Michael Bolin</a> wrote an excellent blog post about the <a href=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\">inheritance antipattern</a> that is gaining a lot of foothold among JavaScript developers these days. The post also links to <a href=\"http://bolinfest.com/javascript/inheritance.php\">an article</a> giving a lot more depth on the topic.</p><blockquote cite=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\"><p>
When I attended The Ajax Experience 2009, I saw a number of ‚Äúmisguided‚Äù things that people were doing with JavaScript. [snip].. I wanted to get up and yell, ‚ÄúStop ‚Äî you‚Äôre all doing it wrong!‚Äù
</p></blockquote><p>Although I agree with almost everything Michael writes I think it is worth pointing out some things.</p><h3>Background</h3><p>For those too lazy to read Michael‚Äôs post and article here is an example of the classic inheritance pattern as well as the functional inheritance pattern. This example is intentionally very simple.</p><h4>Classic inheritance pattern</h4><pre>
function Phone(phoneNumber) {
this.phoneNumber_ = phoneNumber;
};
Phone.prototype.getPhoneNumber = function() {
return this.phoneNumber_;
};
</pre><h4>Functional inheritance pattern</h4><pre>
function Phone(phoneNumber) {
var that = {};
that.getPhoneNumber = function() {
return phoneNumber;
};
return that;
};
</pre><h3>Compilation</h3><p>Michael argues that the functional pattern is not good because methods cannot be inlined and the end result is much larger. He also says that it uses more memory. I think it is important to realize that it uses a LOT more memory and is significantly slower. Given a <i>class</i> with 1 methods It is about 100 times slower in Chrome, 20 times slower in Safari and about 10 times slower in Firefox.</p><h3>Prototype object literal</h3><p>Michael also mentions the following pattern:</p><pre>
function Phone(phoneNumber) {
this.phoneNumber_ = phoneNumber;
}
Phone.prototype = {
getPhoneNumber: function() {
return this.phoneNumber_;
}
};
</pre><p>I like this pattern but it has one serious drawback. It cannot be used to extend existing <i>classes</i> because in that case the protytype must be an instance of the <i>class</i> you are inheriting from.</p><p>If you do not care about IE support this can be done by using <code>__proto__</code> like this:</p><pre>
function SmartPhone(phoneNumber) {
Phone.call(this, phoneNumber);
}
SmartPhone.prototype = {
<b>__proto__: Phone.prototype,</b>
sendEmail: function(email) {
...
}
};
</pre><h3>Semantics</h3><p>I understand why people like Douglas Crockford preaches the functional inheritance pattern. Due to its closure the local variable is truly private and this is important when you are doing mashups and other security sensitive code. However, when it comes to building large scale applications like Gmail you cannot afford this extra memory and performance overhead.</p><h3>Conclusion</h3><p>Prototype based inheritance is the way to go if you care about memory usage and performance. If you are planning to use the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> you will also see greater code size reduction using this pattern.</p><h3>Update</h3><p>As some people pointed out method dispatch is slightly slower using the classic inheritance pattern because we have to walk the prototype chain to find the method. I‚Äôm also posting my tests and results for reference:</p><ul><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-perf.html\">Create test</a></li><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-call-perf.html\">Method dispatch test</a></li><li><a href=\"http://spreadsheets.google.com/pub?key=tNL6gDY557Bb4aQjSb6rQ9g&output=html\">Table of results</a></li></ul><p>You might need to reduce the number of runs to get this to wrok in IE. The only surprising thing here is that the classical pattern is faster in Firefox nightlies.</p>" "http://erik.eae.net/archives/2009/11/09/21.12.16/" (20843 13963) old 9 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Inheritance Antipattern") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/"))) (id nil "http://erik.eae.net/?p=286") (updated nil "2013-04-14T23:06:51Z") (published nil "2009-11-10T05:12:16Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "Michael Bolin wrote an excellent blog post about the inheritance antipattern that is gaining a lot of foothold among JavaScript developers these days. The post also links to an article giving a lot more depth on the topic. When I attended The Ajax Experience 2009, I saw a number of &#8220;misguided&#8221; things that people were ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2009/11/09/21.12.16/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2009/11/09/21.12.16/")) "<p><a href=\"http://blog.bolinfest.com/\">Michael Bolin</a> wrote an excellent blog post about the <a href=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\">inheritance antipattern</a> that is gaining a lot of foothold among JavaScript developers these days. The post also links to <a href=\"http://bolinfest.com/javascript/inheritance.php\">an article</a> giving a lot more depth on the topic.</p><blockquote cite=\"http://blog.bolinfest.com/2009/11/closure-compiler-turns-pattern-into.html\"><p>
When I attended The Ajax Experience 2009, I saw a number of &#8220;misguided&#8221; things that people were doing with JavaScript. [snip].. I wanted to get up and yell, &#8220;Stop &#8212; you&#8217;re all doing it wrong!&#8221;
</p></blockquote><p>Although I agree with almost everything Michael writes I think it is worth pointing out some things.</p><h3>Background</h3><p>For those too lazy to read Michael&#8217;s post and article here is an example of the classic inheritance pattern as well as the functional inheritance pattern. This example is intentionally very simple.</p><h4>Classic inheritance pattern</h4><pre>
function Phone(phoneNumber) {
  this.phoneNumber_ = phoneNumber;
};

Phone.prototype.getPhoneNumber = function() {
  return this.phoneNumber_;
};
</pre><h4>Functional inheritance pattern</h4><pre>
function Phone(phoneNumber) {
  var that = {};
  that.getPhoneNumber = function() {
    return phoneNumber;
  };
  return that;
};
</pre><h3>Compilation</h3><p>Michael argues that the functional pattern is not good because methods cannot be inlined and the end result is much larger. He also says that it uses more memory. I think it is important to realize that it uses a LOT more memory and is significantly slower. Given a <i>class</i> with 1 methods It is about 100 times slower in Chrome, 20 times slower in Safari and about 10 times slower in Firefox.</p><h3>Prototype object literal</h3><p>Michael also mentions the following pattern:</p><pre>
function Phone(phoneNumber) {
  this.phoneNumber_ = phoneNumber;
}
Phone.prototype = {
  getPhoneNumber: function() {
    return this.phoneNumber_;
  }
};
</pre><p>I like this pattern but it has one serious drawback. It cannot be used to extend existing <i>classes</i> because in that case the protytype must be an instance of the <i>class</i> you are inheriting from.</p><p>If you do not care about IE support this can be done by using <code>__proto__</code> like this:</p><pre>
function SmartPhone(phoneNumber) {
  Phone.call(this, phoneNumber);
}
SmartPhone.prototype = {
  <b>__proto__: Phone.prototype,</b>
  sendEmail: function(email) {
    ...
  }
};
</pre><h3>Semantics</h3><p>I understand why people like Douglas Crockford preaches the functional inheritance pattern. Due to its closure the local variable is truly private and this is important when you are doing mashups and other security sensitive code. However, when it comes to building large scale applications like Gmail you cannot afford this extra memory and performance overhead.</p><h3>Conclusion</h3><p>Prototype based inheritance is the way to go if you care about memory usage and performance. If you are planning to use the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> you will also see greater code size reduction using this pattern.</p><h3>Update</h3><p>As some people pointed out method dispatch is slightly slower using the classic inheritance pattern because we have to walk the prototype chain to find the method. I&#8217;m also posting my tests and results for reference:</p><ul><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-perf.html\">Create test</a></li><li><a href=\"https://dl.dropbox.com/u/182043/inheritance-call-perf.html\">Method dispatch test</a></li><li><a href=\"http://spreadsheets.google.com/pub?key=tNL6gDY557Bb4aQjSb6rQ9g&#038;output=html\">Table of results</a></li></ul><p>You might need to reduce the number of runs to get this to wrok in IE. The only surprising thing here is that the classical pattern is faster in Firefox nightlies.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/#comments") (thr:count . "20"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2009/11/09/21.12.16/feed/atom/") (thr:count . "20"))) (thr:total nil "20"))) ("Closure" "<p>Today we finally announced and released Closure (or Closure Library as the JS library is officially known as).</p><h3>History</h3><p>Me and <a href=\"http://pupius.co.uk/blog/\">Dan Pupius</a> started the JS library at Google a long time ago. At the time there was a lot of good JS code at Google but there was really no order to it and the code was spread out all over the code base. This of course made it hard to discover which in turn lead to the same code being reimplemented over and over. As you might guess the code that existed was not very consistent and sometimes did not even work in the presence of other code. Closure was an attempt to bring a <a href=\"http://en.wikipedia.org/wiki/Closure_(psychology)\">closure</a> to this mess. The name is also a play on the <a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\">programming language feature</a> as well as the desire to make our js library be a <a href=\"http://en.wikipedia.org/wiki/Transitive_closure\">closure</a> of all the existing js code at Google.</p><p>At the time we were considering using <a href=\"http://www.dojotoolkit.org/\">Dojo</a> as our base for this new library. We were very impressed with Dojo but back then Dojo was too unstable and we had heard too many horror stories of upgrade migration head aches. We also looked at <a href=\"http://mochikit.com/\">MochiKit</a> which was more stable but it did not really solve any of our problems. (<a href=\"third_party\">*</a>)</p><h3>Today</h3><p>We have had more than 400 Google engineer contributing code to Closure. The code is constantly evolving but I feel like it has stabilized a lot over the last year or so. It is used by almost all of Google‚Äôs web applications and the amount of QA and usage these apps have is unheard of for any web application.</p><p>I‚Äôm very happy that <a href=\"http://www.nanaze.com/\">Nathan</a> and <a href=\"http://www.ginnotvodka.com/\">Daniel</a> took upon themselves to release this because neither me nor Dan has had the bandwidth to do it.</p><h3>Future</h3><p>I hope we can see more code being shared among the different open source JS libraries out there. We would love to be able to <code>goog.require</code> some Dojo code (especially their data model code) and I‚Äôm sure they would love to be able to <code>dojo.require</code> our data structures and i18n code.</p><h3>Closure Compiler</h3><p>Closure relies heavily on the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> to concatenate files, doing static type analysis, as well as code optimizations such as inlining and dead code removal. Closure Library is great for prototyping but it gets slow real fast due to all the network request that are done at startup as well as downloading all the code that you do not really need. The compiler solves both these problems.</p><h4 id=\"third_party\">Third Party Code</h4><p>We ended up using both Dojo (we use Acme for <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/dojo/dom/query.js\">goog.dom.query</a>) and we use MochiKit‚Äôs Deferred in <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/mochikit/async/deferred.js\">goog.async.Deferred</a>.</p>" "http://erik.eae.net/archives/2009/11/05/22.27.29/" (20843 14000) old 10 nil nil ((author nil (name nil "Erik Arvidsson") (uri nil "http://erik.eae.net")) (title ((type . "html")) "Closure") (link ((rel . "alternate") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/"))) (id nil "http://erik.eae.net/?p=271") (updated nil "2013-04-14T23:07:28Z") (published nil "2009-11-06T06:27:29Z") (category ((scheme . "http://erik.eae.net") (term . "Uncategorized"))) (category ((scheme . "http://erik.eae.net") (term . "Google"))) (category ((scheme . "http://erik.eae.net") (term . "JavaScript"))) (summary ((type . "html")) "Today we finally announced and released Closure (or Closure Library as the JS library is officially known as). History Me and Dan Pupius started the JS library at Google a long time ago. At the time there was a lot of good JS code at Google but there was really no order to it and ...<a class=\"post-readmore\" href=\"http://erik.eae.net/archives/2009/11/05/22.27.29/\">read more</a>") (content ((type . "html") (xml:base . "http://erik.eae.net/archives/2009/11/05/22.27.29/")) "<p>Today we finally announced and released Closure (or Closure Library as the JS library is officially known as).</p><h3>History</h3><p>Me and <a href=\"http://pupius.co.uk/blog/\">Dan Pupius</a> started the JS library at Google a long time ago. At the time there was a lot of good JS code at Google but there was really no order to it and the code was spread out all over the code base. This of course made it hard to discover which in turn lead to the same code being reimplemented over and over. As you might guess the code that existed was not very consistent and sometimes did not even work in the presence of other code. Closure was an attempt to bring a <a href=\"http://en.wikipedia.org/wiki/Closure_(psychology)\">closure</a> to this mess. The name is also a play on the <a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\">programming language feature</a> as well as the desire to make our js library be a <a href=\"http://en.wikipedia.org/wiki/Transitive_closure\">closure</a> of all the existing js code at Google.</p><p>At the time we were considering using <a href=\"http://www.dojotoolkit.org/\">Dojo</a> as our base for this new library. We were very impressed with Dojo but back then Dojo was too unstable and we had heard too many horror stories of upgrade migration head aches. We also looked at <a href=\"http://mochikit.com/\">MochiKit</a> which was more stable but it did not really solve any of our problems. (<a href=\"third_party\">*</a>)</p><h3>Today</h3><p>We have had more than 400 Google engineer contributing code to Closure. The code is constantly evolving but I feel like it has stabilized a lot over the last year or so. It is used by almost all of Google&#8217;s web applications and the amount of QA and usage these apps have is unheard of for any web application.</p><p>I&#8217;m very happy that <a href=\"http://www.nanaze.com/\">Nathan</a> and <a href=\"http://www.ginnotvodka.com/\">Daniel</a> took upon themselves to release this because neither me nor Dan has had the bandwidth to do it.</p><h3>Future</h3><p>I hope we can see more code being shared among the different open source JS libraries out there. We would love to be able to <code>goog.require</code> some Dojo code (especially their data model code) and I&#8217;m sure they would love to be able to <code>dojo.require</code> our data structures and i18n code.</p><h3>Closure Compiler</h3><p>Closure relies heavily on the <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a> to concatenate files, doing static type analysis, as well as code optimizations such as inlining and dead code removal. Closure Library is great for prototyping but it gets slow real fast due to all the network request that are done at startup as well as downloading all the code that you do not really need. The compiler solves both these problems.</p><h4 id=\"third_party\">Third Party Code</h4><p>We ended up using both Dojo (we use Acme for <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/dojo/dom/query.js\">goog.dom.query</a>) and we use MochiKit&#8217;s Deferred in <a href=\"http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/mochikit/async/deferred.js\">goog.async.Deferred</a>.</p>
") (link ((rel . "replies") (type . "text/html") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/#comments") (thr:count . "23"))) (link ((rel . "replies") (type . "application/atom+xml") (href . "http://erik.eae.net/archives/2009/11/05/22.27.29/feed/atom/") (thr:count . "23"))) (thr:total nil "23"))))