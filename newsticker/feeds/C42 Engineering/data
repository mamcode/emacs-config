;; -*- coding: utf-8 -*-
(("C42 Engineering" nil "http://blog.c42.in/" (20845 61559 560006) feed 0 nil nil ((title nil "C42 Engineering") (link nil "http://blog.c42.in/") (lastBuildDate nil "Tue, 02 Apr 2013 07:32:07 +0000") (language nil "en-US") (generator nil "Site Server v6.0.0 (http://www.squarespace.com)") (description nil) (item nil (title nil "The C42 guide to good code: 1 - Code Smells") (category nil "good code") (category nil "code smells") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 18 Mar 2013 07:59:42 +0000") (link nil "http://blog.c42.in/blog/the-c42-guide-to-good-code-1-code-smells") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:51419fd6e4b0d6e2ee8877eb") (description nil "<br><p></p><p>This post is the first of a line of posts that are a guide to what we believe is good code. This first one is all about <strong>Code Smells</strong>.
These are indicators that your code is hiding a deeper problem.</p><ul><li><a href=\"http://blog.c42.in#law-of-demeter\">Law of Demeter</a></li><li><a href=\"http://blog.c42.in#tell-don-39-t-ask\">Tell Don't Ask</a></li><li><a href=\"http://blog.c42.in#law-of-7\">Law of 7</a></li><li><a href=\"http://blog.c42.in#polymorphism-over-if-conditions-and-switch-case\">Polymorphism over if conditions and switch/case</a></li></ul><hr><h3>Law of Demeter</h3><p>The formal definition for the law of demeter can be found on <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">Wikipedia</a>, but we will summarise to say that method calls in the following form are a really bad idea.</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-before.rb\"></script><noscript><pre>dog.legs.walk!</pre></noscript></p><p>Instead, create a delegator in the parent class</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after.rb\"></script><noscript><pre>class Dog
  def move!
    legs.walk!
  end
end

dog.move!</pre></noscript></p><p>This allows Dog to control how it walks. If someday, we invent a robot dog that walks using a hover device, then we need only to change the implementation of walk!, that is internal to dog, and the external world need not do</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after-two.rb\"></script><noscript><pre>dog.legs.walk! if dog.normal?
dog.hover_craft.hover! if dog.robot?</pre></noscript></p><p>More formally:</p><blockquote><p>Every method <strong>M</strong> on an object <strong>O</strong> should only access these types of methods:</p><ul><li>methods on <strong>O</strong> itself</li><li>methods on <strong>M</strong>'s parameters</li><li>methods on any objects created/instantiated within <strong>M</strong></li><li>methods on <strong>O</strong>'s component objects</li></ul></blockquote><hr><h3>Tell Don't Ask</h3><p>When you want an object to perform an action, never ask the object for information about it's state, make a decision based on the information, and then tell the object to perform the appropriate action.</p><blockquote><p>The responsibility of how to perform the action should reside in that object, not the caller. In short, tell the object what you want it to do, and let that object worry about how to do it.</p></blockquote><p><em>Bad</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-bad.rb\"></script><noscript><pre>if account.balance &gt;= amount
  account.deduct(amount)
else
  raise NotEnoughBalance
end

class Account
  def deduct(amount)
    balance -= amount
  end
end</pre></noscript></p><p><em>Good</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-good.rb\"></script><noscript><pre>account.deduct(amount)

class Account
  def deduct(amount)
    raise NotEnoughBalance unless balance &gt;= amount
    balance -= amount
  end
end</pre></noscript></p><p>Read further on <a href=\"http://c2.com/cgi/wiki?TellDontAsk\">c2</a>.</p><hr><h3>Law of 7</h3><blockquote><p>If a method is over 7 lines of code, more often than not the method would be doing more than what it should, and a candidate for refactoring. At the very least, pull out a private method to improve readability of the large method.</p></blockquote><p>Having a single level of indentation makes it obvious what every method does at a glance.
For example:</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-bad.rb\"></script><noscript><pre>
def self.import_from_csv(csv)
  csv.each_line do |line|
    if line[&quot;type&quot;] == &quot;distributer&quot;
      Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
    else
      Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
    end
  end
end</pre></noscript></p><p>can be replaced with</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-good.rb\"></script><noscript><pre>def self.import_line(line)
  if line[&quot;type&quot;] == &quot;distributer&quot;
    Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
  else
    Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
  end
end

def self.import_from_csv(csv)
  csv.each_line do |line|
    import_line(line)
  end
end</pre></noscript></p><hr><h3>Polymorphism over if conditions and switch / case</h3><blockquote><p>Avoid if conditions &amp; switch / cases whenever possible, instead preferring polymorphism over them.</p></blockquote><p>Whenever possible, try to isolate the place where switch/cases are used to a single method where appropriate strategy (Strategy Pattern) is created to care of the behaviour, and allow polymorphism to take over.</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-bad.rb\"></script><noscript><pre>def expiry_date
  case plan_type
  when 'subscription' then next_month
  when 'prepaid' then never
  end
end

def monthly_charge
  case plan_type
  when 'subscription' then 300
  when 'prepaid' then 0
  end
end

def charge_per_rental
  case plan_type
  when 'subscription' then 0
  when 'prepaid' then 100
  end
end</pre></noscript></p><p>becomes</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-good.rb\"></script><noscript><pre>class SubscriptionPlan
  attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end

class PrepaidPlan
  attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end

def plan_type
  case plan_type
  when 'subscription' then SubscriptionPlan.new
  when 'prepaid' then PrepaidPlan.new
  end
end

def expiry_date
  plan_type.expiry_date
end

def monthly_charge
  plan_type.monthly_charge
end

def charge_per_rental
  plan_type.charge_per_rental
end
</pre></noscript></p><hr><p>If you must use if conditions, then use it in one of the forms:</p><p><script src=\"https://gist.github.com/5185977.js?file=if-must.rb\"></script><noscript><pre>def sales_tax
  return 0 if purchaser.exempt_from_taxes?
  price * .10
end

def car.brake
  switch_on_brake_light
  unless stopped?
    slow_down
  end
end</pre></noscript></p><hr><p>Contributors:</p><ul><li>Tejas Dinkar</li><li>Niranjan Paranjape</li><li>Smit Shah</li><li>Srihari Sriraman</li></ul>
")) (item nil (title nil "Agile delivery needs design facilitators") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 05 Nov 2012 15:11:00 +0000") (link nil "http://blog.c42.in/blog/agile-delivery-needs-design-facilitators-to-e") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e77e") (description nil "<p>With the growing awareness of the need to integrate user experience design into agile delivery, there is now a better recognition of the role played by design facilitators in enabling good design faster. &nbsp;I wrote a blog post to share my insights on what should be a design facilitator's playbook:</p><p><span><strong><a href=\"http://www.anuramaswamy.com/?p=891\">A design facilitator's playbook</a></strong></span></p><p>Would love to hear your thoughts and insights!</p>")) (item nil (title nil "How would you describe RubyMonk's interface?") (dc:creator nil "Steven Deobald") (pubDate nil "Fri, 11 May 2012 05:03:00 +0000") (link nil "http://blog.c42.in/blog/how-would-you-describe-rubymonks-interface") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e780") (description nil "<p>We receive a lot of love from our users about <a href=\"http://www.rubymonk.com\">RubyMonk</a>'s visual design. And while we agree -- it's super cute! -- the site's visuals are hardly its interface. The \"user interface\" for RubyMonk is really the boundary between the student and the mentor.</p><p>How do we evaluate your code? How do we decide whether it is correct or not? These are the interesting questions in the user interaction. And, as emerges in the design of any product, these questions highlight the necessary unification of form and function, engineering and design, purpose and path. When you boil it down, the purpose of RubyMonk is to automate the teacher. On some level, this goal might seem akin to beating the Turing Test. In its current incarnation things are much simpler, of course.</p><p>I've explored this idea a bit in my post \"<a href=\"http://blog.deobald.ca/2012/05/defining-interface-for-rubymonk.html\">defining the interface for rubymonk</a>\". Take a look and check back soon as I take this idea forward to discuss the yin and yang of tests and the boundaries they exercise.</p>")) (item nil (title nil "Why you should respect deprecation warnings") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 11 May 2012 03:04:00 +0000") (link nil "http://blog.c42.in/blog/why-you-should-respect-deprecation-warnings") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e782") (description nil "<p>At C42, I have worked on multiple Ruby on Rails migration projects. A simple task of upgrading an application from Rails 2.3 to Rails 3, can take anywhere from two days to three months. After such experiences, I have developed a small set of rules to make sure, my projects don't run into these two to three months long upgrades. A blog post by me on, how a simple <a href=\"http://blog.aakashd.com/why-you-should-respect-deprecation-warnings\">discipline of fixing deprecation warnings</a> can help you maintain your ruby applications in the long run.</p>")) (item nil (title nil "C42 Launchpad - bridging the gap between hackers and the industry") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 10 Apr 2012 04:02:00 +0000") (link nil "http://blog.c42.in/blog/c42-launchpad") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e784") (description nil "<p>At C42 Engineering, we spend about 108 man hours for every good developer we hire. For a small product company, I would rather spend that time developing features. We've always wanted to hire more awesome developers with less effort, and I think we may have a way to do just that.</p><p>We receive about 30-40 resumes a month. Our interview process, although time consuming, allows us to know the candidate better. Even before we call them to our office, we spend about half an hour with each candidate on the phone. Every face to face interview takes about 6 hours. After this extensive investment of time and energy, we consider ourselves lucky if we hire 1 developer a month, i.e. conversion rate of 2.5%, something we always wanted to improve.</p><p>While speaking with other startups at RubyConf India 2012, I realized, rather, that a 2.5% conversion rate is extremely high. I have heard horror stories of interviewing 150 candidates to hire one or two developers. The point is, businesses spend enormous amounts of energy and money in the hiring market with returns that are too low to be considered acceptable.</p><p>If we ask any consultancy or product company what skill set they would like prospective hires to have, the following common points come up over and over:</p><ul><li>Understands what is good code</li><li>Understands maintainability</li><li>Understands Object Oriented Programming principles</li><li>Familiarity with TDD</li><li>Deployments and DevOps</li><li>Awareness of standards and conventions</li></ul><p>In summary, every business needs developers who care about good code and are capabale of being productive from day one.</p><p><strong>The missing rockstars</strong></p><p>Most engineers who don't make it through our interview process are asked to apply again in six months. We don't do it just out of politeness, but because we actually believe that they can in time grow to become the capable developers we need.</p><p>These developers have the potential and inclination to become experts, but lack the correct exposure and guidance. Focused training on OO, TDD and Agile, with discussions around nuances of development practices and principles will convert these talented folk into the rockstars that every company seeks.</p><p>As always, we gave this feedback to the candidates in question. A consistent pattern emerged where candidates would get back to us asking for more information on how they could go about learning the requisite skills.</p><p>Unfortunately, there are no organizations like <a href=\"https://www.hackerschool.com/\">hacker/school</a>&nbsp;in India, places that expose programmers to the art of software craftsmanship. Be it universities or university-like classroom training programs, they just can't keep up with our fast moving industry. The gap is already large and growing every day.</p><p>Most lot of these skills are best learned by working closely with experienced developers and following practices for an extended duration. A 2 or 3 day workshop is useful for knowledge transfer, but it's impossible to develop discipline or grok the principles underlying the methodology in that short a duration.</p><p><strong>The launchpad</strong></p><p>C42 Launchpad hopes to be an answer to this problem. A 4-6 weeks full time hands-on workshop that will cover everything C42 Engineering expects a developer to know before she starts working on a codebase. We will have different batches for fresh graduates and for experienced developers. A rough sketch of the program for freshers:</p><ul><li> Programming 101                     
<ul><li>Introduction to Ruby</li><li>Introduction to Git</li><li>OO Design Principles</li><li> OO Patterns                         
<ul><li>Creational</li><li>Structural</li><li>Behavioral</li></ul></li><li>Programming/Design anit-patterns</li></ul></li><li> Web Application Development                     
<ul><li> Working within browsers                         
<ul><li>Introduction to HTML &amp; DOM</li><li>Introduction to CSS</li><li>Introduction to Javascript and Prototype based programming</li></ul></li><li> Ruby on Rails 101                         
<ul><li>Journey through Rails components</li><li>TDD with rails</li></ul></li></ul></li><li> Introduction to Agile                     
<ul><li>Agile principles</li><li>Planning and estimation</li><li>Importance of Automated Testing and Continuous Integration</li><li>Pair programming, TDD, Simple Design, Refactoring</li><li>Basics of XP and Scrum</li></ul></li><li>2 Weeks of Ruby on Rails project development in teams, following all the methodologies and principles mentioned above.</li></ul><p>The course structure as you can see is still being finalized, but the guiding principle is simple. Provide opportunity and inspiration to the willing engineers to hone their skills.</p><p><strong>Bridging the gap</strong></p><p>Lots of potential hackers join the Indian IT industry with big dreams. Due to lack of inspiration and opportunities, they stop caring about programming and become an hourly billable unit in an excel sheet somewhere. We want to show them what real development feels like, enable them with both the tools and the practices to become productive and enjoy coding as we do.</p><p>Providing this training is pointless if they don't get to work at places where these skills are appreciated. A number of startups in India are being limited by the shortage of technical talent. Businesses are unable to grow as they struggle to hire talented programmers that can build high quality, maintainable codebases that scale and are easy to change. If their codebases are in good hands, business owners are free to concentrate on the non-technical aspects that are often extremely critical for the success of the business.</p><p>We plan to connect developers, who are looking for new challenges, with companies who need and appreciate the value they bring to the table.</p><p>&nbsp;</p><p><em>Aakash is <a href=\"http://c42.in/people#aakash-dharmadhikari\">VP Consulting</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"https://twitter.com/#!/aakashd\">@aakashd</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>")) (item nil (title nil "No virtuous circle, or how India's Silicon Valley is... different") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 06 Apr 2012 10:25:00 +0000") (link nil "http://blog.c42.in/blog/no-virtuous-circle-or-how-indias-silicon-vall") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78b") (description nil "<p>A blog post by me <a href=\"http://blog.sidu.in/2012/04/no-virtuous-circle-or-how-indias.html\">explaining my take on India's startup scene</a>, something which has directly impacted C42 Engineering's business model.</p>")) (item nil (title nil "Why I design for C42 Engineering, and why you should too") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 06 Apr 2012 06:29:00 +0000") (link nil "http://blog.c42.in/blog/why-i-design-for-c42-engineering-and-why-you") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78d") (description nil "<p>After 13 years of helping companies of all shapes and sizes design products and applications, I joined C42 Engineering a couple of months ago to start our experience design practice, based in the Bay Area. &nbsp;I&rsquo;m not sure if the phrase &lsquo;design practice lead&rsquo; reflects what I do, but I'll get to that later. &nbsp;As you can imagine, for a young start-up in India that is making significant investments in developing products, it is challenging to support my market salary in the US.&nbsp; So, I chose to earn a variable income, with the optimism of growing our business in the US market, offering services in software design and development.&nbsp;</p><p>My decision has been met with a variety of reactions - some positive, and a lot skeptical. &nbsp;For me, this move was the most logical next step, and a no-brainer. &nbsp;The main challenge so far has been explaining its rewards to a husband who is a mergers and acquisitions consultant, and I&rsquo;ve come out in flying colors on that one.&nbsp; Here&rsquo;s why I think C42 is going to be an organization of choice for other designers as well:</p><p><strong>&nbsp;At C42, the whole is greater than the sum of its parts</strong></p><p>\"In order to achieve high-quality user experience in a company's offerings, there must be a seamless merging of the services of multiple disciplines, including engineering, marketing, graphical and industrial design, and interface design\" (quoting Nielsen Norman). I know this is true from having practiced collaborative design in a variety of environments. &nbsp;But, I am yet to see another organization where personal agendas and turf wars have not got in the way of achieving this seamless merging. &nbsp;At best, you might have engineering, product management, and design teams having regular meetings, and more commonly each of them throwing deliverables over the cube to each other.&nbsp; Ultimately, the product suffers, and the user&rsquo;s experience is compromised. C42 being a small team seeded with talented engineers who aren&rsquo;t sniffled by silos and roles, is extremely well positioned to deliver products and solutions that are beautifully designed and engineered by a multi-disciplinary team.</p><p><strong>At C42, it will be as beautiful as possible, even if it's inside the box</strong></p><p>I&rsquo;ve met several designers with great ideas for product designs, frustrated that those designs just show up in their portfolio, and haven&rsquo;t made it into the hands of the user. &nbsp;At C42, you will experience the satisfaction and joy of seeing your design ideas get delivered.&nbsp; What&rsquo;s more impressive is the passion and commitment with which the team writes beautiful code.&nbsp; If you&rsquo;re a passionate designer, you can relate to what Steve Jobs said about the PC board &ldquo;I want it to be as beautiful as possible, even if it&rsquo;s inside the box. &nbsp;A great carpenter isn&rsquo;t going to use lousy wood for the back of a cabinet, even though nobody&rsquo;s going to see it.&rdquo;&nbsp;&nbsp;</p><p><strong>C42 Labs is design thinking in action</strong></p><p>The empathy with which C42's first product (<a href=\"http://rubymonk.com/\">rubymonk.com</a>) was designed, the extreme collaboration and iterative prototyping that's gone into its releases - is design thinking in action. &nbsp;If you are interested in leading through design, I invite you to see how C42 Labs develops products. If design thinking is more doing than thinking, then, the team does one heck of a lot of design thinking. &nbsp;It provides a solid platform for professional growth and thought leadership in the design community.</p><p>So, if you are someone who cares about the user more than your design portfolio, someone who believes that user experience should be second nature to software engineering teams, someone who is committed to making the power of extreme collaboration work in creating great products, you want to talk to us.</p><p>&nbsp;</p><p><em>Anu is the <a href=\"http://c42.in/people#anu-ramaswamy\">Practice Lead for User Experience Design</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"http://twitter.com/anu5ramaswamy\">@anu5ramaswamy</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>")) (item nil (title nil "Want designers who code? Something's got to give.") (dc:creator nil "C42 Engineering") (pubDate nil "Sun, 25 Mar 2012 14:31:00 +0000") (link nil "http://blog.c42.in/blog/115393134") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78e") (description nil "<p>While we at C42 continue to debate this topic amongst ourselves, thought I'd share my thoughts, and hear what others have to say. &nbsp;Let us know what you think.</p><p><a href=\"http://www.anuramaswamy.com/?p=423\">Want designers who code? Something's got to give</a>.</p>")) (item nil (title nil "Three years in a row: We're speaking at RubyConf India once again") (dc:creator nil "C42 Engineering") (pubDate nil "Wed, 21 Mar 2012 17:45:00 +0000") (link nil "http://blog.c42.in/blog/three-years-in-a-row-were-speaking-at-rubycon") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78f") (description nil "<p>We've got three talks&nbsp;at this years <a href=\"http://rubyconfindia.org/2012\">RubyConf India</a>. Here's a quick list - click through for more details.</p><ul><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#sandboxing-ruby-code\">Sandboxing Ruby Code - Lessons from the battlefield</a>,\" by <a href=\"http://c42.in/people#tejas-dinkar\">Tejas Dinkar</a> and <a href=\"http://c42.in/people#jasim-basheer\">Jasim Basheer</a></li><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#clojure-is-my-favourite-ruby\">Clojure is my favourite ruby</a>,\" by <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li><li>\"Testing patterns,\" by Sidu Ponnappa and Aninda Kundu&nbsp;</li></ul><p>We're also happy to be one of the sponsors the event for the second year running.</p><p><a href=\"http://rubyconfindia.org/\"><img src=\"http://rubyconfindia.org/2012/assets/badges/sponsor.png\" /><br/></a></p><p>Most of C42 is flying out to Pune for RubyConf India, so do say hello if you're going to be there.</p>")) (item nil (title nil "TDD isn't about testing, it's about design") (dc:creator nil "C42 Engineering") (pubDate nil "Sat, 17 Mar 2012 13:20:00 +0000") (link nil "http://blog.c42.in/blog/tdd-isnt-about-testing-its-about-design") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e790") (description nil "<p>The reason I haven't written about this before is because in certain circles, this post would be stating the obvious. However, it's become increasing clear to me that in the mad rush to prove that they 'get testing,' most new Ruby/Rails programmers completely miss the real reason TDD is so valuable. So, here goes:</p><p><span>\"TDD is not about testing your code. The fact that your code gets tested is a valuable side effect.\"</span><p /><span>The hardest part of writing code is keeping all of the moving parts in your head so you know exactly what side-effects the new code you're writing will have on existing code. This is how most bugs crop up. Nobody <em>wants</em> to introduce a bug, but the chain of cause and effect in a non-trivial codebase can be very hard to follow. Everyone runs into this sooner or later, and this has been named \"<a href=\"http://lwn.net/2000/0824/a/esr-sharing.php3\">The curse of the gifted programmer</a>\" (in a different context, but the principle applies).</span><p /><span>TDD is a tool which allows you to use your tests to break the code you're working on down into tiny chunks, thereby reducing what you need to hold in your head, in turn reducing the likelihood of you introducing defects and making it easier for you to understand what's going on. The fact that the the test suite thus produced can subsequently be used for regression testing is a very positive and useful side-effect, but a side-effect nonetheless.</span></p><p>A few other conclusions can be derived from this statement:</p><ul><li>Languages and codebases which eschew side-effects and thereby achieve the same goal of reducing the quantity of code programmers need to hold in their heads see decreased or negligible value from TDD.</li><li>If you and your team are smart enough, you don't need TDD because holding code in your head isn't a problem. You know you're this smart when you can consistently hold in your head the cause and effect chain&nbsp;across your entire codebase&nbsp;for any change you or your colleagues make.</li><li>If you <em>can't</em> test drive a particular piece of code, either you know too little about possible solutions, or you have poorly factored code. Consequently, you can use TDD as a sort of canary-in-the-coalmine to figure out which bits of your codebase could be better factored.</li></ul><p><span>If testing was what TDD was about, TDD (test first) and unit testing (test last) would be equivalent. They aren't.</span></p><p>&nbsp;</p>")) (item nil (title nil "Memories of conf.KDE.in") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 16 Mar 2012 14:45:00 +0000") (link nil "http://blog.c42.in/blog/memories-of-confkdein") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e792") (description nil "<p>Well they say in solitude you sometimes remember your fondest memories, I would like to share with one you folks.</p><p>Today morning I realized that it was March, now March might be an ordinary month for most of you but looking back I can say for sure it was and it still is special for me;&nbsp; I can clearly recall the events that occurred and how they changed my life.</p><p>A year back the first KDE conf India happened from 9-13th of March, I remember I was more of an ordinary student in the class, I had a decent GPA and I used to get by without much trouble for the most part but somehow on 9th I had an urge to attend KDE conf despite it had 700 bucks for registration and my HOD(Head of Department) had clearly denied the request to attend it, but I still went for the conference as it was happening right below my department.</p><p>I wish I could say that after attending the very first talk of the conference my life changed but in actuality nothing happened ;&nbsp; I met really smart people but that just increased my insecurity and I couldn&rsquo;t follow most of the talks. I was doubting if I made right choice of attending it in the first place, both 9th &ndash; 10th went without any feelings that I learned something valuable, something which I could have followed and used in my daily life.</p><p>Than came <strong>11th March</strong>, the day was normal till the afternoon after that we had a hands-on bug squashing lab, where young KDE developers would guide us by fixing a bug from KDE bugzilla. Since it was the last day for the talks and I was tired with all the information i received which I couldn&rsquo;t made sense of; I wanted to skip the lab but somehow I didn&rsquo;t do that for some reason. In the lab we had to solve a bug in Rekonq (a browser bundled with KDE) the bug description said that it had to something to do with ad blockers, now I used to browse the internet before and I knew a thing or two about how Ad-blockers work; so I quickly found the code/file which needed to be patched and it was more of a lucky guess then any real skill involved but that was enough as it impressed the KDE developer that were there.</p><p>One particular (Vishesh Handa) came to me and told me that I knew things and I should&nbsp; use my knowledge to write patches for KDE and there is something about it; when a complete stranger sees your work for the first time and praises you for it. I think I was on cloud nine for rest of the day; when I reached my apartment I started looking for sub project to contribute to and I found Nepomuk junior job page which basically consists of easy bugs which can help new people learn about the project, bug fixing and writing patches but I was naive and I didn&rsquo;t know where you can actually find the source code, let alone any knowledge about version control systems.</p><p>Luckily next day it was a hacking session for the speakers; I took that opportunity to meet them and learn how to solve bugs and where to find help in case you don&rsquo;t know what to do. They even gave me a simple bug to get started on which was quite trivial and would take around 3-4 lines of code to solve it but with all things that look simple while looking back, the bug took me more than 6 hours to fix as I was clueless on where exactly i needed to put that code in the first place.Though all of that work didn&rsquo;t go to waste as I remember the feeling when that patch was committed on the next day. I was hooked after that commit and in 3-4 days I submitted even more patches which eventually got committed. After a month or so I finally received my KDE developer account to push my own commits.</p><p>Looking back, if I had not attend the lab or if that KDE developer (Vishesh Handa) hadn&rsquo;t said those things to me, my entire life would have been completely different and I would be a normal guy today working at a MNC but thankfully life had better plans. So many great memories are the result of that one moment and in my heart I still have gratitude for KDE without it I wouldn&rsquo;t have become a contributor, a GSoCer, made smart friends, visited different places, improved my programming skills and maybe biggest of all I wouldn&rsquo;t be a part of <span><a href=\"http://c42.in/people\">c42</a></span> (The place I work at). My entire life from that single moment to the moment when I received my first salary is indebted to KDE.</p><p>Recently, I finally had the chance to catch up with one of my friend from KDE (Shantanu) whom I first met at <a href=\"http://conf.KDE.in\">conf.KDE.in</a> . We kept delaying our meet because of our busy schedules but we finally caught up last Sunday and the last Sunday&nbsp;was on <strong>11th March</strong>. eh, coincidences can be funny sometimes <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1336659725g\" /><br/></p>")) (item nil (title nil "Overcoming UX Exclusivity") (dc:creator nil "C42 Engineering") (pubDate nil "Thu, 15 Mar 2012 10:46:00 +0000") (link nil "http://blog.c42.in/blog/overcoming-ux-exclusivity") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e798") (description nil "<p>Anu Ramaswamy, our Practice Lead for XD writes about why <a href=\"http://www.anuramaswamy.com/?p=121\">UX should be second nature to software development teams</a>. Take a look and let us know what you think!</p>")) (item nil (title nil "Frequently asked questions about Rails migrations") (dc:creator nil "C42 Engineering") (pubDate nil "Sat, 10 Mar 2012 21:05:00 +0000") (link nil "http://blog.c42.in/blog/common-questions-about-rails-migrations") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e799") (description nil "<p>At C42 Engineering we have been consulting with a lot of teams who use Rails. Surprisingly the most misunderstood tool in Rails is migrations. I am going to shed some light on how I think schema should be managed on a rails project. This is not a tutorial for rails migrations, but rather a collection of frequent questions we get from these teams and their answers.</p><p>Please feel free to share your experiences and point out any flaws you may find in the arguments.</p><p>Let's take a look at the two components that make your schema migration a child's play.</p><h4>1. Migration Files</h4><p>This is where we start defining our schema from the first commit and incrementally change the schema with every new migration we add. As Rails can track which migrations have been applied and which are new, a developer can confidently run \"rake db:migrate\" and assume that he has the latest schema. Migration files, as the name suggests, should be used to migrate an existing schema to next version only. Once you have used a migration file, it's purpose is served and you do not need it anymore.</p><h4>2. Schema dumps (db/schema.rb or db/structure.sql)</h4><p>The schema dump is the only authoritative source of your DB schema. While creating a schema from scratch on development, staging or production system, a developer must use these dumps to create the schema.</p><h3>Question 1: should I check in schema.rb?</h3><p>Yes, you must. The schema.rb will be used by everyone to create their database from scratch and thus the latest schema.rb must be checked into the repository. You will get occasional merge conflicts, but you may safely accept the latest versions if you are going to run migrations after every pull.</p><h3>Question 2: The schema definition is duplicated into migrations and schema.rb, why do I need both?</h3><p>A migration is not a definition of your schema. It's sole purpose is to convey the schema change required by a developer to existing application installations. It defines these incremental changes, and must be used only for applying these changes to existing installations. To check the current schema definition, you should depend on schema.rb only.</p><p>At the risk of repeating this for the tenth time, if you look at migrations as code to be used only for changing existing databases, you can make your life easier.</p><h3>Question 3: How do I create a new database from scratch?</h3><p>While setting up new staging/CI servers or developer machines, one should not run the complete migration history. Using schema dump to create the new environments is much safer and faster. Use the rake tasks like \"rake db:setup\" to setup db from scratch.</p><h3>Question 4: Can I use model code in migrations?</h3><p>Yes, you can, but as a last resort. There are multiple valid use cases, like:</p><ol><li>Adding a new field to an existing model and all the existing records must have certain values based on some logic.</li><li>You are refactoring the table structure, and thus need to migrate existing data from one table to another after some transformation.</li></ol><p>As mentioned in the rails guides, it can be used, but with extreme caution. Refer to the <a href=\"http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations\">rails guide</a> for more details.</p><p>The model code, you are using in migrations, is inevitably going to change in the long run or within next few hours. Using it in migrations can make the migrations error prone or can crash the db:migrate process. As there are no tests around migrations, this would be a rather unpleasant surprise for your team in the future.</p><h3>Question 5: I am refactoring my code and this calls for changing my 6 month old migration files. What should I do?</h3><p>There will be migrations, which use model code to migrate existing data from one table to another. While in the future when we refactor our models, the method or classes used in this migration might have to be removed making the execution of these migrations impossible.</p><p>For a general rails project (assuming a monthly release), any migration older than 1 month need not be maintained. Unless a migration file is needed to migrate an existing older DB instance of your application to the said version, you need not worry about maintaining that migration.</p><p>I personally prefer to collapse all the existing migrations into a single migration at the end of every release, by just copying the schema.rb into \"001_collapsed_schema.rb\". This way, you won't have these older migrations which need to be \"maintained\".</p><h3>Question 6: Can I bootstrap my application using migrations?</h3><p>If I add a model called Continent, which is going to have a fixed set of 7 values on all the installations, migrations look like a very tempting place to create this data. Bad idea!</p><p>A migration may or may not be used while setting up new systems. As schema.rb contains only the schema definition, this seed data won't be populated if we use \"rake db:setup\". Also, if accidentally migrations are used to setup the test environment, it would contain the seed data which is not visible to the person reading the test. You should use \"rake db:seed\" to bootstrap production or development databases.</p><p /><h3>General rules while using rails migrations</h3><p /><h4><strong>1. Never change your database schema manually</strong></h4><p>If you manually add table, column or even a foreign key to your dev database, it will reflect in your schema.rb when you execute \"rake db:migrate\" the next time, but not in any of your migrations. This will cause different instances of your application to have different schemas, depending on if you have used migrations or schema.rb to create it. You will end up having different schemas on production and dev environments.</p><h4><strong>2. Avoid the use of models in your migrations as much as possible.</strong></h4><p>As mentioned earlier, there are very few scenarios that justify the use of model code in migrations, but avoid it as long as you can.</p><h4><strong>3. Never change a migration that has already been run</strong></h4><p>Even if it's your code that you haven't even committed, as a matter of principle, never change a migration that has been executed already. This will help you avoid those late night debugging sessions in the future.</p><h4><strong>4. Double check that the migrations can be rolled back</strong></h4><p>Rarely people talk about rolling back migrations and that scares me. As a habit while developing, I rollback and reapply every migration before I commit it. There are no tests around migrations, which makes it critical that you manually do \"rake db:migrate:redo\" after applying every new migration in dev environment.</p><h4><strong>5. Do not create seed data in migrations</strong></h4><p>Although it's possible to create model records through migrations, migrations are not designed for seed data population and cause instability in your production as well as test environments.</p><p>There are still further topics to be discussed like test data setup, use of fixtures and strategies for data seeding; but I will leave these for some other blog post.</p>")) (item nil (title nil "Our RubyConf XI talk on Continuous Delivery") (dc:creator nil "Srushti Ambekallu") (pubDate nil "Fri, 03 Feb 2012 02:54:14 +0000") (link nil "http://blog.c42.in/blog/97084199") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79a") (description nil "<iframe id=\"yui_3_7_3_1_1363603202722_7040\" frameborder=\"0\" height=\"326\" data-embed=\"true\" width=\"580\" src=\"http://player.vimeo.com/video/35305036?byline=0&amp;portrait=0&amp;wmode=opaque\"></iframe><p><a href=\"http://vimeo.com/35305036\">Ruby Software Continuously Delivered and Exhaustively Explained</a> from <a href=\"http://vimeo.com/user10070396\">Srushti Ambekallu</a> on <a href=\"http://vimeo.com/\">Vimeo</a>.</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://coderwall.com/bguthrie\">Brian</a> and <a href=\"http://c42.in/people#srushti-ambekallu\">I</a> gave a slightly different version of our talk from RubyConf India 2011.</p><p>In this talk we focused on the value of Continuous Delivery as a practice and how it's an extension of Agile methodologies, and being able iterate on the product in quicker cycles helps deliver value to and gather feedback from users faster.</p><p>We spent some time going over tools you can use to automate the process, like Chef, Puppet &amp; Capistrano among others.</p><p>We also discussed various branching strategies you can use and their relative pros &amp; cons. Branching becomes a requirement for features that require a long time to develop (where you can't make incremental deploys) and when you are doing continuous deployment.</p>")) (item nil (title nil "Readline love for the Clojure REPL using rlwrap") (dc:creator nil "C42 Engineering") (pubDate nil "Thu, 02 Feb 2012 22:13:00 +0000") (link nil "http://blog.c42.in/blog/readline-love-for-the-clojure-repl-using-rlwr") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79c") (description nil "<p>One of the painful things about the REPL/shells of JVM based languages like Clojure and JRuby is that they have no support for Readline out of the box. No command history, navigation, nothing.</p><p>This can be solved in one of two way - the <code>JLine</code> java library, and <code>rlwrap</code>.</p><p>I favour <code>rlwrap</code>&nbsp;approach because this way, I can add readline support without having to mess with java classpaths or the <code>clj</code> script set up by Hombrew.</p><p>All you need to do is install rlwrap (<code>brew install rlwrap&nbsp;</code>/&nbsp;<code>apt-get install rlwrap</code>) then setup a simple shell script like so:</p><p><code> #!/bin/bash <br /> rlwrap --quote-characters=\"'\" --command clojure clj</code></p><p>Name it something like&nbsp;<code>cljrl</code>, make it executable and put on your path. This approach should work for JRuby too.</p><code><span>If you're wondering about the arguments to&nbsp;</span></code><span>rlwrap</span><code><span>,&nbsp;</span>--quote-characters</code> ensures that the single quote is not treated as a paired quote character and <code>--comand</code> ensures that history is maintained between sessions (<code>-Djline.history='clojure'</code> if you're using JLine IIRC).
<p />
Thanks to Enrico Franchi for&nbsp;<a href=\"http://www.enrico-franchi.org/2011/02/rlwrap-enable-clojure-readline-support.html\">originally posting this</a> - I went the JLine route first and he saved me a lot of yak shaving.")) (item nil (title nil "Our RubyConf XI talk on Rails services") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 17 Jan 2012 12:08:00 +0000") (link nil "http://blog.c42.in/blog/our-rubyconf-xi-talk-on-rails-services") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79e") (description nil "<p><iframe src=\"http://player.vimeo.com/video/35186011?byline=0&amp;portrait=0\" frameborder=\"0\" height=\"326\" width=\"580\"></iframe></p><p><a href=\"http://vimeo.com/35186011\">Rails services in the walled garden</a> from <a href=\"http://vimeo.com/kaiwren\">Sidu Ponnappa</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p><p>&nbsp;</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://c42.in/people#niranjan-paranjape\">Niranjan</a> and <a href=\"http://c42.in/people#sidu-ponnappa\">I</a> speak about \"Rails services in the walled garden.\"</p><p>In typical service oriented architectures, monolithic applications are sliced along domain verticals to create several independently evolving 'services' that can be used in combination to achieve various outcomes.</p><p>Rails applications lend themselves to this architecture beautifully and are slowly making inroads in big organisations for this reason.</p><p>One of the big problems with this approach is that analyzing and managing large quantities of data from multiple services to produce a result becomes very hard. What was originally a relatively simple task when all data sat in the same database as part of a monolithic application, becomes, when split into multiple services, a whole different beast. This talk will focus on our experiences building a system involving about a dozen rails based services integrated over HTTP and XML and the issues we had to deal with when working with large data sets.</p>")) (item nil (title nil "Starter reading list") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 09 Jan 2012 10:03:00 +0000") (link nil "http://blog.c42.in/blog/starter-reading-list") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a0") (description nil "<p>We usually have a starter reading list for fresher hires that I thought we should publish in the hope that others find it useful. Any additional recommendations are welcome.</p><p>There are, of course, several more books that we recommend, but this is what we start off with. You may notice that there is no material related to Ruby here, and this is intentional.</p><p><span>Books</span></p><ol><li>\"The Pragmatic Programmer: From Journeyman to Master,\" Dave Thomas &amp; Andy Hunt</li><li>\"Refactoring,\" Martin Fowler</li><li>\"Test Driven Development: By Example,\" Kent Beck</li><li>\"Extreme Programming Explained: Embrace Change,\" Kent Beck &amp; Cynthia Andres</li></ol><p>&nbsp;</p><p><span>Articles</span></p><ol><li>\"<a href=\"http://www.objectmentor.com/resources/articles/craftsman1.pdf\">The Craftsman</a>,\" Robert C. Martin (pdf)</li><li>\"<a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=203994\">The Way of Testivus</a>,\" Alberto Savoia</li><li>\"<a href=\"http://catb.org/~esr/faqs/smart-questions.html\">How to Ask Questions the Smart Way</a>,\" Eric S. Raymond</li><li>\"<a href=\"http://deobald.ca/work/extract.txt\">Extract.java</a>\", by our very own <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li></ol><p>&nbsp;</p><ol></ol>")) (item nil (title nil "  JSON/XML rendered as plain/text by Apache") (dc:creator nil "C42 Engineering") (pubDate nil "Sun, 11 Sep 2011 14:25:00 +0000") (link nil "http://blog.c42.in/blog/jsonxml-rendered-as-plaintext-by-apache") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a3") (description nil "<p>We have a RESTful API built over Rails which exposes a certain resource in XML as well as in JSON format. The resource is read more frequently than it is updated, thus we decided to cache it using Rails' page caching feature. After deploying the application on the staging environment, the JS library consuming the API started crashing intermittently. The AJAX requests were processed successfully for uncached responses, but jQuery could not parse the cached responses.</p><p>A quick look at Firebug showed that the cached responses were rendered by Apache with a mime-type of \"plain/text\" rather than \"application/json\" as expected by jQuery.</p><p>To cut to the chase, there is a very easy way to configure apache to handle appropriate mime types for any formats. Add the following lines to <em>/etc/apache2/mods-available/mime.conf</em>:</p><pre>AddType application/json .json
AddType application/xml .xml</pre><p>Also make sure that you have enabled the mod called <em>mime</em>. On a Debian distro, you can execute the following command:</p><pre>a2enmod mime</pre><p>The change configures apache to use mime types 'application/json' or 'application/xml' while rendering any static asset with extension '.json' or '.xml' respectively.</p>")) (item nil (title nil "Identifying good offshore Ruby and Rails vendors - a guide.") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 02 Aug 2011 12:44:00 +0000") (link nil "http://blog.c42.in/blog/identifying-good-offshore-ruby-and-rails-vend") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a4") (description nil "<p><strong>Disclaimer.</strong></p><p><span>This post reverse engineers the reasoning behind what we do at </span><a href=\"http://c42.in/\"><span>C42 Engineering</span></a><span>. We ask ourselves these questions every day, and these questions frame what we think it means to be a top notch provider of software engineering services. Much of it we're already doing. Some of it we're still putting in place. There are lots of great firms out there and we hope that this guide will help you find a vendor who will help your business succeed.</span></p><p><strong>The problem.</strong></p><p><span>There are many small, new Ruby consultancies all over the world that do stellar work. There are many, many more that don't. As a startup looking to offshore work, how do you tell them apart?</span>&nbsp;</p><p><strong>Is finding a local vendor that difficult?</strong></p><p>In India, it is very hard to find consultancies or contractors who have experience in both Ruby and Agile; this is something we've heard from all our local clients. We were prompted to write this article because we heard over and over again from friends and clients in the US that the same was true for them. We also realised how risky (and hard) it was to identify the right offshore vendors prompting most startups to settle for less capable local contractors.</p><p>In our experience, you should value capability over the cost of managing timezone related communication overhead. If you compromise on quality to stay local, there's a high likelihood that when the time comes to start cranking out features or to change existing functionality, you won't be able to becasue your codebase is a mess, there aren't any automated tests and you're too scared to move fast.</p><p>At that point hiring a top local firm will make little difference because they'll be hamstrung by the existing codebase and will likely recommend some form of rewrite anyway.</p><p><strong>Is finding an offshore vendor that difficult?</strong></p><p><span>It's quite likely that you've heard your share of horror stories about how offshore vendors work (or don't) - the false promises, the inflated billing, the missed deadlines, the poor communication and, to add insult to injury, all the defects that crop up. I'm also sure you realise that just like any marketplace, there are vendors that Do The Right Thing - it's just that they're in the minority and it's hard for them to stand out.</span></p>
As a startup, here are the things that you probably care about: <ol><li><p><span>A Minimum Viable Product that allows you to go to market quickly</span></p></li><li><p><span>The ability to iteratively add features and pivot as feedback comes in</span></p></li><li><p><span>Making sure your code is well tested, so that point (2) does not break everything in point (1)</span></p></li><li><p><span>A transition plan, so that you can ramp up your own team as you get to be big enough</span></p></li></ol>Most offshore vendors only focus on getting the first part right.<span>&nbsp;</span><span>&nbsp;</span><br><p><span>Most of our clients that are successfully outsourcing work have learned how to identify the right vendors over a period of years, often getting burned badly at the start. If you're a startup and are looking to offshore work, you don't have the luxury of learning by failing. This article distills what we've learned ourselves and from our clients about working offshore and working with offshore firms into a fairly simple set of guidelines. With some luck, this guide should allow you to zero in on the small offshore companies that are truly agile, passionate about good engineering and eager to see their clients succeed.</span></p><p><span>The bottom line is this - going offshore is inherently less effective than having a co-located team, especially in the context of agile projects. The only reason you'd offshore work is either because you have budgetary constraints, or you're unable to hire talent that meets your standards locally. What you want is a vendor who understands this and is actively working to mitigate the overhead introduced by having distributed teams while also having an engineering team that matches or exceeds anything that you'd find locally.</span></p><p><strong>Is this guide relevant to you?</strong></p><p><span>This guide should work for you if you:</span></p><ul><li><p><span>Want to execute your project using Agile principles, so frequent and fluent communication is crucial</span></p></li><li><p><span>Have decided that your technology stack is based on Ruby (most likely Rails)</span></p></li><li><p><span>Want top notch engineering so you get a clean, well specced, extensible codebase</span></p></li><li><p><span>Have some budgetary constraints - after all, if you didn't you'd already have an in-house team, possibly augmented by a developer pair from a Pivotal Labs or a ThoughtWorks, right? </span></p></li><li><p><span>On the other hand, you shouldn't be so cash strapped that you're offering equity as payment because most (but not all) services firms won't do equity deals. Most services firms, unlike VCs, can't spread their risk, are heavily dependent on cashflow month-on-month and consequently can't afford to gamble.</span></p></li></ul><p><strong>Cutting to the chase. Step #1 - Sourcing.</strong></p><p><span>So the first question is 'How do you create a list of vendors that you can then filter?' The idea is to create a large list of broadly aligned vendors with a minimum of effort.</span></p><p><span>Most vendors do or say a common set of things to gain visibility. Here's how you look for them:</span></p><ul><li><p><span>Identify regions with a high density of offshore Ruby vendors. My list currently consists of Brazil, Uruguay, Chile, Argentina, Eastern Europe, India and Pakistan. Let me know in the comments if there are other regions/countries that I should also include here.</span></p></li><li><p><span>Do a search for Ruby, Rails, Agile, Extreme Programming and Test Driven Development/Behavior Driven Development along with the name of a country or city from the list above. See which companies show up. Add them to your list.</span></p></li><li><p><span>Scan local Ruby and Rails mailing lists in the areas above. Pick cities that you know contain offshore vendors, then find their Ruby users list and look for folks that post frequently and post sense. Find out where they work. Add them to your list.</span></p></li><li><p><span>Look up local RubyConfs like </span><a href=\"http://rubyconfindia.org/\"><span>RubyConf India</span></a><span>, </span><a href=\"http://rubyconfuruguay.org/en\"><span>RubyConf Uruguay</span></a><span> or </span><a href=\"http://rubyconfargentina.org/en\"><span>RubyConf Argentina</span></a><span>. Add the companies who sponsor these events to your list.</span></p></li><li><p><span>At the same local RubyConf websites, go through all the presentations - typically, videos are available. Identify the speakers that made sense, then find out where they work. Add those companies to your list too.</span></p></li><li><p><span>Explicitly ask for startups who've been working with offshore vendors for some time at your local Ruby or startup group and add those vendors to your list.</span></p></li><li><p><span>Go to sites like elance.com and odesk.com and search for Ruby, Rails, Agile, XP and TDD/BDD. Add the vendors that show up and that have all of these keywords in their profile to your list.</span></p></li></ul><p><strong>Step #2 - filtering for the basics.</strong></p><p><span>At this point, you should have at least a dozen firms on your list. We can prune the list fairly quickly based on some simple criteria.</span></p><ul><li><p><span>Open source - remove all the companies that aren't involved in open source in some form from your list.</span></p></li><li><p><span>TDD/BDD - remove all the companies that don't mention TDD/BDD anywhere on their site or say \"We do TDD/BDD for clients who want it.\"</span></p></li><li><p><span>References - remove all the companies that do not have any references, either of clients that the company has worked with, or, in the case of a new firm, of clients that the founders have worked with.</span></p></li><li><p><span>Pairing - does the company believe in pairing? While not essential, this can be valuable for two operational reasons beyond what XP covers. Redundancy, so that your productivity is not hit when, say, one of the developers falls ill. Knowledge transfer, because when the time comes to build out your in-house team, you can transition smoothly by simply flying in the offshore folks and having them pair with your engineers for a few weeks.</span></p></li></ul><p><strong>Step #3 - filtering out BS.</strong></p><p><span>Next up is to lose the ones that either intentionally or unintentionally misrepresent their level of capability. An easy way to do this is to look for firms that claim to do TDD/BDD </span><span>and </span><span>open source. Go to their open source projects pages (most likely on github.com) and look under the test/spec folder - you'd be surprised at how many such projects from firms that loudly proclaim their love of testing have no tests at all.</span></p><p><span>Next, look at the open source projects themselves. Are there any popular projects in the list? Are they trying to improve existing Open Source tools? If the projects were started by the company, how complex are they and how many pull requests, forks and watchers do they have from people who are not employees?</span></p><p><span>Remove from the list all the companies that claim a trivial plugin or some such as 'open source.' The ones that seem to be doing something non-trivial in open source you should retain in the list, even if they don't have very many pull requests, forks and watchers.</span></p><p><span>GitHub also provides nice graphs about various projects. This will give you some meta data around the projects, such as, if the project was developed in a single day, and if the project has had continuous support and interest. The github punch card visualization will also give you some information about how passionate the developers are about their work and if they are more passionate about code </span><a href=\"http://is.gd/Do1ESt\"><span>on a particular day</span></a><span> than on others :-).</span></p><p><strong>Step #4 - filtering for credibility.</strong></p><p><span>In the absence of an Accelerando style </span><a href=\"http://en.wikipedia.org/wiki/Whuffie\"><span>reputation marketplace</span></a><span>, we'll have to fall back on a more direct approach to judge credibility. One of the easiest ways to do this is to use trusted external reference points like the proposal review committees of popular conferences, or the core committers of major open source projects.</span></p><ul><li><span>Start by checking how many employees of a firm have spoken at major conferences. Have they spoken at the local RubyConf or RailsConf? How about the annual international </span><a href=\"http://rubyconf.org/\"><span>RubyConf</span></a><span> and </span><a href=\"http://www.railsconf.com/\"><span>RailsConfs</span></a><span>?</span></li><li>How many employees of a firm have started open source projects?&nbsp;How many have made non-trivial contributions to existing popular open source projects?</li><li>Are the employees of a firm active on mailing lists, including both the local Ruby/Rails lists as well as the lists of major open source projects?</li></ul>
This last point is a bare minimum - you can safely remove any firms that don't meet it.<br><strong>&nbsp;</strong><strong>Step #5 - filtering for engineering, part 1.</strong><p><span>We're now done with the easy stuff - this step and the rest of the filtration process will require more effort than simply looking through a few web pages. Now the next thing to do is to dig into the open source work of the firms still on your list and do some code reviews. At this point, all the vendors left on your list should have one or more non-trivial open source projects that they've been working on.</span></p><p><span>For this, you'll need to have experience working with test driven codebases yourself, or involve a trusted third party who does. Here are the obvious, simple things to look for:</span></p><ul><li><p><span>Complies with project structure conventions - whether it's a pure Ruby or a Rails project, it should follow the standard project structure.</span></p></li><li><p><span>Coverage - the coverage should be no less than 85%. For rails projects, the coverage should be measured separately at the model, controller and cucumber level because with C0 coverage, a dozen Cukes can be used to produce (a completely misleading) coverage of 100%.</span></p></li><li><p><span>Quality of tests/specs - it's usually fairly obvious when tests have been written after the fact. Remove any companies that obviously and consistently write tests/specs after the fact. Also keep an eye out for badly written tests, especially the kind that don't assert anything or are very hard to cause to fail.</span></p></li><li><p><span>Cyclomatic complexity - toss Saikuro (and flog) into the build and see what numbers it spits out. Cyclomatic complexity numbers almost always (with the possible exception of parsers) maintain an inverse correlation with design quality - the higher the numbers, the worse the authors of the code were at OO design.</span></p></li><li><p><span>Good old fashioned code review using the 'WTF per minute' scale. Just remember that all code causes WTFs, so be kind (but not too kind).</span></p></li></ul><p><strong>Step #6 - filtering for communication.</strong></p><p><span>You should now be down to a handful of companies; it’s time to start talking to them. Drop them a note and schedule a Skype video call, so you can get a feel for how effectively they communicate. It doesn't mean much, though, because at this point you're likely speaking to a sales person (even if that sales person writes code).</span></p><p><span>Doing this will trim a few firms off your list because you'll find that they simply won't have capacity available in a timeframe that makes sense for your project so that will prune your list somewhat. For more information on why this is so and how small consultancies work, take a look at </span><a href=\"http://blog.c42.in/static/5139d295e4b04507fe7c33a4/513ef91fe4b09dd217c4e779/513ef923e4b09dd217c4e7bb/1298372160000/\"><span>our talk on the subject at RubyConf New Orleans 2010</span></a><span>.</span></p><p><span>Once you get on the call, your intent is to get a feel for the firm and how they operate. Ask how they mitigate timezone related communication gaps. Do they do daily stand-ups over Skype video? What tools do they use to support project execution? Why? How do they handle project management? Do they have dedicated project managers, or does the engineers also handle project management and client communication? If they have dedicated project managers, how big does a team need to be to require the attention of a manager full-time?</span></p><p><span>The next test is to ask for interviews with the developers that would be staffed on your project should you choose to hire that vendor. No, this isn't rude or offensive. Yes, we're used to being interviewed by clients - indeed, we prefer it. Just be aware that staffing cycles at small consultancies being what they are, you may have to interview several people even if you're only looking for a single pair because the vendor is unsure exactly who will be available when the project gets started.</span></p><p><span>Once you have the interviews with the engineers set up, we come to...</span></p><p><strong>Step #7 - filtering for engineering, part 2.</strong></p><p><span>Keep in mind that just because one trophy engineer in the company contributes to open source, speaks at conferences and generally kicks ass doesn't mean they all do, or that you'll get that one superstar for your project. Treat this interview pretty much like a hiring interview. Ask for information on the engineers you'll be speaking to before hand and take the time to go through their blogs and github profiles to get a feel for their capability ahead of the interview.</span></p><p><span>Here are some of the things to look for when interviewing the engineers aside from the usual CS interview questions that you'll probably want to run through anyway as a baseline safety net.</span></p><ul><li><p>Ruby Skills. If required, will they be able to open up rails, and understand how find_by_* gets overriden? Has the engineer ever worked on a non-Rails project? You don't want to hire someone who 'programs in Rails' and to whom Rails constructs are black boxes that are magic.</p></li><li><p>Rails skills. How much of the framework does the engineer understand? Would they be able to make decisions about various ways to do things in rails?</p></li><li><p>Breadth. How many programming languages are they familiar with? How many have they worked with professionally?</p></li><li><p>The rest of the ecosystem. Does your engineer understand the rest of the ecosystem when your application starts to get complicated? Do they understand concepts like asynchronous messaging, background processing and evented systems? Are they comfortable doing TDD in javascript to build rich, single page applications?</p></li><li><p>Engineering and design - does the engineer understand good object oriented design? Does he/she understand why TDD is valuable in a design context, or do they use it merely for regression cover?</p></li><li><p>Justifying technical decisions - can the engineer take a position on any given subject, then defend it, or do they simply agree with everything you say?</p></li><li><p>Business analysis - do the engineers make the effort to understand your business, or do they simply want requirements tossed at them over a wall?</p></li><li><p>Try to get some objective numbers that indicate agility. What do they think is a good length for an iteration? How often do they commit and push? How often do they run builds? Do they use a CI server? Do they auto-deploy every green build to a staging server? Are they confident deploying to production from master/HEAD? What is their understanding of the term 'velocity'?</p></li><li><p>How much time do they spend studying? What was the last technical book they'd read? What was the last technical book recommended to them by a colleague? What books do they have in the company library? Which of those are considered mandatory reading?</p></li><li><p><span>How do they stay in sync with the latest in the technology world? Do they read blogs? Hacker News? Follow role models on Twitter?</span></p></li><li><p><span>“<a href=\"http://starwars.wikia.com/wiki/Rule_of_Two\">Always two there are</a>, no more, no less. A master and an apprentice ”</span>. It is standard practice for services firms to pair a senior developer with one or more less experienced developer to help the less experienced developer grow their skills. Make sure that you are getting at least as many senior developers as you are less experienced developers. Ask what skills the less experienced developer will need to learn in order to ramp up. And finally, keep in mind that years of experience does not always translate to capability. Don’t be surprised if the most capable developers have the least experience in years.</p></li></ul><p><span>At the end of these seven steps you should be down to three or four companies, sorted along the three axes of agility, engineering and price.</span></p><p><strong>Step #8 - prioritizing by integrity.</strong></p><p><span>Integrity is both the most important attribute of a vendor and the hardest to measure up-front. If you can’t trust your vendor, you spend a </span><span>lot</span> of time hedging against potential screw-ups instead of staying focused on churning out features. Do you really want to spend half your day doing code reviews because you can’t trust your vendor to Do The Right Thing and staff your project with competent engineers?</p><p><span>To get a Reflect on all your interactions with each of the companies - which seemed the most honest? How many times did they simply tell you that they lacked a particular skill-set, or make a similar statement indicating that they were more interested in making sure you had the right information to make decisions over closing the deal?</span></p><p><strong>Putting it all together</strong></p>
While we've structured this guide in steps that take increasingly greater amounts of effort to sort companies, they are also sorted in increasing amount of value. Above all else, you should be able to trust your vendor, and even build your business plan around them.
<p></p>If, at the end of Step #8 you have two very promising companies and can't decide - hire both for a couple of weeks or a month and then take a call. You can do this even if you are undecided between an offshore vendor and a local developer so you can see what works best for you. Tools like git(hub) and pivotal tracker make it easy for a distributed team of developers to work independently without stepping on one-another's toes.<p></p>Lastly, you must be prepared to make trade-offs; not even the best team can completely mitigate the overheads of a twelve hour time shift. That said, going offshore isn't anywhere as risky as it's made out to be if you go about it right.<ul></ul>")) (item nil (title nil "RVM and OSX 10.7 Lion") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 26 Jul 2011 12:10:12 +0000") (link nil "http://blog.c42.in/blog/rvm-and-osx-107-lion") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7aa") (description nil "<p>Always being a fan of having the latest and greatest software, Niranjan and I tried upgrading to OSX Lion the day after it came out.</p><p>I immediately installed XCode to get a compiler, and started an rvm install 1.8.7. After rvm finished compiling the ruby, I noticed a fatal error appearing every time i tried to run gem install anything on lion:</p><p>lib/ruby/1.8/timeout.rb:60: [BUG] Segmentation fault</p><p>After a bit of searching, I realized that Lion changes the default compiler from gcc to the <a href=\"http://en.wikipedia.org/wiki/Clang\">llvm compiler</a>. While this shows promise as a fast compiler, it doesn't work perfectly with rvm compiled ruby just yet. Although the compile goes through fine, the ruby seems to blow up when you use the ruby.</p><p>Luckily, gcc-4.2 still ships with xcode, and can be found at /usr/bin/gcc-4.2</p><p>All rubies that were compiled before the upgrade to lion will work, but all rubies compiled afterwards will need to be compiled with the old gcc.</p><p>When installing a new ruby or a new gem, it is possible to tell make to use the old gcc as follows:</p><p>$ CC=/usr/bin/gcc-4.2 rvm install ...</p><p>$ CC=/usr/bin/gcc-4.2 bundle install</p><p>alternatively, you can just add the following line to your .bashrc:</p><p>export CC=/usr/bin/gcc-4.2</p><p>As is visible below, it looks like both gcc and clang (the llvm compiler) ship with xcode. However, the default gcc (and cc) have been linked to llvm-gcc</p><p>$ ls -lh /usr/bin/*gcc*</p><p>lrwxr-xr-x  1 root  wheel    12B Jul 24 15:35 /usr/bin/gcc -&gt; llvm-gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   110K May 16 10:07 /usr/bin/gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   550K May 16 10:07 /usr/bin/i686-apple-darwin11-gcc-4.2.1</p><p>lrwxr-xr-x  1 root  admin    52B Jul 24 15:35 /usr/bin/i686-apple-darwin11-llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/i686-apple-darwin11-llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p>")))) ("The C42 guide to good code: 1 - Code Smells" "<br><p></p><p>This post is the first of a line of posts that are a guide to what we believe is good code. This first one is all about <strong>Code Smells</strong>.
These are indicators that your code is hiding a deeper problem.</p><ul><li><a href=\"http://blog.c42.in#law-of-demeter\">Law of Demeter</a></li><li><a href=\"http://blog.c42.in#tell-don-39-t-ask\">Tell Don't Ask</a></li><li><a href=\"http://blog.c42.in#law-of-7\">Law of 7</a></li><li><a href=\"http://blog.c42.in#polymorphism-over-if-conditions-and-switch-case\">Polymorphism over if conditions and switch/case</a></li></ul><hr><h3>Law of Demeter</h3><p>The formal definition for the law of demeter can be found on <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">Wikipedia</a>, but we will summarise to say that method calls in the following form are a really bad idea.</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-before.rb\"></script><noscript><pre>dog.legs.walk!</pre></noscript></p><p>Instead, create a delegator in the parent class</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after.rb\"></script><noscript><pre>class Dog
def move!
legs.walk!
end
end
dog.move!</pre></noscript></p><p>This allows Dog to control how it walks. If someday, we invent a robot dog that walks using a hover device, then we need only to change the implementation of walk!, that is internal to dog, and the external world need not do</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after-two.rb\"></script><noscript><pre>dog.legs.walk! if dog.normal?
dog.hover_craft.hover! if dog.robot?</pre></noscript></p><p>More formally:</p><blockquote><p>Every method <strong>M</strong> on an object <strong>O</strong> should only access these types of methods:</p><ul><li>methods on <strong>O</strong> itself</li><li>methods on <strong>M</strong>'s parameters</li><li>methods on any objects created/instantiated within <strong>M</strong></li><li>methods on <strong>O</strong>'s component objects</li></ul></blockquote><hr><h3>Tell Don't Ask</h3><p>When you want an object to perform an action, never ask the object for information about it's state, make a decision based on the information, and then tell the object to perform the appropriate action.</p><blockquote><p>The responsibility of how to perform the action should reside in that object, not the caller. In short, tell the object what you want it to do, and let that object worry about how to do it.</p></blockquote><p><em>Bad</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-bad.rb\"></script><noscript><pre>if account.balance &gt;= amount
account.deduct(amount)
else
raise NotEnoughBalance
end
class Account
def deduct(amount)
balance -= amount
end
end</pre></noscript></p><p><em>Good</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-good.rb\"></script><noscript><pre>account.deduct(amount)
class Account
def deduct(amount)
raise NotEnoughBalance unless balance &gt;= amount
balance -= amount
end
end</pre></noscript></p><p>Read further on <a href=\"http://c2.com/cgi/wiki?TellDontAsk\">c2</a>.</p><hr><h3>Law of 7</h3><blockquote><p>If a method is over 7 lines of code, more often than not the method would be doing more than what it should, and a candidate for refactoring. At the very least, pull out a private method to improve readability of the large method.</p></blockquote><p>Having a single level of indentation makes it obvious what every method does at a glance.
For example:</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-bad.rb\"></script><noscript><pre>
def self.import_from_csv(csv)
csv.each_line do |line|
if line[&quot;type&quot;] == &quot;distributer&quot;
Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
else
Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
end
end
end</pre></noscript></p><p>can be replaced with</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-good.rb\"></script><noscript><pre>def self.import_line(line)
if line[&quot;type&quot;] == &quot;distributer&quot;
Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
else
Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
end
end
def self.import_from_csv(csv)
csv.each_line do |line|
import_line(line)
end
end</pre></noscript></p><hr><h3>Polymorphism over if conditions and switch / case</h3><blockquote><p>Avoid if conditions &amp; switch / cases whenever possible, instead preferring polymorphism over them.</p></blockquote><p>Whenever possible, try to isolate the place where switch/cases are used to a single method where appropriate strategy (Strategy Pattern) is created to care of the behaviour, and allow polymorphism to take over.</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-bad.rb\"></script><noscript><pre>def expiry_date
case plan_type
when 'subscription' then next_month
when 'prepaid' then never
end
end
def monthly_charge
case plan_type
when 'subscription' then 300
when 'prepaid' then 0
end
end
def charge_per_rental
case plan_type
when 'subscription' then 0
when 'prepaid' then 100
end
end</pre></noscript></p><p>becomes</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-good.rb\"></script><noscript><pre>class SubscriptionPlan
attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end
class PrepaidPlan
attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end
def plan_type
case plan_type
when 'subscription' then SubscriptionPlan.new
when 'prepaid' then PrepaidPlan.new
end
end
def expiry_date
plan_type.expiry_date
end
def monthly_charge
plan_type.monthly_charge
end
def charge_per_rental
plan_type.charge_per_rental
end
</pre></noscript></p><hr><p>If you must use if conditions, then use it in one of the forms:</p><p><script src=\"https://gist.github.com/5185977.js?file=if-must.rb\"></script><noscript><pre>def sales_tax
return 0 if purchaser.exempt_from_taxes?
price * .10
end
def car.brake
switch_on_brake_light
unless stopped?
slow_down
end
end</pre></noscript></p><hr><p>Contributors:</p><ul><li>Tejas Dinkar</li><li>Niranjan Paranjape</li><li>Smit Shah</li><li>Srihari Sriraman</li></ul>" "http://blog.c42.in/blog/the-c42-guide-to-good-code-1-code-smells" (20806 51566) new 1 nil nil ((title nil "The C42 guide to good code: 1 - Code Smells") (category nil "good code") (category nil "code smells") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 18 Mar 2013 07:59:42 +0000") (link nil "http://blog.c42.in/blog/the-c42-guide-to-good-code-1-code-smells") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:51419fd6e4b0d6e2ee8877eb") (description nil "<br><p></p><p>This post is the first of a line of posts that are a guide to what we believe is good code. This first one is all about <strong>Code Smells</strong>.
These are indicators that your code is hiding a deeper problem.</p><ul><li><a href=\"http://blog.c42.in#law-of-demeter\">Law of Demeter</a></li><li><a href=\"http://blog.c42.in#tell-don-39-t-ask\">Tell Don't Ask</a></li><li><a href=\"http://blog.c42.in#law-of-7\">Law of 7</a></li><li><a href=\"http://blog.c42.in#polymorphism-over-if-conditions-and-switch-case\">Polymorphism over if conditions and switch/case</a></li></ul><hr><h3>Law of Demeter</h3><p>The formal definition for the law of demeter can be found on <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">Wikipedia</a>, but we will summarise to say that method calls in the following form are a really bad idea.</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-before.rb\"></script><noscript><pre>dog.legs.walk!</pre></noscript></p><p>Instead, create a delegator in the parent class</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after.rb\"></script><noscript><pre>class Dog
  def move!
    legs.walk!
  end
end

dog.move!</pre></noscript></p><p>This allows Dog to control how it walks. If someday, we invent a robot dog that walks using a hover device, then we need only to change the implementation of walk!, that is internal to dog, and the external world need not do</p><p><script src=\"https://gist.github.com/5185977.js?file=demeter-after-two.rb\"></script><noscript><pre>dog.legs.walk! if dog.normal?
dog.hover_craft.hover! if dog.robot?</pre></noscript></p><p>More formally:</p><blockquote><p>Every method <strong>M</strong> on an object <strong>O</strong> should only access these types of methods:</p><ul><li>methods on <strong>O</strong> itself</li><li>methods on <strong>M</strong>'s parameters</li><li>methods on any objects created/instantiated within <strong>M</strong></li><li>methods on <strong>O</strong>'s component objects</li></ul></blockquote><hr><h3>Tell Don't Ask</h3><p>When you want an object to perform an action, never ask the object for information about it's state, make a decision based on the information, and then tell the object to perform the appropriate action.</p><blockquote><p>The responsibility of how to perform the action should reside in that object, not the caller. In short, tell the object what you want it to do, and let that object worry about how to do it.</p></blockquote><p><em>Bad</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-bad.rb\"></script><noscript><pre>if account.balance &gt;= amount
  account.deduct(amount)
else
  raise NotEnoughBalance
end

class Account
  def deduct(amount)
    balance -= amount
  end
end</pre></noscript></p><p><em>Good</em></p><p><script src=\"https://gist.github.com/5185977.js?file=tell-dont-ask-good.rb\"></script><noscript><pre>account.deduct(amount)

class Account
  def deduct(amount)
    raise NotEnoughBalance unless balance &gt;= amount
    balance -= amount
  end
end</pre></noscript></p><p>Read further on <a href=\"http://c2.com/cgi/wiki?TellDontAsk\">c2</a>.</p><hr><h3>Law of 7</h3><blockquote><p>If a method is over 7 lines of code, more often than not the method would be doing more than what it should, and a candidate for refactoring. At the very least, pull out a private method to improve readability of the large method.</p></blockquote><p>Having a single level of indentation makes it obvious what every method does at a glance.
For example:</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-bad.rb\"></script><noscript><pre>
def self.import_from_csv(csv)
  csv.each_line do |line|
    if line[&quot;type&quot;] == &quot;distributer&quot;
      Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
    else
      Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
    end
  end
end</pre></noscript></p><p>can be replaced with</p><p><script src=\"https://gist.github.com/5185977.js?file=law-of-7-good.rb\"></script><noscript><pre>def self.import_line(line)
  if line[&quot;type&quot;] == &quot;distributer&quot;
    Document.new(line[&quot;foo&quot;], line[&quot;retail_price&quot;])
  else
    Document.new(line[&quot;foo&quot;], line[&quot;wholesale_price&quot;])
  end
end

def self.import_from_csv(csv)
  csv.each_line do |line|
    import_line(line)
  end
end</pre></noscript></p><hr><h3>Polymorphism over if conditions and switch / case</h3><blockquote><p>Avoid if conditions &amp; switch / cases whenever possible, instead preferring polymorphism over them.</p></blockquote><p>Whenever possible, try to isolate the place where switch/cases are used to a single method where appropriate strategy (Strategy Pattern) is created to care of the behaviour, and allow polymorphism to take over.</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-bad.rb\"></script><noscript><pre>def expiry_date
  case plan_type
  when 'subscription' then next_month
  when 'prepaid' then never
  end
end

def monthly_charge
  case plan_type
  when 'subscription' then 300
  when 'prepaid' then 0
  end
end

def charge_per_rental
  case plan_type
  when 'subscription' then 0
  when 'prepaid' then 100
  end
end</pre></noscript></p><p>becomes</p><p><script src=\"https://gist.github.com/5185977.js?file=polymorphism-good.rb\"></script><noscript><pre>class SubscriptionPlan
  attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end

class PrepaidPlan
  attributes :expiration_date =&gt; never, :monthly_charge =&gt; 300, :charge_per_rental =&gt; 0
end

def plan_type
  case plan_type
  when 'subscription' then SubscriptionPlan.new
  when 'prepaid' then PrepaidPlan.new
  end
end

def expiry_date
  plan_type.expiry_date
end

def monthly_charge
  plan_type.monthly_charge
end

def charge_per_rental
  plan_type.charge_per_rental
end
</pre></noscript></p><hr><p>If you must use if conditions, then use it in one of the forms:</p><p><script src=\"https://gist.github.com/5185977.js?file=if-must.rb\"></script><noscript><pre>def sales_tax
  return 0 if purchaser.exempt_from_taxes?
  price * .10
end

def car.brake
  switch_on_brake_light
  unless stopped?
    slow_down
  end
end</pre></noscript></p><hr><p>Contributors:</p><ul><li>Tejas Dinkar</li><li>Niranjan Paranjape</li><li>Smit Shah</li><li>Srihari Sriraman</li></ul>
"))) ("Agile delivery needs design facilitators" "<p>With the growing awareness of the need to integrate user experience design into agile delivery, there is now a better recognition of the role played by design facilitators in enabling good design faster. &nbsp;I wrote a blog post to share my insights on what should be a design facilitator's playbook:</p><p><span><strong><a href=\"http://www.anuramaswamy.com/?p=891\">A design facilitator's playbook</a></strong></span></p><p>Would love to hear your thoughts and insights!</p>" "http://blog.c42.in/blog/agile-delivery-needs-design-facilitators-to-e" (20631 55044) new 2 nil nil ((title nil "Agile delivery needs design facilitators") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 05 Nov 2012 15:11:00 +0000") (link nil "http://blog.c42.in/blog/agile-delivery-needs-design-facilitators-to-e") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e77e") (description nil "<p>With the growing awareness of the need to integrate user experience design into agile delivery, there is now a better recognition of the role played by design facilitators in enabling good design faster. &nbsp;I wrote a blog post to share my insights on what should be a design facilitator's playbook:</p><p><span><strong><a href=\"http://www.anuramaswamy.com/?p=891\">A design facilitator's playbook</a></strong></span></p><p>Would love to hear your thoughts and insights!</p>"))) ("How would you describe RubyMonk's interface?" "<p>We receive a lot of love from our users about <a href=\"http://www.rubymonk.com\">RubyMonk</a>'s visual design. And while we agree -- it's super cute! -- the site's visuals are hardly its interface. The \"user interface\" for RubyMonk is really the boundary between the student and the mentor.</p><p>How do we evaluate your code? How do we decide whether it is correct or not? These are the interesting questions in the user interaction. And, as emerges in the design of any product, these questions highlight the necessary unification of form and function, engineering and design, purpose and path. When you boil it down, the purpose of RubyMonk is to automate the teacher. On some level, this goal might seem akin to beating the Turing Test. In its current incarnation things are much simpler, of course.</p><p>I've explored this idea a bit in my post \"<a href=\"http://blog.deobald.ca/2012/05/defining-interface-for-rubymonk.html\">defining the interface for rubymonk</a>\". Take a look and check back soon as I take this idea forward to discuss the yin and yang of tests and the boundaries they exercise.</p>" "http://blog.c42.in/blog/how-would-you-describe-rubymonks-interface" (20396 40324) new 3 nil nil ((title nil "How would you describe RubyMonk's interface?") (dc:creator nil "Steven Deobald") (pubDate nil "Fri, 11 May 2012 05:03:00 +0000") (link nil "http://blog.c42.in/blog/how-would-you-describe-rubymonks-interface") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e780") (description nil "<p>We receive a lot of love from our users about <a href=\"http://www.rubymonk.com\">RubyMonk</a>'s visual design. And while we agree -- it's super cute! -- the site's visuals are hardly its interface. The \"user interface\" for RubyMonk is really the boundary between the student and the mentor.</p><p>How do we evaluate your code? How do we decide whether it is correct or not? These are the interesting questions in the user interaction. And, as emerges in the design of any product, these questions highlight the necessary unification of form and function, engineering and design, purpose and path. When you boil it down, the purpose of RubyMonk is to automate the teacher. On some level, this goal might seem akin to beating the Turing Test. In its current incarnation things are much simpler, of course.</p><p>I've explored this idea a bit in my post \"<a href=\"http://blog.deobald.ca/2012/05/defining-interface-for-rubymonk.html\">defining the interface for rubymonk</a>\". Take a look and check back soon as I take this idea forward to discuss the yin and yang of tests and the boundaries they exercise.</p>"))) ("Why you should respect deprecation warnings" "<p>At C42, I have worked on multiple Ruby on Rails migration projects. A simple task of upgrading an application from Rails 2.3 to Rails 3, can take anywhere from two days to three months. After such experiences, I have developed a small set of rules to make sure, my projects don't run into these two to three months long upgrades. A blog post by me on, how a simple <a href=\"http://blog.aakashd.com/why-you-should-respect-deprecation-warnings\">discipline of fixing deprecation warnings</a> can help you maintain your ruby applications in the long run.</p>" "http://blog.c42.in/blog/why-you-should-respect-deprecation-warnings" (20396 33184) new 4 nil nil ((title nil "Why you should respect deprecation warnings") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 11 May 2012 03:04:00 +0000") (link nil "http://blog.c42.in/blog/why-you-should-respect-deprecation-warnings") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e782") (description nil "<p>At C42, I have worked on multiple Ruby on Rails migration projects. A simple task of upgrading an application from Rails 2.3 to Rails 3, can take anywhere from two days to three months. After such experiences, I have developed a small set of rules to make sure, my projects don't run into these two to three months long upgrades. A blog post by me on, how a simple <a href=\"http://blog.aakashd.com/why-you-should-respect-deprecation-warnings\">discipline of fixing deprecation warnings</a> can help you maintain your ruby applications in the long run.</p>"))) ("C42 Launchpad - bridging the gap between hackers and the industry" "<p>At C42 Engineering, we spend about 108 man hours for every good developer we hire. For a small product company, I would rather spend that time developing features. We've always wanted to hire more awesome developers with less effort, and I think we may have a way to do just that.</p><p>We receive about 30-40 resumes a month. Our interview process, although time consuming, allows us to know the candidate better. Even before we call them to our office, we spend about half an hour with each candidate on the phone. Every face to face interview takes about 6 hours. After this extensive investment of time and energy, we consider ourselves lucky if we hire 1 developer a month, i.e. conversion rate of 2.5%, something we always wanted to improve.</p><p>While speaking with other startups at RubyConf India 2012, I realized, rather, that a 2.5% conversion rate is extremely high. I have heard horror stories of interviewing 150 candidates to hire one or two developers. The point is, businesses spend enormous amounts of energy and money in the hiring market with returns that are too low to be considered acceptable.</p><p>If we ask any consultancy or product company what skill set they would like prospective hires to have, the following common points come up over and over:</p><ul><li>Understands what is good code</li><li>Understands maintainability</li><li>Understands Object Oriented Programming principles</li><li>Familiarity with TDD</li><li>Deployments and DevOps</li><li>Awareness of standards and conventions</li></ul><p>In summary, every business needs developers who care about good code and are capabale of being productive from day one.</p><p><strong>The missing rockstars</strong></p><p>Most engineers who don't make it through our interview process are asked to apply again in six months. We don't do it just out of politeness, but because we actually believe that they can in time grow to become the capable developers we need.</p><p>These developers have the potential and inclination to become experts, but lack the correct exposure and guidance. Focused training on OO, TDD and Agile, with discussions around nuances of development practices and principles will convert these talented folk into the rockstars that every company seeks.</p><p>As always, we gave this feedback to the candidates in question. A consistent pattern emerged where candidates would get back to us asking for more information on how they could go about learning the requisite skills.</p><p>Unfortunately, there are no organizations like <a href=\"https://www.hackerschool.com/\">hacker/school</a>&nbsp;in India, places that expose programmers to the art of software craftsmanship. Be it universities or university-like classroom training programs, they just can't keep up with our fast moving industry. The gap is already large and growing every day.</p><p>Most lot of these skills are best learned by working closely with experienced developers and following practices for an extended duration. A 2 or 3 day workshop is useful for knowledge transfer, but it's impossible to develop discipline or grok the principles underlying the methodology in that short a duration.</p><p><strong>The launchpad</strong></p><p>C42 Launchpad hopes to be an answer to this problem. A 4-6 weeks full time hands-on workshop that will cover everything C42 Engineering expects a developer to know before she starts working on a codebase. We will have different batches for fresh graduates and for experienced developers. A rough sketch of the program for freshers:</p><ul><li> Programming 101
<ul><li>Introduction to Ruby</li><li>Introduction to Git</li><li>OO Design Principles</li><li> OO Patterns
<ul><li>Creational</li><li>Structural</li><li>Behavioral</li></ul></li><li>Programming/Design anit-patterns</li></ul></li><li> Web Application Development
<ul><li> Working within browsers
<ul><li>Introduction to HTML &amp; DOM</li><li>Introduction to CSS</li><li>Introduction to Javascript and Prototype based programming</li></ul></li><li> Ruby on Rails 101
<ul><li>Journey through Rails components</li><li>TDD with rails</li></ul></li></ul></li><li> Introduction to Agile
<ul><li>Agile principles</li><li>Planning and estimation</li><li>Importance of Automated Testing and Continuous Integration</li><li>Pair programming, TDD, Simple Design, Refactoring</li><li>Basics of XP and Scrum</li></ul></li><li>2 Weeks of Ruby on Rails project development in teams, following all the methodologies and principles mentioned above.</li></ul><p>The course structure as you can see is still being finalized, but the guiding principle is simple. Provide opportunity and inspiration to the willing engineers to hone their skills.</p><p><strong>Bridging the gap</strong></p><p>Lots of potential hackers join the Indian IT industry with big dreams. Due to lack of inspiration and opportunities, they stop caring about programming and become an hourly billable unit in an excel sheet somewhere. We want to show them what real development feels like, enable them with both the tools and the practices to become productive and enjoy coding as we do.</p><p>Providing this training is pointless if they don't get to work at places where these skills are appreciated. A number of startups in India are being limited by the shortage of technical talent. Businesses are unable to grow as they struggle to hire talented programmers that can build high quality, maintainable codebases that scale and are easy to change. If their codebases are in good hands, business owners are free to concentrate on the non-technical aspects that are often extremely critical for the success of the business.</p><p>We plan to connect developers, who are looking for new challenges, with companies who need and appreciate the value they bring to the table.</p><p>&nbsp;</p><p><em>Aakash is <a href=\"http://c42.in/people#aakash-dharmadhikari\">VP Consulting</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"https://twitter.com/#!/aakashd\">@aakashd</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>" "http://blog.c42.in/blog/c42-launchpad" (20355 45240) new 5 nil nil ((title nil "C42 Launchpad - bridging the gap between hackers and the industry") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 10 Apr 2012 04:02:00 +0000") (link nil "http://blog.c42.in/blog/c42-launchpad") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e784") (description nil "<p>At C42 Engineering, we spend about 108 man hours for every good developer we hire. For a small product company, I would rather spend that time developing features. We've always wanted to hire more awesome developers with less effort, and I think we may have a way to do just that.</p><p>We receive about 30-40 resumes a month. Our interview process, although time consuming, allows us to know the candidate better. Even before we call them to our office, we spend about half an hour with each candidate on the phone. Every face to face interview takes about 6 hours. After this extensive investment of time and energy, we consider ourselves lucky if we hire 1 developer a month, i.e. conversion rate of 2.5%, something we always wanted to improve.</p><p>While speaking with other startups at RubyConf India 2012, I realized, rather, that a 2.5% conversion rate is extremely high. I have heard horror stories of interviewing 150 candidates to hire one or two developers. The point is, businesses spend enormous amounts of energy and money in the hiring market with returns that are too low to be considered acceptable.</p><p>If we ask any consultancy or product company what skill set they would like prospective hires to have, the following common points come up over and over:</p><ul><li>Understands what is good code</li><li>Understands maintainability</li><li>Understands Object Oriented Programming principles</li><li>Familiarity with TDD</li><li>Deployments and DevOps</li><li>Awareness of standards and conventions</li></ul><p>In summary, every business needs developers who care about good code and are capabale of being productive from day one.</p><p><strong>The missing rockstars</strong></p><p>Most engineers who don't make it through our interview process are asked to apply again in six months. We don't do it just out of politeness, but because we actually believe that they can in time grow to become the capable developers we need.</p><p>These developers have the potential and inclination to become experts, but lack the correct exposure and guidance. Focused training on OO, TDD and Agile, with discussions around nuances of development practices and principles will convert these talented folk into the rockstars that every company seeks.</p><p>As always, we gave this feedback to the candidates in question. A consistent pattern emerged where candidates would get back to us asking for more information on how they could go about learning the requisite skills.</p><p>Unfortunately, there are no organizations like <a href=\"https://www.hackerschool.com/\">hacker/school</a>&nbsp;in India, places that expose programmers to the art of software craftsmanship. Be it universities or university-like classroom training programs, they just can't keep up with our fast moving industry. The gap is already large and growing every day.</p><p>Most lot of these skills are best learned by working closely with experienced developers and following practices for an extended duration. A 2 or 3 day workshop is useful for knowledge transfer, but it's impossible to develop discipline or grok the principles underlying the methodology in that short a duration.</p><p><strong>The launchpad</strong></p><p>C42 Launchpad hopes to be an answer to this problem. A 4-6 weeks full time hands-on workshop that will cover everything C42 Engineering expects a developer to know before she starts working on a codebase. We will have different batches for fresh graduates and for experienced developers. A rough sketch of the program for freshers:</p><ul><li> Programming 101                     
<ul><li>Introduction to Ruby</li><li>Introduction to Git</li><li>OO Design Principles</li><li> OO Patterns                         
<ul><li>Creational</li><li>Structural</li><li>Behavioral</li></ul></li><li>Programming/Design anit-patterns</li></ul></li><li> Web Application Development                     
<ul><li> Working within browsers                         
<ul><li>Introduction to HTML &amp; DOM</li><li>Introduction to CSS</li><li>Introduction to Javascript and Prototype based programming</li></ul></li><li> Ruby on Rails 101                         
<ul><li>Journey through Rails components</li><li>TDD with rails</li></ul></li></ul></li><li> Introduction to Agile                     
<ul><li>Agile principles</li><li>Planning and estimation</li><li>Importance of Automated Testing and Continuous Integration</li><li>Pair programming, TDD, Simple Design, Refactoring</li><li>Basics of XP and Scrum</li></ul></li><li>2 Weeks of Ruby on Rails project development in teams, following all the methodologies and principles mentioned above.</li></ul><p>The course structure as you can see is still being finalized, but the guiding principle is simple. Provide opportunity and inspiration to the willing engineers to hone their skills.</p><p><strong>Bridging the gap</strong></p><p>Lots of potential hackers join the Indian IT industry with big dreams. Due to lack of inspiration and opportunities, they stop caring about programming and become an hourly billable unit in an excel sheet somewhere. We want to show them what real development feels like, enable them with both the tools and the practices to become productive and enjoy coding as we do.</p><p>Providing this training is pointless if they don't get to work at places where these skills are appreciated. A number of startups in India are being limited by the shortage of technical talent. Businesses are unable to grow as they struggle to hire talented programmers that can build high quality, maintainable codebases that scale and are easy to change. If their codebases are in good hands, business owners are free to concentrate on the non-technical aspects that are often extremely critical for the success of the business.</p><p>We plan to connect developers, who are looking for new challenges, with companies who need and appreciate the value they bring to the table.</p><p>&nbsp;</p><p><em>Aakash is <a href=\"http://c42.in/people#aakash-dharmadhikari\">VP Consulting</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"https://twitter.com/#!/aakashd\">@aakashd</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>"))) ("No virtuous circle, or how India's Silicon Valley is... different" "<p>A blog post by me <a href=\"http://blog.sidu.in/2012/04/no-virtuous-circle-or-how-indias.html\">explaining my take on India's startup scene</a>, something which has directly impacted C42 Engineering's business model.</p>" "http://blog.c42.in/blog/no-virtuous-circle-or-how-indias-silicon-vall" (20350 50300) new 6 nil nil ((title nil "No virtuous circle, or how India's Silicon Valley is... different") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 06 Apr 2012 10:25:00 +0000") (link nil "http://blog.c42.in/blog/no-virtuous-circle-or-how-indias-silicon-vall") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78b") (description nil "<p>A blog post by me <a href=\"http://blog.sidu.in/2012/04/no-virtuous-circle-or-how-indias.html\">explaining my take on India's startup scene</a>, something which has directly impacted C42 Engineering's business model.</p>"))) ("Why I design for C42 Engineering, and why you should too" "<p>After 13 years of helping companies of all shapes and sizes design products and applications, I joined C42 Engineering a couple of months ago to start our experience design practice, based in the Bay Area. &nbsp;I&rsquo;m not sure if the phrase &lsquo;design practice lead&rsquo; reflects what I do, but I'll get to that later. &nbsp;As you can imagine, for a young start-up in India that is making significant investments in developing products, it is challenging to support my market salary in the US.&nbsp; So, I chose to earn a variable income, with the optimism of growing our business in the US market, offering services in software design and development.&nbsp;</p><p>My decision has been met with a variety of reactions - some positive, and a lot skeptical. &nbsp;For me, this move was the most logical next step, and a no-brainer. &nbsp;The main challenge so far has been explaining its rewards to a husband who is a mergers and acquisitions consultant, and I&rsquo;ve come out in flying colors on that one.&nbsp; Here&rsquo;s why I think C42 is going to be an organization of choice for other designers as well:</p><p><strong>&nbsp;At C42, the whole is greater than the sum of its parts</strong></p><p>\"In order to achieve high-quality user experience in a company's offerings, there must be a seamless merging of the services of multiple disciplines, including engineering, marketing, graphical and industrial design, and interface design\" (quoting Nielsen Norman). I know this is true from having practiced collaborative design in a variety of environments. &nbsp;But, I am yet to see another organization where personal agendas and turf wars have not got in the way of achieving this seamless merging. &nbsp;At best, you might have engineering, product management, and design teams having regular meetings, and more commonly each of them throwing deliverables over the cube to each other.&nbsp; Ultimately, the product suffers, and the user&rsquo;s experience is compromised. C42 being a small team seeded with talented engineers who aren&rsquo;t sniffled by silos and roles, is extremely well positioned to deliver products and solutions that are beautifully designed and engineered by a multi-disciplinary team.</p><p><strong>At C42, it will be as beautiful as possible, even if it's inside the box</strong></p><p>I&rsquo;ve met several designers with great ideas for product designs, frustrated that those designs just show up in their portfolio, and haven&rsquo;t made it into the hands of the user. &nbsp;At C42, you will experience the satisfaction and joy of seeing your design ideas get delivered.&nbsp; What&rsquo;s more impressive is the passion and commitment with which the team writes beautiful code.&nbsp; If you&rsquo;re a passionate designer, you can relate to what Steve Jobs said about the PC board &ldquo;I want it to be as beautiful as possible, even if it&rsquo;s inside the box. &nbsp;A great carpenter isn&rsquo;t going to use lousy wood for the back of a cabinet, even though nobody&rsquo;s going to see it.&rdquo;&nbsp;&nbsp;</p><p><strong>C42 Labs is design thinking in action</strong></p><p>The empathy with which C42's first product (<a href=\"http://rubymonk.com/\">rubymonk.com</a>) was designed, the extreme collaboration and iterative prototyping that's gone into its releases - is design thinking in action. &nbsp;If you are interested in leading through design, I invite you to see how C42 Labs develops products. If design thinking is more doing than thinking, then, the team does one heck of a lot of design thinking. &nbsp;It provides a solid platform for professional growth and thought leadership in the design community.</p><p>So, if you are someone who cares about the user more than your design portfolio, someone who believes that user experience should be second nature to software engineering teams, someone who is committed to making the power of extreme collaboration work in creating great products, you want to talk to us.</p><p>&nbsp;</p><p><em>Anu is the <a href=\"http://c42.in/people#anu-ramaswamy\">Practice Lead for User Experience Design</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"http://twitter.com/anu5ramaswamy\">@anu5ramaswamy</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>" "http://blog.c42.in/blog/why-i-design-for-c42-engineering-and-why-you" (20350 36140) new 7 nil nil ((title nil "Why I design for C42 Engineering, and why you should too") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 06 Apr 2012 06:29:00 +0000") (link nil "http://blog.c42.in/blog/why-i-design-for-c42-engineering-and-why-you") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78d") (description nil "<p>After 13 years of helping companies of all shapes and sizes design products and applications, I joined C42 Engineering a couple of months ago to start our experience design practice, based in the Bay Area. &nbsp;I&rsquo;m not sure if the phrase &lsquo;design practice lead&rsquo; reflects what I do, but I'll get to that later. &nbsp;As you can imagine, for a young start-up in India that is making significant investments in developing products, it is challenging to support my market salary in the US.&nbsp; So, I chose to earn a variable income, with the optimism of growing our business in the US market, offering services in software design and development.&nbsp;</p><p>My decision has been met with a variety of reactions - some positive, and a lot skeptical. &nbsp;For me, this move was the most logical next step, and a no-brainer. &nbsp;The main challenge so far has been explaining its rewards to a husband who is a mergers and acquisitions consultant, and I&rsquo;ve come out in flying colors on that one.&nbsp; Here&rsquo;s why I think C42 is going to be an organization of choice for other designers as well:</p><p><strong>&nbsp;At C42, the whole is greater than the sum of its parts</strong></p><p>\"In order to achieve high-quality user experience in a company's offerings, there must be a seamless merging of the services of multiple disciplines, including engineering, marketing, graphical and industrial design, and interface design\" (quoting Nielsen Norman). I know this is true from having practiced collaborative design in a variety of environments. &nbsp;But, I am yet to see another organization where personal agendas and turf wars have not got in the way of achieving this seamless merging. &nbsp;At best, you might have engineering, product management, and design teams having regular meetings, and more commonly each of them throwing deliverables over the cube to each other.&nbsp; Ultimately, the product suffers, and the user&rsquo;s experience is compromised. C42 being a small team seeded with talented engineers who aren&rsquo;t sniffled by silos and roles, is extremely well positioned to deliver products and solutions that are beautifully designed and engineered by a multi-disciplinary team.</p><p><strong>At C42, it will be as beautiful as possible, even if it's inside the box</strong></p><p>I&rsquo;ve met several designers with great ideas for product designs, frustrated that those designs just show up in their portfolio, and haven&rsquo;t made it into the hands of the user. &nbsp;At C42, you will experience the satisfaction and joy of seeing your design ideas get delivered.&nbsp; What&rsquo;s more impressive is the passion and commitment with which the team writes beautiful code.&nbsp; If you&rsquo;re a passionate designer, you can relate to what Steve Jobs said about the PC board &ldquo;I want it to be as beautiful as possible, even if it&rsquo;s inside the box. &nbsp;A great carpenter isn&rsquo;t going to use lousy wood for the back of a cabinet, even though nobody&rsquo;s going to see it.&rdquo;&nbsp;&nbsp;</p><p><strong>C42 Labs is design thinking in action</strong></p><p>The empathy with which C42's first product (<a href=\"http://rubymonk.com/\">rubymonk.com</a>) was designed, the extreme collaboration and iterative prototyping that's gone into its releases - is design thinking in action. &nbsp;If you are interested in leading through design, I invite you to see how C42 Labs develops products. If design thinking is more doing than thinking, then, the team does one heck of a lot of design thinking. &nbsp;It provides a solid platform for professional growth and thought leadership in the design community.</p><p>So, if you are someone who cares about the user more than your design portfolio, someone who believes that user experience should be second nature to software engineering teams, someone who is committed to making the power of extreme collaboration work in creating great products, you want to talk to us.</p><p>&nbsp;</p><p><em>Anu is the <a href=\"http://c42.in/people#anu-ramaswamy\">Practice Lead for User Experience Design</a> at C42 Engineering. If you liked this post, please consider...</em></p><ul><li><em>following <a href=\"http://twitter.com/anu5ramaswamy\">@anu5ramaswamy</a> on twitter</em></li><li><em><a href=\"http://feeds.feedburner.com/C42Engineering\">subscribing</a> to this blog</em></li></ul>"))) ("Want designers who code? Something's got to give." "<p>While we at C42 continue to debate this topic amongst ourselves, thought I'd share my thoughts, and hear what others have to say. &nbsp;Let us know what you think.</p><p><a href=\"http://www.anuramaswamy.com/?p=423\">Want designers who code? Something's got to give</a>.</p>" "http://blog.c42.in/blog/115393134" (20335 11300) new 8 nil nil ((title nil "Want designers who code? Something's got to give.") (dc:creator nil "C42 Engineering") (pubDate nil "Sun, 25 Mar 2012 14:31:00 +0000") (link nil "http://blog.c42.in/blog/115393134") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78e") (description nil "<p>While we at C42 continue to debate this topic amongst ourselves, thought I'd share my thoughts, and hear what others have to say. &nbsp;Let us know what you think.</p><p><a href=\"http://www.anuramaswamy.com/?p=423\">Want designers who code? Something's got to give</a>.</p>"))) ("Three years in a row: We're speaking at RubyConf India once again" "<p>We've got three talks&nbsp;at this years <a href=\"http://rubyconfindia.org/2012\">RubyConf India</a>. Here's a quick list - click through for more details.</p><ul><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#sandboxing-ruby-code\">Sandboxing Ruby Code - Lessons from the battlefield</a>,\" by <a href=\"http://c42.in/people#tejas-dinkar\">Tejas Dinkar</a> and <a href=\"http://c42.in/people#jasim-basheer\">Jasim Basheer</a></li><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#clojure-is-my-favourite-ruby\">Clojure is my favourite ruby</a>,\" by <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li><li>\"Testing patterns,\" by Sidu Ponnappa and Aninda Kundu&nbsp;</li></ul><p>We're also happy to be one of the sponsors the event for the second year running.</p><p><a href=\"http://rubyconfindia.org/\"><img src=\"http://rubyconfindia.org/2012/assets/badges/sponsor.png\" /><br/></a></p><p>Most of C42 is flying out to Pune for RubyConf India, so do say hello if you're going to be there.</p>" "http://blog.c42.in/blog/three-years-in-a-row-were-speaking-at-rubycon" (20330 5020) new 9 nil nil ((title nil "Three years in a row: We're speaking at RubyConf India once again") (dc:creator nil "C42 Engineering") (pubDate nil "Wed, 21 Mar 2012 17:45:00 +0000") (link nil "http://blog.c42.in/blog/three-years-in-a-row-were-speaking-at-rubycon") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e78f") (description nil "<p>We've got three talks&nbsp;at this years <a href=\"http://rubyconfindia.org/2012\">RubyConf India</a>. Here's a quick list - click through for more details.</p><ul><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#sandboxing-ruby-code\">Sandboxing Ruby Code - Lessons from the battlefield</a>,\" by <a href=\"http://c42.in/people#tejas-dinkar\">Tejas Dinkar</a> and <a href=\"http://c42.in/people#jasim-basheer\">Jasim Basheer</a></li><li>\"<a href=\"http://rubyconfindia.org/2012/talks.html#clojure-is-my-favourite-ruby\">Clojure is my favourite ruby</a>,\" by <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li><li>\"Testing patterns,\" by Sidu Ponnappa and Aninda Kundu&nbsp;</li></ul><p>We're also happy to be one of the sponsors the event for the second year running.</p><p><a href=\"http://rubyconfindia.org/\"><img src=\"http://rubyconfindia.org/2012/assets/badges/sponsor.png\" /><br/></a></p><p>Most of C42 is flying out to Pune for RubyConf India, so do say hello if you're going to be there.</p>"))) ("TDD isn't about testing, it's about design" "<p>The reason I haven't written about this before is because in certain circles, this post would be stating the obvious. However, it's become increasing clear to me that in the mad rush to prove that they 'get testing,' most new Ruby/Rails programmers completely miss the real reason TDD is so valuable. So, here goes:</p><p><span>\"TDD is not about testing your code. The fact that your code gets tested is a valuable side effect.\"</span><p /><span>The hardest part of writing code is keeping all of the moving parts in your head so you know exactly what side-effects the new code you're writing will have on existing code. This is how most bugs crop up. Nobody <em>wants</em> to introduce a bug, but the chain of cause and effect in a non-trivial codebase can be very hard to follow. Everyone runs into this sooner or later, and this has been named \"<a href=\"http://lwn.net/2000/0824/a/esr-sharing.php3\">The curse of the gifted programmer</a>\" (in a different context, but the principle applies).</span><p /><span>TDD is a tool which allows you to use your tests to break the code you're working on down into tiny chunks, thereby reducing what you need to hold in your head, in turn reducing the likelihood of you introducing defects and making it easier for you to understand what's going on. The fact that the the test suite thus produced can subsequently be used for regression testing is a very positive and useful side-effect, but a side-effect nonetheless.</span></p><p>A few other conclusions can be derived from this statement:</p><ul><li>Languages and codebases which eschew side-effects and thereby achieve the same goal of reducing the quantity of code programmers need to hold in their heads see decreased or negligible value from TDD.</li><li>If you and your team are smart enough, you don't need TDD because holding code in your head isn't a problem. You know you're this smart when you can consistently hold in your head the cause and effect chain&nbsp;across your entire codebase&nbsp;for any change you or your colleagues make.</li><li>If you <em>can't</em> test drive a particular piece of code, either you know too little about possible solutions, or you have poorly factored code. Consequently, you can use TDD as a sort of canary-in-the-coalmine to figure out which bits of your codebase could be better factored.</li></ul><p><span>If testing was what TDD was about, TDD (test first) and unit testing (test last) would be equivalent. They aren't.</span></p><p>&nbsp;</p>" "http://blog.c42.in/blog/tdd-isnt-about-testing-its-about-design" (20324 36736) new 10 nil nil ((title nil "TDD isn't about testing, it's about design") (dc:creator nil "C42 Engineering") (pubDate nil "Sat, 17 Mar 2012 13:20:00 +0000") (link nil "http://blog.c42.in/blog/tdd-isnt-about-testing-its-about-design") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e790") (description nil "<p>The reason I haven't written about this before is because in certain circles, this post would be stating the obvious. However, it's become increasing clear to me that in the mad rush to prove that they 'get testing,' most new Ruby/Rails programmers completely miss the real reason TDD is so valuable. So, here goes:</p><p><span>\"TDD is not about testing your code. The fact that your code gets tested is a valuable side effect.\"</span><p /><span>The hardest part of writing code is keeping all of the moving parts in your head so you know exactly what side-effects the new code you're writing will have on existing code. This is how most bugs crop up. Nobody <em>wants</em> to introduce a bug, but the chain of cause and effect in a non-trivial codebase can be very hard to follow. Everyone runs into this sooner or later, and this has been named \"<a href=\"http://lwn.net/2000/0824/a/esr-sharing.php3\">The curse of the gifted programmer</a>\" (in a different context, but the principle applies).</span><p /><span>TDD is a tool which allows you to use your tests to break the code you're working on down into tiny chunks, thereby reducing what you need to hold in your head, in turn reducing the likelihood of you introducing defects and making it easier for you to understand what's going on. The fact that the the test suite thus produced can subsequently be used for regression testing is a very positive and useful side-effect, but a side-effect nonetheless.</span></p><p>A few other conclusions can be derived from this statement:</p><ul><li>Languages and codebases which eschew side-effects and thereby achieve the same goal of reducing the quantity of code programmers need to hold in their heads see decreased or negligible value from TDD.</li><li>If you and your team are smart enough, you don't need TDD because holding code in your head isn't a problem. You know you're this smart when you can consistently hold in your head the cause and effect chain&nbsp;across your entire codebase&nbsp;for any change you or your colleagues make.</li><li>If you <em>can't</em> test drive a particular piece of code, either you know too little about possible solutions, or you have poorly factored code. Consequently, you can use TDD as a sort of canary-in-the-coalmine to figure out which bits of your codebase could be better factored.</li></ul><p><span>If testing was what TDD was about, TDD (test first) and unit testing (test last) would be equivalent. They aren't.</span></p><p>&nbsp;</p>"))) ("Memories of conf.KDE.in" "<p>Well they say in solitude you sometimes remember your fondest memories, I would like to share with one you folks.</p><p>Today morning I realized that it was March, now March might be an ordinary month for most of you but looking back I can say for sure it was and it still is special for me;&nbsp; I can clearly recall the events that occurred and how they changed my life.</p><p>A year back the first KDE conf India happened from 9-13th of March, I remember I was more of an ordinary student in the class, I had a decent GPA and I used to get by without much trouble for the most part but somehow on 9th I had an urge to attend KDE conf despite it had 700 bucks for registration and my HOD(Head of Department) had clearly denied the request to attend it, but I still went for the conference as it was happening right below my department.</p><p>I wish I could say that after attending the very first talk of the conference my life changed but in actuality nothing happened ;&nbsp; I met really smart people but that just increased my insecurity and I couldn&rsquo;t follow most of the talks. I was doubting if I made right choice of attending it in the first place, both 9th &ndash; 10th went without any feelings that I learned something valuable, something which I could have followed and used in my daily life.</p><p>Than came <strong>11th March</strong>, the day was normal till the afternoon after that we had a hands-on bug squashing lab, where young KDE developers would guide us by fixing a bug from KDE bugzilla. Since it was the last day for the talks and I was tired with all the information i received which I couldn&rsquo;t made sense of; I wanted to skip the lab but somehow I didn&rsquo;t do that for some reason. In the lab we had to solve a bug in Rekonq (a browser bundled with KDE) the bug description said that it had to something to do with ad blockers, now I used to browse the internet before and I knew a thing or two about how Ad-blockers work; so I quickly found the code/file which needed to be patched and it was more of a lucky guess then any real skill involved but that was enough as it impressed the KDE developer that were there.</p><p>One particular (Vishesh Handa) came to me and told me that I knew things and I should&nbsp; use my knowledge to write patches for KDE and there is something about it; when a complete stranger sees your work for the first time and praises you for it. I think I was on cloud nine for rest of the day; when I reached my apartment I started looking for sub project to contribute to and I found Nepomuk junior job page which basically consists of easy bugs which can help new people learn about the project, bug fixing and writing patches but I was naive and I didn&rsquo;t know where you can actually find the source code, let alone any knowledge about version control systems.</p><p>Luckily next day it was a hacking session for the speakers; I took that opportunity to meet them and learn how to solve bugs and where to find help in case you don&rsquo;t know what to do. They even gave me a simple bug to get started on which was quite trivial and would take around 3-4 lines of code to solve it but with all things that look simple while looking back, the bug took me more than 6 hours to fix as I was clueless on where exactly i needed to put that code in the first place.Though all of that work didn&rsquo;t go to waste as I remember the feeling when that patch was committed on the next day. I was hooked after that commit and in 3-4 days I submitted even more patches which eventually got committed. After a month or so I finally received my KDE developer account to push my own commits.</p><p>Looking back, if I had not attend the lab or if that KDE developer (Vishesh Handa) hadn&rsquo;t said those things to me, my entire life would have been completely different and I would be a normal guy today working at a MNC but thankfully life had better plans. So many great memories are the result of that one moment and in my heart I still have gratitude for KDE without it I wouldn&rsquo;t have become a contributor, a GSoCer, made smart friends, visited different places, improved my programming skills and maybe biggest of all I wouldn&rsquo;t be a part of <span><a href=\"http://c42.in/people\">c42</a></span> (The place I work at). My entire life from that single moment to the moment when I received my first salary is indebted to KDE.</p><p>Recently, I finally had the chance to catch up with one of my friend from KDE (Shantanu) whom I first met at <a href=\"http://conf.KDE.in\">conf.KDE.in</a> . We kept delaying our meet because of our busy schedules but we finally caught up last Sunday and the last Sunday&nbsp;was on <strong>11th March</strong>. eh, coincidences can be funny sometimes <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1336659725g\" /><br/></p>" "http://blog.c42.in/blog/memories-of-confkdein" (20323 20972) new 11 nil nil ((title nil "Memories of conf.KDE.in") (dc:creator nil "C42 Engineering") (pubDate nil "Fri, 16 Mar 2012 14:45:00 +0000") (link nil "http://blog.c42.in/blog/memories-of-confkdein") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e792") (description nil "<p>Well they say in solitude you sometimes remember your fondest memories, I would like to share with one you folks.</p><p>Today morning I realized that it was March, now March might be an ordinary month for most of you but looking back I can say for sure it was and it still is special for me;&nbsp; I can clearly recall the events that occurred and how they changed my life.</p><p>A year back the first KDE conf India happened from 9-13th of March, I remember I was more of an ordinary student in the class, I had a decent GPA and I used to get by without much trouble for the most part but somehow on 9th I had an urge to attend KDE conf despite it had 700 bucks for registration and my HOD(Head of Department) had clearly denied the request to attend it, but I still went for the conference as it was happening right below my department.</p><p>I wish I could say that after attending the very first talk of the conference my life changed but in actuality nothing happened ;&nbsp; I met really smart people but that just increased my insecurity and I couldn&rsquo;t follow most of the talks. I was doubting if I made right choice of attending it in the first place, both 9th &ndash; 10th went without any feelings that I learned something valuable, something which I could have followed and used in my daily life.</p><p>Than came <strong>11th March</strong>, the day was normal till the afternoon after that we had a hands-on bug squashing lab, where young KDE developers would guide us by fixing a bug from KDE bugzilla. Since it was the last day for the talks and I was tired with all the information i received which I couldn&rsquo;t made sense of; I wanted to skip the lab but somehow I didn&rsquo;t do that for some reason. In the lab we had to solve a bug in Rekonq (a browser bundled with KDE) the bug description said that it had to something to do with ad blockers, now I used to browse the internet before and I knew a thing or two about how Ad-blockers work; so I quickly found the code/file which needed to be patched and it was more of a lucky guess then any real skill involved but that was enough as it impressed the KDE developer that were there.</p><p>One particular (Vishesh Handa) came to me and told me that I knew things and I should&nbsp; use my knowledge to write patches for KDE and there is something about it; when a complete stranger sees your work for the first time and praises you for it. I think I was on cloud nine for rest of the day; when I reached my apartment I started looking for sub project to contribute to and I found Nepomuk junior job page which basically consists of easy bugs which can help new people learn about the project, bug fixing and writing patches but I was naive and I didn&rsquo;t know where you can actually find the source code, let alone any knowledge about version control systems.</p><p>Luckily next day it was a hacking session for the speakers; I took that opportunity to meet them and learn how to solve bugs and where to find help in case you don&rsquo;t know what to do. They even gave me a simple bug to get started on which was quite trivial and would take around 3-4 lines of code to solve it but with all things that look simple while looking back, the bug took me more than 6 hours to fix as I was clueless on where exactly i needed to put that code in the first place.Though all of that work didn&rsquo;t go to waste as I remember the feeling when that patch was committed on the next day. I was hooked after that commit and in 3-4 days I submitted even more patches which eventually got committed. After a month or so I finally received my KDE developer account to push my own commits.</p><p>Looking back, if I had not attend the lab or if that KDE developer (Vishesh Handa) hadn&rsquo;t said those things to me, my entire life would have been completely different and I would be a normal guy today working at a MNC but thankfully life had better plans. So many great memories are the result of that one moment and in my heart I still have gratitude for KDE without it I wouldn&rsquo;t have become a contributor, a GSoCer, made smart friends, visited different places, improved my programming skills and maybe biggest of all I wouldn&rsquo;t be a part of <span><a href=\"http://c42.in/people\">c42</a></span> (The place I work at). My entire life from that single moment to the moment when I received my first salary is indebted to KDE.</p><p>Recently, I finally had the chance to catch up with one of my friend from KDE (Shantanu) whom I first met at <a href=\"http://conf.KDE.in\">conf.KDE.in</a> . We kept delaying our meet because of our busy schedules but we finally caught up last Sunday and the last Sunday&nbsp;was on <strong>11th March</strong>. eh, coincidences can be funny sometimes <img src=\"http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1336659725g\" /><br/></p>"))) ("Overcoming UX Exclusivity" "<p>Anu Ramaswamy, our Practice Lead for XD writes about why <a href=\"http://www.anuramaswamy.com/?p=121\">UX should be second nature to software development teams</a>. Take a look and let us know what you think!</p>" "http://blog.c42.in/blog/overcoming-ux-exclusivity" (20321 51304) new 12 nil nil ((title nil "Overcoming UX Exclusivity") (dc:creator nil "C42 Engineering") (pubDate nil "Thu, 15 Mar 2012 10:46:00 +0000") (link nil "http://blog.c42.in/blog/overcoming-ux-exclusivity") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e798") (description nil "<p>Anu Ramaswamy, our Practice Lead for XD writes about why <a href=\"http://www.anuramaswamy.com/?p=121\">UX should be second nature to software development teams</a>. Take a look and let us know what you think!</p>"))) ("Frequently asked questions about Rails migrations" "<p>At C42 Engineering we have been consulting with a lot of teams who use Rails. Surprisingly the most misunderstood tool in Rails is migrations. I am going to shed some light on how I think schema should be managed on a rails project. This is not a tutorial for rails migrations, but rather a collection of frequent questions we get from these teams and their answers.</p><p>Please feel free to share your experiences and point out any flaws you may find in the arguments.</p><p>Let's take a look at the two components that make your schema migration a child's play.</p><h4>1. Migration Files</h4><p>This is where we start defining our schema from the first commit and incrementally change the schema with every new migration we add. As Rails can track which migrations have been applied and which are new, a developer can confidently run \"rake db:migrate\" and assume that he has the latest schema. Migration files, as the name suggests, should be used to migrate an existing schema to next version only. Once you have used a migration file, it's purpose is served and you do not need it anymore.</p><h4>2. Schema dumps (db/schema.rb or db/structure.sql)</h4><p>The schema dump is the only authoritative source of your DB schema. While creating a schema from scratch on development, staging or production system, a developer must use these dumps to create the schema.</p><h3>Question 1: should I check in schema.rb?</h3><p>Yes, you must. The schema.rb will be used by everyone to create their database from scratch and thus the latest schema.rb must be checked into the repository. You will get occasional merge conflicts, but you may safely accept the latest versions if you are going to run migrations after every pull.</p><h3>Question 2: The schema definition is duplicated into migrations and schema.rb, why do I need both?</h3><p>A migration is not a definition of your schema. It's sole purpose is to convey the schema change required by a developer to existing application installations. It defines these incremental changes, and must be used only for applying these changes to existing installations. To check the current schema definition, you should depend on schema.rb only.</p><p>At the risk of repeating this for the tenth time, if you look at migrations as code to be used only for changing existing databases, you can make your life easier.</p><h3>Question 3: How do I create a new database from scratch?</h3><p>While setting up new staging/CI servers or developer machines, one should not run the complete migration history. Using schema dump to create the new environments is much safer and faster. Use the rake tasks like \"rake db:setup\" to setup db from scratch.</p><h3>Question 4: Can I use model code in migrations?</h3><p>Yes, you can, but as a last resort. There are multiple valid use cases, like:</p><ol><li>Adding a new field to an existing model and all the existing records must have certain values based on some logic.</li><li>You are refactoring the table structure, and thus need to migrate existing data from one table to another after some transformation.</li></ol><p>As mentioned in the rails guides, it can be used, but with extreme caution. Refer to the <a href=\"http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations\">rails guide</a> for more details.</p><p>The model code, you are using in migrations, is inevitably going to change in the long run or within next few hours. Using it in migrations can make the migrations error prone or can crash the db:migrate process. As there are no tests around migrations, this would be a rather unpleasant surprise for your team in the future.</p><h3>Question 5: I am refactoring my code and this calls for changing my 6 month old migration files. What should I do?</h3><p>There will be migrations, which use model code to migrate existing data from one table to another. While in the future when we refactor our models, the method or classes used in this migration might have to be removed making the execution of these migrations impossible.</p><p>For a general rails project (assuming a monthly release), any migration older than 1 month need not be maintained. Unless a migration file is needed to migrate an existing older DB instance of your application to the said version, you need not worry about maintaining that migration.</p><p>I personally prefer to collapse all the existing migrations into a single migration at the end of every release, by just copying the schema.rb into \"001_collapsed_schema.rb\". This way, you won't have these older migrations which need to be \"maintained\".</p><h3>Question 6: Can I bootstrap my application using migrations?</h3><p>If I add a model called Continent, which is going to have a fixed set of 7 values on all the installations, migrations look like a very tempting place to create this data. Bad idea!</p><p>A migration may or may not be used while setting up new systems. As schema.rb contains only the schema definition, this seed data won't be populated if we use \"rake db:setup\". Also, if accidentally migrations are used to setup the test environment, it would contain the seed data which is not visible to the person reading the test. You should use \"rake db:seed\" to bootstrap production or development databases.</p><p /><h3>General rules while using rails migrations</h3><p /><h4><strong>1. Never change your database schema manually</strong></h4><p>If you manually add table, column or even a foreign key to your dev database, it will reflect in your schema.rb when you execute \"rake db:migrate\" the next time, but not in any of your migrations. This will cause different instances of your application to have different schemas, depending on if you have used migrations or schema.rb to create it. You will end up having different schemas on production and dev environments.</p><h4><strong>2. Avoid the use of models in your migrations as much as possible.</strong></h4><p>As mentioned earlier, there are very few scenarios that justify the use of model code in migrations, but avoid it as long as you can.</p><h4><strong>3. Never change a migration that has already been run</strong></h4><p>Even if it's your code that you haven't even committed, as a matter of principle, never change a migration that has been executed already. This will help you avoid those late night debugging sessions in the future.</p><h4><strong>4. Double check that the migrations can be rolled back</strong></h4><p>Rarely people talk about rolling back migrations and that scares me. As a habit while developing, I rollback and reapply every migration before I commit it. There are no tests around migrations, which makes it critical that you manually do \"rake db:migrate:redo\" after applying every new migration in dev environment.</p><h4><strong>5. Do not create seed data in migrations</strong></h4><p>Although it's possible to create model records through migrations, migrations are not designed for seed data population and cause instability in your production as well as test environments.</p><p>There are still further topics to be discussed like test data setup, use of fixtures and strategies for data seeding; but I will leave these for some other blog post.</p>" "http://blog.c42.in/blog/common-questions-about-rails-migrations" (20315 49660) new 13 nil nil ((title nil "Frequently asked questions about Rails migrations") (dc:creator nil "C42 Engineering") (pubDate nil "Sat, 10 Mar 2012 21:05:00 +0000") (link nil "http://blog.c42.in/blog/common-questions-about-rails-migrations") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e799") (description nil "<p>At C42 Engineering we have been consulting with a lot of teams who use Rails. Surprisingly the most misunderstood tool in Rails is migrations. I am going to shed some light on how I think schema should be managed on a rails project. This is not a tutorial for rails migrations, but rather a collection of frequent questions we get from these teams and their answers.</p><p>Please feel free to share your experiences and point out any flaws you may find in the arguments.</p><p>Let's take a look at the two components that make your schema migration a child's play.</p><h4>1. Migration Files</h4><p>This is where we start defining our schema from the first commit and incrementally change the schema with every new migration we add. As Rails can track which migrations have been applied and which are new, a developer can confidently run \"rake db:migrate\" and assume that he has the latest schema. Migration files, as the name suggests, should be used to migrate an existing schema to next version only. Once you have used a migration file, it's purpose is served and you do not need it anymore.</p><h4>2. Schema dumps (db/schema.rb or db/structure.sql)</h4><p>The schema dump is the only authoritative source of your DB schema. While creating a schema from scratch on development, staging or production system, a developer must use these dumps to create the schema.</p><h3>Question 1: should I check in schema.rb?</h3><p>Yes, you must. The schema.rb will be used by everyone to create their database from scratch and thus the latest schema.rb must be checked into the repository. You will get occasional merge conflicts, but you may safely accept the latest versions if you are going to run migrations after every pull.</p><h3>Question 2: The schema definition is duplicated into migrations and schema.rb, why do I need both?</h3><p>A migration is not a definition of your schema. It's sole purpose is to convey the schema change required by a developer to existing application installations. It defines these incremental changes, and must be used only for applying these changes to existing installations. To check the current schema definition, you should depend on schema.rb only.</p><p>At the risk of repeating this for the tenth time, if you look at migrations as code to be used only for changing existing databases, you can make your life easier.</p><h3>Question 3: How do I create a new database from scratch?</h3><p>While setting up new staging/CI servers or developer machines, one should not run the complete migration history. Using schema dump to create the new environments is much safer and faster. Use the rake tasks like \"rake db:setup\" to setup db from scratch.</p><h3>Question 4: Can I use model code in migrations?</h3><p>Yes, you can, but as a last resort. There are multiple valid use cases, like:</p><ol><li>Adding a new field to an existing model and all the existing records must have certain values based on some logic.</li><li>You are refactoring the table structure, and thus need to migrate existing data from one table to another after some transformation.</li></ol><p>As mentioned in the rails guides, it can be used, but with extreme caution. Refer to the <a href=\"http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations\">rails guide</a> for more details.</p><p>The model code, you are using in migrations, is inevitably going to change in the long run or within next few hours. Using it in migrations can make the migrations error prone or can crash the db:migrate process. As there are no tests around migrations, this would be a rather unpleasant surprise for your team in the future.</p><h3>Question 5: I am refactoring my code and this calls for changing my 6 month old migration files. What should I do?</h3><p>There will be migrations, which use model code to migrate existing data from one table to another. While in the future when we refactor our models, the method or classes used in this migration might have to be removed making the execution of these migrations impossible.</p><p>For a general rails project (assuming a monthly release), any migration older than 1 month need not be maintained. Unless a migration file is needed to migrate an existing older DB instance of your application to the said version, you need not worry about maintaining that migration.</p><p>I personally prefer to collapse all the existing migrations into a single migration at the end of every release, by just copying the schema.rb into \"001_collapsed_schema.rb\". This way, you won't have these older migrations which need to be \"maintained\".</p><h3>Question 6: Can I bootstrap my application using migrations?</h3><p>If I add a model called Continent, which is going to have a fixed set of 7 values on all the installations, migrations look like a very tempting place to create this data. Bad idea!</p><p>A migration may or may not be used while setting up new systems. As schema.rb contains only the schema definition, this seed data won't be populated if we use \"rake db:setup\". Also, if accidentally migrations are used to setup the test environment, it would contain the seed data which is not visible to the person reading the test. You should use \"rake db:seed\" to bootstrap production or development databases.</p><p /><h3>General rules while using rails migrations</h3><p /><h4><strong>1. Never change your database schema manually</strong></h4><p>If you manually add table, column or even a foreign key to your dev database, it will reflect in your schema.rb when you execute \"rake db:migrate\" the next time, but not in any of your migrations. This will cause different instances of your application to have different schemas, depending on if you have used migrations or schema.rb to create it. You will end up having different schemas on production and dev environments.</p><h4><strong>2. Avoid the use of models in your migrations as much as possible.</strong></h4><p>As mentioned earlier, there are very few scenarios that justify the use of model code in migrations, but avoid it as long as you can.</p><h4><strong>3. Never change a migration that has already been run</strong></h4><p>Even if it's your code that you haven't even committed, as a matter of principle, never change a migration that has been executed already. This will help you avoid those late night debugging sessions in the future.</p><h4><strong>4. Double check that the migrations can be rolled back</strong></h4><p>Rarely people talk about rolling back migrations and that scares me. As a habit while developing, I rollback and reapply every migration before I commit it. There are no tests around migrations, which makes it critical that you manually do \"rake db:migrate:redo\" after applying every new migration in dev environment.</p><h4><strong>5. Do not create seed data in migrations</strong></h4><p>Although it's possible to create model records through migrations, migrations are not designed for seed data population and cause instability in your production as well as test environments.</p><p>There are still further topics to be discussed like test data setup, use of fixtures and strategies for data seeding; but I will leave these for some other blog post.</p>"))) ("Our RubyConf XI talk on Continuous Delivery" "<iframe id=\"yui_3_7_3_1_1363603202722_7040\" frameborder=\"0\" height=\"326\" data-embed=\"true\" width=\"580\" src=\"http://player.vimeo.com/video/35305036?byline=0&amp;portrait=0&amp;wmode=opaque\"></iframe><p><a href=\"http://vimeo.com/35305036\">Ruby Software Continuously Delivered and Exhaustively Explained</a> from <a href=\"http://vimeo.com/user10070396\">Srushti Ambekallu</a> on <a href=\"http://vimeo.com/\">Vimeo</a>.</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://coderwall.com/bguthrie\">Brian</a> and <a href=\"http://c42.in/people#srushti-ambekallu\">I</a> gave a slightly different version of our talk from RubyConf India 2011.</p><p>In this talk we focused on the value of Continuous Delivery as a practice and how it's an extension of Agile methodologies, and being able iterate on the product in quicker cycles helps deliver value to and gather feedback from users faster.</p><p>We spent some time going over tools you can use to automate the process, like Chef, Puppet &amp; Capistrano among others.</p><p>We also discussed various branching strategies you can use and their relative pros &amp; cons. Branching becomes a requirement for features that require a long time to develop (where you can't make incremental deploys) and when you are doing continuous deployment.</p>" "http://blog.c42.in/blog/97084199" (20267 19542) new 14 nil nil ((title nil "Our RubyConf XI talk on Continuous Delivery") (dc:creator nil "Srushti Ambekallu") (pubDate nil "Fri, 03 Feb 2012 02:54:14 +0000") (link nil "http://blog.c42.in/blog/97084199") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79a") (description nil "<iframe id=\"yui_3_7_3_1_1363603202722_7040\" frameborder=\"0\" height=\"326\" data-embed=\"true\" width=\"580\" src=\"http://player.vimeo.com/video/35305036?byline=0&amp;portrait=0&amp;wmode=opaque\"></iframe><p><a href=\"http://vimeo.com/35305036\">Ruby Software Continuously Delivered and Exhaustively Explained</a> from <a href=\"http://vimeo.com/user10070396\">Srushti Ambekallu</a> on <a href=\"http://vimeo.com/\">Vimeo</a>.</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://coderwall.com/bguthrie\">Brian</a> and <a href=\"http://c42.in/people#srushti-ambekallu\">I</a> gave a slightly different version of our talk from RubyConf India 2011.</p><p>In this talk we focused on the value of Continuous Delivery as a practice and how it's an extension of Agile methodologies, and being able iterate on the product in quicker cycles helps deliver value to and gather feedback from users faster.</p><p>We spent some time going over tools you can use to automate the process, like Chef, Puppet &amp; Capistrano among others.</p><p>We also discussed various branching strategies you can use and their relative pros &amp; cons. Branching becomes a requirement for features that require a long time to develop (where you can't make incremental deploys) and when you are doing continuous deployment.</p>"))) ("Readline love for the Clojure REPL using rlwrap" "<p>One of the painful things about the REPL/shells of JVM based languages like Clojure and JRuby is that they have no support for Readline out of the box. No command history, navigation, nothing.</p><p>This can be solved in one of two way - the <code>JLine</code> java library, and <code>rlwrap</code>.</p><p>I favour <code>rlwrap</code>&nbsp;approach because this way, I can add readline support without having to mess with java classpaths or the <code>clj</code> script set up by Hombrew.</p><p>All you need to do is install rlwrap (<code>brew install rlwrap&nbsp;</code>/&nbsp;<code>apt-get install rlwrap</code>) then setup a simple shell script like so:</p><p><code> #!/bin/bash <br /> rlwrap --quote-characters=\"'\" --command clojure clj</code></p><p>Name it something like&nbsp;<code>cljrl</code>, make it executable and put on your path. This approach should work for JRuby too.</p><code><span>If you're wondering about the arguments to&nbsp;</span></code><span>rlwrap</span><code><span>,&nbsp;</span>--quote-characters</code> ensures that the single quote is not treated as a paired quote character and <code>--comand</code> ensures that history is maintained between sessions (<code>-Djline.history='clojure'</code> if you're using JLine IIRC).
<p />
Thanks to Enrico Franchi for&nbsp;<a href=\"http://www.enrico-franchi.org/2011/02/rlwrap-enable-clojure-readline-support.html\">originally posting this</a> - I went the JLine route first and he saved me a lot of yak shaving." "http://blog.c42.in/blog/readline-love-for-the-clojure-repl-using-rlwr" (20267 2668) new 15 nil nil ((title nil "Readline love for the Clojure REPL using rlwrap") (dc:creator nil "C42 Engineering") (pubDate nil "Thu, 02 Feb 2012 22:13:00 +0000") (link nil "http://blog.c42.in/blog/readline-love-for-the-clojure-repl-using-rlwr") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79c") (description nil "<p>One of the painful things about the REPL/shells of JVM based languages like Clojure and JRuby is that they have no support for Readline out of the box. No command history, navigation, nothing.</p><p>This can be solved in one of two way - the <code>JLine</code> java library, and <code>rlwrap</code>.</p><p>I favour <code>rlwrap</code>&nbsp;approach because this way, I can add readline support without having to mess with java classpaths or the <code>clj</code> script set up by Hombrew.</p><p>All you need to do is install rlwrap (<code>brew install rlwrap&nbsp;</code>/&nbsp;<code>apt-get install rlwrap</code>) then setup a simple shell script like so:</p><p><code> #!/bin/bash <br /> rlwrap --quote-characters=\"'\" --command clojure clj</code></p><p>Name it something like&nbsp;<code>cljrl</code>, make it executable and put on your path. This approach should work for JRuby too.</p><code><span>If you're wondering about the arguments to&nbsp;</span></code><span>rlwrap</span><code><span>,&nbsp;</span>--quote-characters</code> ensures that the single quote is not treated as a paired quote character and <code>--comand</code> ensures that history is maintained between sessions (<code>-Djline.history='clojure'</code> if you're using JLine IIRC).
<p />
Thanks to Enrico Franchi for&nbsp;<a href=\"http://www.enrico-franchi.org/2011/02/rlwrap-enable-clojure-readline-support.html\">originally posting this</a> - I went the JLine route first and he saved me a lot of yak shaving."))) ("Our RubyConf XI talk on Rails services" "<p><iframe src=\"http://player.vimeo.com/video/35186011?byline=0&amp;portrait=0\" frameborder=\"0\" height=\"326\" width=\"580\"></iframe></p><p><a href=\"http://vimeo.com/35186011\">Rails services in the walled garden</a> from <a href=\"http://vimeo.com/kaiwren\">Sidu Ponnappa</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p><p>&nbsp;</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://c42.in/people#niranjan-paranjape\">Niranjan</a> and <a href=\"http://c42.in/people#sidu-ponnappa\">I</a> speak about \"Rails services in the walled garden.\"</p><p>In typical service oriented architectures, monolithic applications are sliced along domain verticals to create several independently evolving 'services' that can be used in combination to achieve various outcomes.</p><p>Rails applications lend themselves to this architecture beautifully and are slowly making inroads in big organisations for this reason.</p><p>One of the big problems with this approach is that analyzing and managing large quantities of data from multiple services to produce a result becomes very hard. What was originally a relatively simple task when all data sat in the same database as part of a monolithic application, becomes, when split into multiple services, a whole different beast. This talk will focus on our experiences building a system involving about a dozen rails based services integrated over HTTP and XML and the issues we had to deal with when working with large data sets.</p>" "http://blog.c42.in/blog/our-rubyconf-xi-talk-on-rails-services" (20245 25760) new 16 nil nil ((title nil "Our RubyConf XI talk on Rails services") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 17 Jan 2012 12:08:00 +0000") (link nil "http://blog.c42.in/blog/our-rubyconf-xi-talk-on-rails-services") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e79e") (description nil "<p><iframe src=\"http://player.vimeo.com/video/35186011?byline=0&amp;portrait=0\" frameborder=\"0\" height=\"326\" width=\"580\"></iframe></p><p><a href=\"http://vimeo.com/35186011\">Rails services in the walled garden</a> from <a href=\"http://vimeo.com/kaiwren\">Sidu Ponnappa</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p><p>&nbsp;</p><p>This is the recording of our talk at RubyConf 2011 at New Orleans where <a href=\"http://c42.in/people#niranjan-paranjape\">Niranjan</a> and <a href=\"http://c42.in/people#sidu-ponnappa\">I</a> speak about \"Rails services in the walled garden.\"</p><p>In typical service oriented architectures, monolithic applications are sliced along domain verticals to create several independently evolving 'services' that can be used in combination to achieve various outcomes.</p><p>Rails applications lend themselves to this architecture beautifully and are slowly making inroads in big organisations for this reason.</p><p>One of the big problems with this approach is that analyzing and managing large quantities of data from multiple services to produce a result becomes very hard. What was originally a relatively simple task when all data sat in the same database as part of a monolithic application, becomes, when split into multiple services, a whole different beast. This talk will focus on our experiences building a system involving about a dozen rails based services integrated over HTTP and XML and the issues we had to deal with when working with large data sets.</p>"))) ("Starter reading list" "<p>We usually have a starter reading list for fresher hires that I thought we should publish in the hope that others find it useful. Any additional recommendations are welcome.</p><p>There are, of course, several more books that we recommend, but this is what we start off with. You may notice that there is no material related to Ruby here, and this is intentional.</p><p><span>Books</span></p><ol><li>\"The Pragmatic Programmer: From Journeyman to Master,\" Dave Thomas &amp; Andy Hunt</li><li>\"Refactoring,\" Martin Fowler</li><li>\"Test Driven Development: By Example,\" Kent Beck</li><li>\"Extreme Programming Explained: Embrace Change,\" Kent Beck &amp; Cynthia Andres</li></ol><p>&nbsp;</p><p><span>Articles</span></p><ol><li>\"<a href=\"http://www.objectmentor.com/resources/articles/craftsman1.pdf\">The Craftsman</a>,\" Robert C. Martin (pdf)</li><li>\"<a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=203994\">The Way of Testivus</a>,\" Alberto Savoia</li><li>\"<a href=\"http://catb.org/~esr/faqs/smart-questions.html\">How to Ask Questions the Smart Way</a>,\" Eric S. Raymond</li><li>\"<a href=\"http://deobald.ca/work/extract.txt\">Extract.java</a>\", by our very own <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li></ol><p>&nbsp;</p><ol></ol>" "http://blog.c42.in/blog/starter-reading-list" (20234 47956) new 17 nil nil ((title nil "Starter reading list") (dc:creator nil "C42 Engineering") (pubDate nil "Mon, 09 Jan 2012 10:03:00 +0000") (link nil "http://blog.c42.in/blog/starter-reading-list") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a0") (description nil "<p>We usually have a starter reading list for fresher hires that I thought we should publish in the hope that others find it useful. Any additional recommendations are welcome.</p><p>There are, of course, several more books that we recommend, but this is what we start off with. You may notice that there is no material related to Ruby here, and this is intentional.</p><p><span>Books</span></p><ol><li>\"The Pragmatic Programmer: From Journeyman to Master,\" Dave Thomas &amp; Andy Hunt</li><li>\"Refactoring,\" Martin Fowler</li><li>\"Test Driven Development: By Example,\" Kent Beck</li><li>\"Extreme Programming Explained: Embrace Change,\" Kent Beck &amp; Cynthia Andres</li></ol><p>&nbsp;</p><p><span>Articles</span></p><ol><li>\"<a href=\"http://www.objectmentor.com/resources/articles/craftsman1.pdf\">The Craftsman</a>,\" Robert C. Martin (pdf)</li><li>\"<a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=203994\">The Way of Testivus</a>,\" Alberto Savoia</li><li>\"<a href=\"http://catb.org/~esr/faqs/smart-questions.html\">How to Ask Questions the Smart Way</a>,\" Eric S. Raymond</li><li>\"<a href=\"http://deobald.ca/work/extract.txt\">Extract.java</a>\", by our very own <a href=\"http://c42.in/people#steven-deobald\">Steven Deobald</a></li></ol><p>&nbsp;</p><ol></ol>"))) ("JSON/XML rendered as plain/text by Apache" "<p>We have a RESTful API built over Rails which exposes a certain resource in XML as well as in JSON format. The resource is read more frequently than it is updated, thus we decided to cache it using Rails' page caching feature. After deploying the application on the staging environment, the JS library consuming the API started crashing intermittently. The AJAX requests were processed successfully for uncached responses, but jQuery could not parse the cached responses.</p><p>A quick look at Firebug showed that the cached responses were rendered by Apache with a mime-type of \"plain/text\" rather than \"application/json\" as expected by jQuery.</p><p>To cut to the chase, there is a very easy way to configure apache to handle appropriate mime types for any formats. Add the following lines to <em>/etc/apache2/mods-available/mime.conf</em>:</p><pre>AddType application/json .json
AddType application/xml .xml</pre><p>Also make sure that you have enabled the mod called <em>mime</em>. On a Debian distro, you can execute the following command:</p><pre>a2enmod mime</pre><p>The change configures apache to use mime types 'application/json' or 'application/xml' while rendering any static asset with extension '.json' or '.xml' respectively.</p>" "http://blog.c42.in/blog/jsonxml-rendered-as-plaintext-by-apache" (20076 50364) new 18 nil nil ((title nil "  JSON/XML rendered as plain/text by Apache") (dc:creator nil "C42 Engineering") (pubDate nil "Sun, 11 Sep 2011 14:25:00 +0000") (link nil "http://blog.c42.in/blog/jsonxml-rendered-as-plaintext-by-apache") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a3") (description nil "<p>We have a RESTful API built over Rails which exposes a certain resource in XML as well as in JSON format. The resource is read more frequently than it is updated, thus we decided to cache it using Rails' page caching feature. After deploying the application on the staging environment, the JS library consuming the API started crashing intermittently. The AJAX requests were processed successfully for uncached responses, but jQuery could not parse the cached responses.</p><p>A quick look at Firebug showed that the cached responses were rendered by Apache with a mime-type of \"plain/text\" rather than \"application/json\" as expected by jQuery.</p><p>To cut to the chase, there is a very easy way to configure apache to handle appropriate mime types for any formats. Add the following lines to <em>/etc/apache2/mods-available/mime.conf</em>:</p><pre>AddType application/json .json
AddType application/xml .xml</pre><p>Also make sure that you have enabled the mod called <em>mime</em>. On a Debian distro, you can execute the following command:</p><pre>a2enmod mime</pre><p>The change configures apache to use mime types 'application/json' or 'application/xml' while rendering any static asset with extension '.json' or '.xml' respectively.</p>"))) ("Identifying good offshore Ruby and Rails vendors - a guide." "<p><strong>Disclaimer.</strong></p><p><span>This post reverse engineers the reasoning behind what we do at </span><a href=\"http://c42.in/\"><span>C42 Engineering</span></a><span>. We ask ourselves these questions every day, and these questions frame what we think it means to be a top notch provider of software engineering services. Much of it we're already doing. Some of it we're still putting in place. There are lots of great firms out there and we hope that this guide will help you find a vendor who will help your business succeed.</span></p><p><strong>The problem.</strong></p><p><span>There are many small, new Ruby consultancies all over the world that do stellar work. There are many, many more that don't. As a startup looking to offshore work, how do you tell them apart?</span>&nbsp;</p><p><strong>Is finding a local vendor that difficult?</strong></p><p>In India, it is very hard to find consultancies or contractors who have experience in both Ruby and Agile; this is something we've heard from all our local clients. We were prompted to write this article because we heard over and over again from friends and clients in the US that the same was true for them. We also realised how risky (and hard) it was to identify the right offshore vendors prompting most startups to settle for less capable local contractors.</p><p>In our experience, you should value capability over the cost of managing timezone related communication overhead. If you compromise on quality to stay local, there's a high likelihood that when the time comes to start cranking out features or to change existing functionality, you won't be able to becasue your codebase is a mess, there aren't any automated tests and you're too scared to move fast.</p><p>At that point hiring a top local firm will make little difference because they'll be hamstrung by the existing codebase and will likely recommend some form of rewrite anyway.</p><p><strong>Is finding an offshore vendor that difficult?</strong></p><p><span>It's quite likely that you've heard your share of horror stories about how offshore vendors work (or don't) - the false promises, the inflated billing, the missed deadlines, the poor communication and, to add insult to injury, all the defects that crop up. I'm also sure you realise that just like any marketplace, there are vendors that Do The Right Thing - it's just that they're in the minority and it's hard for them to stand out.</span></p>
As a startup, here are the things that you probably care about: <ol><li><p><span>A Minimum Viable Product that allows you to go to market quickly</span></p></li><li><p><span>The ability to iteratively add features and pivot as feedback comes in</span></p></li><li><p><span>Making sure your code is well tested, so that point (2) does not break everything in point (1)</span></p></li><li><p><span>A transition plan, so that you can ramp up your own team as you get to be big enough</span></p></li></ol>Most offshore vendors only focus on getting the first part right.<span>&nbsp;</span><span>&nbsp;</span><br><p><span>Most of our clients that are successfully outsourcing work have learned how to identify the right vendors over a period of years, often getting burned badly at the start. If you're a startup and are looking to offshore work, you don't have the luxury of learning by failing. This article distills what we've learned ourselves and from our clients about working offshore and working with offshore firms into a fairly simple set of guidelines. With some luck, this guide should allow you to zero in on the small offshore companies that are truly agile, passionate about good engineering and eager to see their clients succeed.</span></p><p><span>The bottom line is this - going offshore is inherently less effective than having a co-located team, especially in the context of agile projects. The only reason you'd offshore work is either because you have budgetary constraints, or you're unable to hire talent that meets your standards locally. What you want is a vendor who understands this and is actively working to mitigate the overhead introduced by having distributed teams while also having an engineering team that matches or exceeds anything that you'd find locally.</span></p><p><strong>Is this guide relevant to you?</strong></p><p><span>This guide should work for you if you:</span></p><ul><li><p><span>Want to execute your project using Agile principles, so frequent and fluent communication is crucial</span></p></li><li><p><span>Have decided that your technology stack is based on Ruby (most likely Rails)</span></p></li><li><p><span>Want top notch engineering so you get a clean, well specced, extensible codebase</span></p></li><li><p><span>Have some budgetary constraints - after all, if you didn't you'd already have an in-house team, possibly augmented by a developer pair from a Pivotal Labs or a ThoughtWorks, right? </span></p></li><li><p><span>On the other hand, you shouldn't be so cash strapped that you're offering equity as payment because most (but not all) services firms won't do equity deals. Most services firms, unlike VCs, can't spread their risk, are heavily dependent on cashflow month-on-month and consequently can't afford to gamble.</span></p></li></ul><p><strong>Cutting to the chase. Step #1 - Sourcing.</strong></p><p><span>So the first question is 'How do you create a list of vendors that you can then filter?' The idea is to create a large list of broadly aligned vendors with a minimum of effort.</span></p><p><span>Most vendors do or say a common set of things to gain visibility. Here's how you look for them:</span></p><ul><li><p><span>Identify regions with a high density of offshore Ruby vendors. My list currently consists of Brazil, Uruguay, Chile, Argentina, Eastern Europe, India and Pakistan. Let me know in the comments if there are other regions/countries that I should also include here.</span></p></li><li><p><span>Do a search for Ruby, Rails, Agile, Extreme Programming and Test Driven Development/Behavior Driven Development along with the name of a country or city from the list above. See which companies show up. Add them to your list.</span></p></li><li><p><span>Scan local Ruby and Rails mailing lists in the areas above. Pick cities that you know contain offshore vendors, then find their Ruby users list and look for folks that post frequently and post sense. Find out where they work. Add them to your list.</span></p></li><li><p><span>Look up local RubyConfs like </span><a href=\"http://rubyconfindia.org/\"><span>RubyConf India</span></a><span>, </span><a href=\"http://rubyconfuruguay.org/en\"><span>RubyConf Uruguay</span></a><span> or </span><a href=\"http://rubyconfargentina.org/en\"><span>RubyConf Argentina</span></a><span>. Add the companies who sponsor these events to your list.</span></p></li><li><p><span>At the same local RubyConf websites, go through all the presentations - typically, videos are available. Identify the speakers that made sense, then find out where they work. Add those companies to your list too.</span></p></li><li><p><span>Explicitly ask for startups who've been working with offshore vendors for some time at your local Ruby or startup group and add those vendors to your list.</span></p></li><li><p><span>Go to sites like elance.com and odesk.com and search for Ruby, Rails, Agile, XP and TDD/BDD. Add the vendors that show up and that have all of these keywords in their profile to your list.</span></p></li></ul><p><strong>Step #2 - filtering for the basics.</strong></p><p><span>At this point, you should have at least a dozen firms on your list. We can prune the list fairly quickly based on some simple criteria.</span></p><ul><li><p><span>Open source - remove all the companies that aren't involved in open source in some form from your list.</span></p></li><li><p><span>TDD/BDD - remove all the companies that don't mention TDD/BDD anywhere on their site or say \"We do TDD/BDD for clients who want it.\"</span></p></li><li><p><span>References - remove all the companies that do not have any references, either of clients that the company has worked with, or, in the case of a new firm, of clients that the founders have worked with.</span></p></li><li><p><span>Pairing - does the company believe in pairing? While not essential, this can be valuable for two operational reasons beyond what XP covers. Redundancy, so that your productivity is not hit when, say, one of the developers falls ill. Knowledge transfer, because when the time comes to build out your in-house team, you can transition smoothly by simply flying in the offshore folks and having them pair with your engineers for a few weeks.</span></p></li></ul><p><strong>Step #3 - filtering out BS.</strong></p><p><span>Next up is to lose the ones that either intentionally or unintentionally misrepresent their level of capability. An easy way to do this is to look for firms that claim to do TDD/BDD </span><span>and </span><span>open source. Go to their open source projects pages (most likely on github.com) and look under the test/spec folder - you'd be surprised at how many such projects from firms that loudly proclaim their love of testing have no tests at all.</span></p><p><span>Next, look at the open source projects themselves. Are there any popular projects in the list? Are they trying to improve existing Open Source tools? If the projects were started by the company, how complex are they and how many pull requests, forks and watchers do they have from people who are not employees?</span></p><p><span>Remove from the list all the companies that claim a trivial plugin or some such as 'open source.' The ones that seem to be doing something non-trivial in open source you should retain in the list, even if they don't have very many pull requests, forks and watchers.</span></p><p><span>GitHub also provides nice graphs about various projects. This will give you some meta data around the projects, such as, if the project was developed in a single day, and if the project has had continuous support and interest. The github punch card visualization will also give you some information about how passionate the developers are about their work and if they are more passionate about code </span><a href=\"http://is.gd/Do1ESt\"><span>on a particular day</span></a><span> than on others :-).</span></p><p><strong>Step #4 - filtering for credibility.</strong></p><p><span>In the absence of an Accelerando style </span><a href=\"http://en.wikipedia.org/wiki/Whuffie\"><span>reputation marketplace</span></a><span>, we'll have to fall back on a more direct approach to judge credibility. One of the easiest ways to do this is to use trusted external reference points like the proposal review committees of popular conferences, or the core committers of major open source projects.</span></p><ul><li><span>Start by checking how many employees of a firm have spoken at major conferences. Have they spoken at the local RubyConf or RailsConf? How about the annual international </span><a href=\"http://rubyconf.org/\"><span>RubyConf</span></a><span> and </span><a href=\"http://www.railsconf.com/\"><span>RailsConfs</span></a><span>?</span></li><li>How many employees of a firm have started open source projects?&nbsp;How many have made non-trivial contributions to existing popular open source projects?</li><li>Are the employees of a firm active on mailing lists, including both the local Ruby/Rails lists as well as the lists of major open source projects?</li></ul>
This last point is a bare minimum - you can safely remove any firms that don't meet it.<br><strong>&nbsp;</strong><strong>Step #5 - filtering for engineering, part 1.</strong><p><span>We're now done with the easy stuff - this step and the rest of the filtration process will require more effort than simply looking through a few web pages. Now the next thing to do is to dig into the open source work of the firms still on your list and do some code reviews. At this point, all the vendors left on your list should have one or more non-trivial open source projects that they've been working on.</span></p><p><span>For this, you'll need to have experience working with test driven codebases yourself, or involve a trusted third party who does. Here are the obvious, simple things to look for:</span></p><ul><li><p><span>Complies with project structure conventions - whether it's a pure Ruby or a Rails project, it should follow the standard project structure.</span></p></li><li><p><span>Coverage - the coverage should be no less than 85%. For rails projects, the coverage should be measured separately at the model, controller and cucumber level because with C0 coverage, a dozen Cukes can be used to produce (a completely misleading) coverage of 100%.</span></p></li><li><p><span>Quality of tests/specs - it's usually fairly obvious when tests have been written after the fact. Remove any companies that obviously and consistently write tests/specs after the fact. Also keep an eye out for badly written tests, especially the kind that don't assert anything or are very hard to cause to fail.</span></p></li><li><p><span>Cyclomatic complexity - toss Saikuro (and flog) into the build and see what numbers it spits out. Cyclomatic complexity numbers almost always (with the possible exception of parsers) maintain an inverse correlation with design quality - the higher the numbers, the worse the authors of the code were at OO design.</span></p></li><li><p><span>Good old fashioned code review using the 'WTF per minute' scale. Just remember that all code causes WTFs, so be kind (but not too kind).</span></p></li></ul><p><strong>Step #6 - filtering for communication.</strong></p><p><span>You should now be down to a handful of companies; it’s time to start talking to them. Drop them a note and schedule a Skype video call, so you can get a feel for how effectively they communicate. It doesn't mean much, though, because at this point you're likely speaking to a sales person (even if that sales person writes code).</span></p><p><span>Doing this will trim a few firms off your list because you'll find that they simply won't have capacity available in a timeframe that makes sense for your project so that will prune your list somewhat. For more information on why this is so and how small consultancies work, take a look at </span><a href=\"http://blog.c42.in/static/5139d295e4b04507fe7c33a4/513ef91fe4b09dd217c4e779/513ef923e4b09dd217c4e7bb/1298372160000/\"><span>our talk on the subject at RubyConf New Orleans 2010</span></a><span>.</span></p><p><span>Once you get on the call, your intent is to get a feel for the firm and how they operate. Ask how they mitigate timezone related communication gaps. Do they do daily stand-ups over Skype video? What tools do they use to support project execution? Why? How do they handle project management? Do they have dedicated project managers, or does the engineers also handle project management and client communication? If they have dedicated project managers, how big does a team need to be to require the attention of a manager full-time?</span></p><p><span>The next test is to ask for interviews with the developers that would be staffed on your project should you choose to hire that vendor. No, this isn't rude or offensive. Yes, we're used to being interviewed by clients - indeed, we prefer it. Just be aware that staffing cycles at small consultancies being what they are, you may have to interview several people even if you're only looking for a single pair because the vendor is unsure exactly who will be available when the project gets started.</span></p><p><span>Once you have the interviews with the engineers set up, we come to...</span></p><p><strong>Step #7 - filtering for engineering, part 2.</strong></p><p><span>Keep in mind that just because one trophy engineer in the company contributes to open source, speaks at conferences and generally kicks ass doesn't mean they all do, or that you'll get that one superstar for your project. Treat this interview pretty much like a hiring interview. Ask for information on the engineers you'll be speaking to before hand and take the time to go through their blogs and github profiles to get a feel for their capability ahead of the interview.</span></p><p><span>Here are some of the things to look for when interviewing the engineers aside from the usual CS interview questions that you'll probably want to run through anyway as a baseline safety net.</span></p><ul><li><p>Ruby Skills. If required, will they be able to open up rails, and understand how find_by_* gets overriden? Has the engineer ever worked on a non-Rails project? You don't want to hire someone who 'programs in Rails' and to whom Rails constructs are black boxes that are magic.</p></li><li><p>Rails skills. How much of the framework does the engineer understand? Would they be able to make decisions about various ways to do things in rails?</p></li><li><p>Breadth. How many programming languages are they familiar with? How many have they worked with professionally?</p></li><li><p>The rest of the ecosystem. Does your engineer understand the rest of the ecosystem when your application starts to get complicated? Do they understand concepts like asynchronous messaging, background processing and evented systems? Are they comfortable doing TDD in javascript to build rich, single page applications?</p></li><li><p>Engineering and design - does the engineer understand good object oriented design? Does he/she understand why TDD is valuable in a design context, or do they use it merely for regression cover?</p></li><li><p>Justifying technical decisions - can the engineer take a position on any given subject, then defend it, or do they simply agree with everything you say?</p></li><li><p>Business analysis - do the engineers make the effort to understand your business, or do they simply want requirements tossed at them over a wall?</p></li><li><p>Try to get some objective numbers that indicate agility. What do they think is a good length for an iteration? How often do they commit and push? How often do they run builds? Do they use a CI server? Do they auto-deploy every green build to a staging server? Are they confident deploying to production from master/HEAD? What is their understanding of the term 'velocity'?</p></li><li><p>How much time do they spend studying? What was the last technical book they'd read? What was the last technical book recommended to them by a colleague? What books do they have in the company library? Which of those are considered mandatory reading?</p></li><li><p><span>How do they stay in sync with the latest in the technology world? Do they read blogs? Hacker News? Follow role models on Twitter?</span></p></li><li><p><span>“<a href=\"http://starwars.wikia.com/wiki/Rule_of_Two\">Always two there are</a>, no more, no less. A master and an apprentice ”</span>. It is standard practice for services firms to pair a senior developer with one or more less experienced developer to help the less experienced developer grow their skills. Make sure that you are getting at least as many senior developers as you are less experienced developers. Ask what skills the less experienced developer will need to learn in order to ramp up. And finally, keep in mind that years of experience does not always translate to capability. Don’t be surprised if the most capable developers have the least experience in years.</p></li></ul><p><span>At the end of these seven steps you should be down to three or four companies, sorted along the three axes of agility, engineering and price.</span></p><p><strong>Step #8 - prioritizing by integrity.</strong></p><p><span>Integrity is both the most important attribute of a vendor and the hardest to measure up-front. If you can’t trust your vendor, you spend a </span><span>lot</span> of time hedging against potential screw-ups instead of staying focused on churning out features. Do you really want to spend half your day doing code reviews because you can’t trust your vendor to Do The Right Thing and staff your project with competent engineers?</p><p><span>To get a Reflect on all your interactions with each of the companies - which seemed the most honest? How many times did they simply tell you that they lacked a particular skill-set, or make a similar statement indicating that they were more interested in making sure you had the right information to make decisions over closing the deal?</span></p><p><strong>Putting it all together</strong></p>
While we've structured this guide in steps that take increasingly greater amounts of effort to sort companies, they are also sorted in increasing amount of value. Above all else, you should be able to trust your vendor, and even build your business plan around them.
<p></p>If, at the end of Step #8 you have two very promising companies and can't decide - hire both for a couple of weeks or a month and then take a call. You can do this even if you are undecided between an offshore vendor and a local developer so you can see what works best for you. Tools like git(hub) and pivotal tracker make it easy for a distributed team of developers to work independently without stepping on one-another's toes.<p></p>Lastly, you must be prepared to make trade-offs; not even the best team can completely mitigate the overheads of a twelve hour time shift. That said, going offshore isn't anywhere as risky as it's made out to be if you go about it right.<ul></ul>" "http://blog.c42.in/blog/identifying-good-offshore-ruby-and-rails-vend" (20023 61712) new 19 nil nil ((title nil "Identifying good offshore Ruby and Rails vendors - a guide.") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 02 Aug 2011 12:44:00 +0000") (link nil "http://blog.c42.in/blog/identifying-good-offshore-ruby-and-rails-vend") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7a4") (description nil "<p><strong>Disclaimer.</strong></p><p><span>This post reverse engineers the reasoning behind what we do at </span><a href=\"http://c42.in/\"><span>C42 Engineering</span></a><span>. We ask ourselves these questions every day, and these questions frame what we think it means to be a top notch provider of software engineering services. Much of it we're already doing. Some of it we're still putting in place. There are lots of great firms out there and we hope that this guide will help you find a vendor who will help your business succeed.</span></p><p><strong>The problem.</strong></p><p><span>There are many small, new Ruby consultancies all over the world that do stellar work. There are many, many more that don't. As a startup looking to offshore work, how do you tell them apart?</span>&nbsp;</p><p><strong>Is finding a local vendor that difficult?</strong></p><p>In India, it is very hard to find consultancies or contractors who have experience in both Ruby and Agile; this is something we've heard from all our local clients. We were prompted to write this article because we heard over and over again from friends and clients in the US that the same was true for them. We also realised how risky (and hard) it was to identify the right offshore vendors prompting most startups to settle for less capable local contractors.</p><p>In our experience, you should value capability over the cost of managing timezone related communication overhead. If you compromise on quality to stay local, there's a high likelihood that when the time comes to start cranking out features or to change existing functionality, you won't be able to becasue your codebase is a mess, there aren't any automated tests and you're too scared to move fast.</p><p>At that point hiring a top local firm will make little difference because they'll be hamstrung by the existing codebase and will likely recommend some form of rewrite anyway.</p><p><strong>Is finding an offshore vendor that difficult?</strong></p><p><span>It's quite likely that you've heard your share of horror stories about how offshore vendors work (or don't) - the false promises, the inflated billing, the missed deadlines, the poor communication and, to add insult to injury, all the defects that crop up. I'm also sure you realise that just like any marketplace, there are vendors that Do The Right Thing - it's just that they're in the minority and it's hard for them to stand out.</span></p>
As a startup, here are the things that you probably care about: <ol><li><p><span>A Minimum Viable Product that allows you to go to market quickly</span></p></li><li><p><span>The ability to iteratively add features and pivot as feedback comes in</span></p></li><li><p><span>Making sure your code is well tested, so that point (2) does not break everything in point (1)</span></p></li><li><p><span>A transition plan, so that you can ramp up your own team as you get to be big enough</span></p></li></ol>Most offshore vendors only focus on getting the first part right.<span>&nbsp;</span><span>&nbsp;</span><br><p><span>Most of our clients that are successfully outsourcing work have learned how to identify the right vendors over a period of years, often getting burned badly at the start. If you're a startup and are looking to offshore work, you don't have the luxury of learning by failing. This article distills what we've learned ourselves and from our clients about working offshore and working with offshore firms into a fairly simple set of guidelines. With some luck, this guide should allow you to zero in on the small offshore companies that are truly agile, passionate about good engineering and eager to see their clients succeed.</span></p><p><span>The bottom line is this - going offshore is inherently less effective than having a co-located team, especially in the context of agile projects. The only reason you'd offshore work is either because you have budgetary constraints, or you're unable to hire talent that meets your standards locally. What you want is a vendor who understands this and is actively working to mitigate the overhead introduced by having distributed teams while also having an engineering team that matches or exceeds anything that you'd find locally.</span></p><p><strong>Is this guide relevant to you?</strong></p><p><span>This guide should work for you if you:</span></p><ul><li><p><span>Want to execute your project using Agile principles, so frequent and fluent communication is crucial</span></p></li><li><p><span>Have decided that your technology stack is based on Ruby (most likely Rails)</span></p></li><li><p><span>Want top notch engineering so you get a clean, well specced, extensible codebase</span></p></li><li><p><span>Have some budgetary constraints - after all, if you didn't you'd already have an in-house team, possibly augmented by a developer pair from a Pivotal Labs or a ThoughtWorks, right? </span></p></li><li><p><span>On the other hand, you shouldn't be so cash strapped that you're offering equity as payment because most (but not all) services firms won't do equity deals. Most services firms, unlike VCs, can't spread their risk, are heavily dependent on cashflow month-on-month and consequently can't afford to gamble.</span></p></li></ul><p><strong>Cutting to the chase. Step #1 - Sourcing.</strong></p><p><span>So the first question is 'How do you create a list of vendors that you can then filter?' The idea is to create a large list of broadly aligned vendors with a minimum of effort.</span></p><p><span>Most vendors do or say a common set of things to gain visibility. Here's how you look for them:</span></p><ul><li><p><span>Identify regions with a high density of offshore Ruby vendors. My list currently consists of Brazil, Uruguay, Chile, Argentina, Eastern Europe, India and Pakistan. Let me know in the comments if there are other regions/countries that I should also include here.</span></p></li><li><p><span>Do a search for Ruby, Rails, Agile, Extreme Programming and Test Driven Development/Behavior Driven Development along with the name of a country or city from the list above. See which companies show up. Add them to your list.</span></p></li><li><p><span>Scan local Ruby and Rails mailing lists in the areas above. Pick cities that you know contain offshore vendors, then find their Ruby users list and look for folks that post frequently and post sense. Find out where they work. Add them to your list.</span></p></li><li><p><span>Look up local RubyConfs like </span><a href=\"http://rubyconfindia.org/\"><span>RubyConf India</span></a><span>, </span><a href=\"http://rubyconfuruguay.org/en\"><span>RubyConf Uruguay</span></a><span> or </span><a href=\"http://rubyconfargentina.org/en\"><span>RubyConf Argentina</span></a><span>. Add the companies who sponsor these events to your list.</span></p></li><li><p><span>At the same local RubyConf websites, go through all the presentations - typically, videos are available. Identify the speakers that made sense, then find out where they work. Add those companies to your list too.</span></p></li><li><p><span>Explicitly ask for startups who've been working with offshore vendors for some time at your local Ruby or startup group and add those vendors to your list.</span></p></li><li><p><span>Go to sites like elance.com and odesk.com and search for Ruby, Rails, Agile, XP and TDD/BDD. Add the vendors that show up and that have all of these keywords in their profile to your list.</span></p></li></ul><p><strong>Step #2 - filtering for the basics.</strong></p><p><span>At this point, you should have at least a dozen firms on your list. We can prune the list fairly quickly based on some simple criteria.</span></p><ul><li><p><span>Open source - remove all the companies that aren't involved in open source in some form from your list.</span></p></li><li><p><span>TDD/BDD - remove all the companies that don't mention TDD/BDD anywhere on their site or say \"We do TDD/BDD for clients who want it.\"</span></p></li><li><p><span>References - remove all the companies that do not have any references, either of clients that the company has worked with, or, in the case of a new firm, of clients that the founders have worked with.</span></p></li><li><p><span>Pairing - does the company believe in pairing? While not essential, this can be valuable for two operational reasons beyond what XP covers. Redundancy, so that your productivity is not hit when, say, one of the developers falls ill. Knowledge transfer, because when the time comes to build out your in-house team, you can transition smoothly by simply flying in the offshore folks and having them pair with your engineers for a few weeks.</span></p></li></ul><p><strong>Step #3 - filtering out BS.</strong></p><p><span>Next up is to lose the ones that either intentionally or unintentionally misrepresent their level of capability. An easy way to do this is to look for firms that claim to do TDD/BDD </span><span>and </span><span>open source. Go to their open source projects pages (most likely on github.com) and look under the test/spec folder - you'd be surprised at how many such projects from firms that loudly proclaim their love of testing have no tests at all.</span></p><p><span>Next, look at the open source projects themselves. Are there any popular projects in the list? Are they trying to improve existing Open Source tools? If the projects were started by the company, how complex are they and how many pull requests, forks and watchers do they have from people who are not employees?</span></p><p><span>Remove from the list all the companies that claim a trivial plugin or some such as 'open source.' The ones that seem to be doing something non-trivial in open source you should retain in the list, even if they don't have very many pull requests, forks and watchers.</span></p><p><span>GitHub also provides nice graphs about various projects. This will give you some meta data around the projects, such as, if the project was developed in a single day, and if the project has had continuous support and interest. The github punch card visualization will also give you some information about how passionate the developers are about their work and if they are more passionate about code </span><a href=\"http://is.gd/Do1ESt\"><span>on a particular day</span></a><span> than on others :-).</span></p><p><strong>Step #4 - filtering for credibility.</strong></p><p><span>In the absence of an Accelerando style </span><a href=\"http://en.wikipedia.org/wiki/Whuffie\"><span>reputation marketplace</span></a><span>, we'll have to fall back on a more direct approach to judge credibility. One of the easiest ways to do this is to use trusted external reference points like the proposal review committees of popular conferences, or the core committers of major open source projects.</span></p><ul><li><span>Start by checking how many employees of a firm have spoken at major conferences. Have they spoken at the local RubyConf or RailsConf? How about the annual international </span><a href=\"http://rubyconf.org/\"><span>RubyConf</span></a><span> and </span><a href=\"http://www.railsconf.com/\"><span>RailsConfs</span></a><span>?</span></li><li>How many employees of a firm have started open source projects?&nbsp;How many have made non-trivial contributions to existing popular open source projects?</li><li>Are the employees of a firm active on mailing lists, including both the local Ruby/Rails lists as well as the lists of major open source projects?</li></ul>
This last point is a bare minimum - you can safely remove any firms that don't meet it.<br><strong>&nbsp;</strong><strong>Step #5 - filtering for engineering, part 1.</strong><p><span>We're now done with the easy stuff - this step and the rest of the filtration process will require more effort than simply looking through a few web pages. Now the next thing to do is to dig into the open source work of the firms still on your list and do some code reviews. At this point, all the vendors left on your list should have one or more non-trivial open source projects that they've been working on.</span></p><p><span>For this, you'll need to have experience working with test driven codebases yourself, or involve a trusted third party who does. Here are the obvious, simple things to look for:</span></p><ul><li><p><span>Complies with project structure conventions - whether it's a pure Ruby or a Rails project, it should follow the standard project structure.</span></p></li><li><p><span>Coverage - the coverage should be no less than 85%. For rails projects, the coverage should be measured separately at the model, controller and cucumber level because with C0 coverage, a dozen Cukes can be used to produce (a completely misleading) coverage of 100%.</span></p></li><li><p><span>Quality of tests/specs - it's usually fairly obvious when tests have been written after the fact. Remove any companies that obviously and consistently write tests/specs after the fact. Also keep an eye out for badly written tests, especially the kind that don't assert anything or are very hard to cause to fail.</span></p></li><li><p><span>Cyclomatic complexity - toss Saikuro (and flog) into the build and see what numbers it spits out. Cyclomatic complexity numbers almost always (with the possible exception of parsers) maintain an inverse correlation with design quality - the higher the numbers, the worse the authors of the code were at OO design.</span></p></li><li><p><span>Good old fashioned code review using the 'WTF per minute' scale. Just remember that all code causes WTFs, so be kind (but not too kind).</span></p></li></ul><p><strong>Step #6 - filtering for communication.</strong></p><p><span>You should now be down to a handful of companies; it’s time to start talking to them. Drop them a note and schedule a Skype video call, so you can get a feel for how effectively they communicate. It doesn't mean much, though, because at this point you're likely speaking to a sales person (even if that sales person writes code).</span></p><p><span>Doing this will trim a few firms off your list because you'll find that they simply won't have capacity available in a timeframe that makes sense for your project so that will prune your list somewhat. For more information on why this is so and how small consultancies work, take a look at </span><a href=\"http://blog.c42.in/static/5139d295e4b04507fe7c33a4/513ef91fe4b09dd217c4e779/513ef923e4b09dd217c4e7bb/1298372160000/\"><span>our talk on the subject at RubyConf New Orleans 2010</span></a><span>.</span></p><p><span>Once you get on the call, your intent is to get a feel for the firm and how they operate. Ask how they mitigate timezone related communication gaps. Do they do daily stand-ups over Skype video? What tools do they use to support project execution? Why? How do they handle project management? Do they have dedicated project managers, or does the engineers also handle project management and client communication? If they have dedicated project managers, how big does a team need to be to require the attention of a manager full-time?</span></p><p><span>The next test is to ask for interviews with the developers that would be staffed on your project should you choose to hire that vendor. No, this isn't rude or offensive. Yes, we're used to being interviewed by clients - indeed, we prefer it. Just be aware that staffing cycles at small consultancies being what they are, you may have to interview several people even if you're only looking for a single pair because the vendor is unsure exactly who will be available when the project gets started.</span></p><p><span>Once you have the interviews with the engineers set up, we come to...</span></p><p><strong>Step #7 - filtering for engineering, part 2.</strong></p><p><span>Keep in mind that just because one trophy engineer in the company contributes to open source, speaks at conferences and generally kicks ass doesn't mean they all do, or that you'll get that one superstar for your project. Treat this interview pretty much like a hiring interview. Ask for information on the engineers you'll be speaking to before hand and take the time to go through their blogs and github profiles to get a feel for their capability ahead of the interview.</span></p><p><span>Here are some of the things to look for when interviewing the engineers aside from the usual CS interview questions that you'll probably want to run through anyway as a baseline safety net.</span></p><ul><li><p>Ruby Skills. If required, will they be able to open up rails, and understand how find_by_* gets overriden? Has the engineer ever worked on a non-Rails project? You don't want to hire someone who 'programs in Rails' and to whom Rails constructs are black boxes that are magic.</p></li><li><p>Rails skills. How much of the framework does the engineer understand? Would they be able to make decisions about various ways to do things in rails?</p></li><li><p>Breadth. How many programming languages are they familiar with? How many have they worked with professionally?</p></li><li><p>The rest of the ecosystem. Does your engineer understand the rest of the ecosystem when your application starts to get complicated? Do they understand concepts like asynchronous messaging, background processing and evented systems? Are they comfortable doing TDD in javascript to build rich, single page applications?</p></li><li><p>Engineering and design - does the engineer understand good object oriented design? Does he/she understand why TDD is valuable in a design context, or do they use it merely for regression cover?</p></li><li><p>Justifying technical decisions - can the engineer take a position on any given subject, then defend it, or do they simply agree with everything you say?</p></li><li><p>Business analysis - do the engineers make the effort to understand your business, or do they simply want requirements tossed at them over a wall?</p></li><li><p>Try to get some objective numbers that indicate agility. What do they think is a good length for an iteration? How often do they commit and push? How often do they run builds? Do they use a CI server? Do they auto-deploy every green build to a staging server? Are they confident deploying to production from master/HEAD? What is their understanding of the term 'velocity'?</p></li><li><p>How much time do they spend studying? What was the last technical book they'd read? What was the last technical book recommended to them by a colleague? What books do they have in the company library? Which of those are considered mandatory reading?</p></li><li><p><span>How do they stay in sync with the latest in the technology world? Do they read blogs? Hacker News? Follow role models on Twitter?</span></p></li><li><p><span>“<a href=\"http://starwars.wikia.com/wiki/Rule_of_Two\">Always two there are</a>, no more, no less. A master and an apprentice ”</span>. It is standard practice for services firms to pair a senior developer with one or more less experienced developer to help the less experienced developer grow their skills. Make sure that you are getting at least as many senior developers as you are less experienced developers. Ask what skills the less experienced developer will need to learn in order to ramp up. And finally, keep in mind that years of experience does not always translate to capability. Don’t be surprised if the most capable developers have the least experience in years.</p></li></ul><p><span>At the end of these seven steps you should be down to three or four companies, sorted along the three axes of agility, engineering and price.</span></p><p><strong>Step #8 - prioritizing by integrity.</strong></p><p><span>Integrity is both the most important attribute of a vendor and the hardest to measure up-front. If you can’t trust your vendor, you spend a </span><span>lot</span> of time hedging against potential screw-ups instead of staying focused on churning out features. Do you really want to spend half your day doing code reviews because you can’t trust your vendor to Do The Right Thing and staff your project with competent engineers?</p><p><span>To get a Reflect on all your interactions with each of the companies - which seemed the most honest? How many times did they simply tell you that they lacked a particular skill-set, or make a similar statement indicating that they were more interested in making sure you had the right information to make decisions over closing the deal?</span></p><p><strong>Putting it all together</strong></p>
While we've structured this guide in steps that take increasingly greater amounts of effort to sort companies, they are also sorted in increasing amount of value. Above all else, you should be able to trust your vendor, and even build your business plan around them.
<p></p>If, at the end of Step #8 you have two very promising companies and can't decide - hire both for a couple of weeks or a month and then take a call. You can do this even if you are undecided between an offshore vendor and a local developer so you can see what works best for you. Tools like git(hub) and pivotal tracker make it easy for a distributed team of developers to work independently without stepping on one-another's toes.<p></p>Lastly, you must be prepared to make trade-offs; not even the best team can completely mitigate the overheads of a twelve hour time shift. That said, going offshore isn't anywhere as risky as it's made out to be if you go about it right.<ul></ul>"))) ("RVM and OSX 10.7 Lion" "<p>Always being a fan of having the latest and greatest software, Niranjan and I tried upgrading to OSX Lion the day after it came out.</p><p>I immediately installed XCode to get a compiler, and started an rvm install 1.8.7. After rvm finished compiling the ruby, I noticed a fatal error appearing every time i tried to run gem install anything on lion:</p><p>lib/ruby/1.8/timeout.rb:60: [BUG] Segmentation fault</p><p>After a bit of searching, I realized that Lion changes the default compiler from gcc to the <a href=\"http://en.wikipedia.org/wiki/Clang\">llvm compiler</a>. While this shows promise as a fast compiler, it doesn't work perfectly with rvm compiled ruby just yet. Although the compile goes through fine, the ruby seems to blow up when you use the ruby.</p><p>Luckily, gcc-4.2 still ships with xcode, and can be found at /usr/bin/gcc-4.2</p><p>All rubies that were compiled before the upgrade to lion will work, but all rubies compiled afterwards will need to be compiled with the old gcc.</p><p>When installing a new ruby or a new gem, it is possible to tell make to use the old gcc as follows:</p><p>$ CC=/usr/bin/gcc-4.2 rvm install ...</p><p>$ CC=/usr/bin/gcc-4.2 bundle install</p><p>alternatively, you can just add the following line to your .bashrc:</p><p>export CC=/usr/bin/gcc-4.2</p><p>As is visible below, it looks like both gcc and clang (the llvm compiler) ship with xcode. However, the default gcc (and cc) have been linked to llvm-gcc</p><p>$ ls -lh /usr/bin/*gcc*</p><p>lrwxr-xr-x  1 root  wheel    12B Jul 24 15:35 /usr/bin/gcc -&gt; llvm-gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   110K May 16 10:07 /usr/bin/gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   550K May 16 10:07 /usr/bin/i686-apple-darwin11-gcc-4.2.1</p><p>lrwxr-xr-x  1 root  admin    52B Jul 24 15:35 /usr/bin/i686-apple-darwin11-llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/i686-apple-darwin11-llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p>" "http://blog.c42.in/blog/rvm-and-osx-107-lion" (20014 44708) new 20 nil nil ((title nil "RVM and OSX 10.7 Lion") (dc:creator nil "C42 Engineering") (pubDate nil "Tue, 26 Jul 2011 12:10:12 +0000") (link nil "http://blog.c42.in/blog/rvm-and-osx-107-lion") (guid ((isPermaLink . "false")) "5139d295e4b04507fe7c33a4:513ef91fe4b09dd217c4e779:513ef922e4b09dd217c4e7aa") (description nil "<p>Always being a fan of having the latest and greatest software, Niranjan and I tried upgrading to OSX Lion the day after it came out.</p><p>I immediately installed XCode to get a compiler, and started an rvm install 1.8.7. After rvm finished compiling the ruby, I noticed a fatal error appearing every time i tried to run gem install anything on lion:</p><p>lib/ruby/1.8/timeout.rb:60: [BUG] Segmentation fault</p><p>After a bit of searching, I realized that Lion changes the default compiler from gcc to the <a href=\"http://en.wikipedia.org/wiki/Clang\">llvm compiler</a>. While this shows promise as a fast compiler, it doesn't work perfectly with rvm compiled ruby just yet. Although the compile goes through fine, the ruby seems to blow up when you use the ruby.</p><p>Luckily, gcc-4.2 still ships with xcode, and can be found at /usr/bin/gcc-4.2</p><p>All rubies that were compiled before the upgrade to lion will work, but all rubies compiled afterwards will need to be compiled with the old gcc.</p><p>When installing a new ruby or a new gem, it is possible to tell make to use the old gcc as follows:</p><p>$ CC=/usr/bin/gcc-4.2 rvm install ...</p><p>$ CC=/usr/bin/gcc-4.2 bundle install</p><p>alternatively, you can just add the following line to your .bashrc:</p><p>export CC=/usr/bin/gcc-4.2</p><p>As is visible below, it looks like both gcc and clang (the llvm compiler) ship with xcode. However, the default gcc (and cc) have been linked to llvm-gcc</p><p>$ ls -lh /usr/bin/*gcc*</p><p>lrwxr-xr-x  1 root  wheel    12B Jul 24 15:35 /usr/bin/gcc -&gt; llvm-gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   110K May 16 10:07 /usr/bin/gcc-4.2</p><p>-rwxr-xr-x  1 root  wheel   550K May 16 10:07 /usr/bin/i686-apple-darwin11-gcc-4.2.1</p><p>lrwxr-xr-x  1 root  admin    52B Jul 24 15:35 /usr/bin/i686-apple-darwin11-llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/i686-apple-darwin11-llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p><p>lrwxr-xr-x  1 root  admin    32B Jul 24 15:35 /usr/bin/llvm-gcc-4.2 -&gt; ../llvm-gcc-4.2/bin/llvm-gcc-4.2</p>"))))