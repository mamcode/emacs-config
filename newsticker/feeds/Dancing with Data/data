;; -*- coding: utf-8 -*-
(("Dancing with Data" "Boris Moore's Blog: JavaScript, jQuery, dynamic browser apps, data..." nil (20852 16561 632687) feed 0 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137") (updated nil "2013-04-16T12:52:51.715-07:00") (category ((term . "jQueryTemplates"))) (category ((term . "me"))) (category ((term . "jQuery"))) (category ((term . "ajax"))) (category ((term . "life"))) (title nil "Dancing with Data") (subtitle ((type . "html")) "Boris Moore's Blog: JavaScript, jQuery, dynamic browser apps, data...") (link ((rel . "http://schemas.google.com/g/2005#feed") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/posts/default"))) (link ((rel . "alternate") (type . "text/html") (href . "http://www.borismoore.com/"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (generator ((version . "7.00") (uri . "http://www.blogger.com")) "Blogger") (openSearch:totalResults nil "9") (openSearch:startIndex nil "1") (openSearch:itemsPerPage nil "25") (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "self") (type . "application/atom+xml") (href . "http://feeds.feedburner.com/DancingWithData"))) (feedburner:info ((uri . "dancingwithdata"))) (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "hub") (href . "http://pubsubhubbub.appspot.com/"))) (feedburner:emailServiceId nil "DancingWithData") (feedburner:feedburnerHostname nil "http://feedburner.google.com") (entry ((gd:etag . "W/\"D0YMRHo6eyp7ImA9WhVSEEo.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-1815998073923523467") (published nil "2012-03-06T15:04:00.001-08:00") (updated nil "2012-03-06T15:06:25.413-08:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2012-03-06T15:06:25.413-08:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "Approaching Beta: What's changing in JsRender and JsViews") (content ((type . "html")) "<div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">Major update to &nbsp;JsRender and JsViews</b></span></div><span class=\"Apple-style-span\"><span class=\"Apple-style-span\">In <a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\" target=\"_blank\">previous posts</a> and elsewhere, I had set the goal of reaching beta for JsRender at the end of February. A</span><span style=\"font-size: 11pt;\">&nbsp;major update has just been committed to</span><span style=\"font-size: 11pt;\">&nbsp;</span><a href=\"https://github.com/BorisMoore\" style=\"font-size: 11pt;\" target=\"_blank\">GitHub</a>&nbsp;for both JsRender and JsViews, which is effectively a beta candidate for JsRender.<br />
<span style=\"font-size: 11pt;\"><br />
This update brings a large number of API changes, new features, and improvements, to both JsRender and JsViews. It follows quite a period of apparent silence on GitHub (as far as commits are concerned), which left some folks with the impression that the project may have become inactive. The truth is quite the&nbsp;</span><span style=\"font-size: 11pt;\">opposite. JsRender and JsViews are&nbsp;</span><span style=\"font-size: 11pt;\">(in my view!)</span><span style=\"font-size: 11pt;\">&nbsp;</span><span style=\"font-size: 11pt;\">alive and well and growing apace...</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">So why the silence? In working on the new bits, I had to address the fact that the beta API design I was aiming for would be breaking for many users. Not a big deal usually for alpha software, but in the case of JsRender and JsViews there has been quite a lot of adoption already, so I wanted to avoid causing too much pain with a series of breaking commits. I decided to work on a single breaking update intended to provide a one-step transition to a beta candidate for JsRender (or at least a candidate for a stabl</span><span style=\"font-size: 11pt;\">e beta API)</span><span style=\"font-size: 11pt;\">, and also introduce much of the future stable beta API for JsViews.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">That update has taken a long time to complete, since it is a major rewrite not only of JsRender but also JsViews... The new bits for JsRender have been nearly ready for quite a while now, but the integration between JsViews and JsRender meant also moving JsViews a long way towards its future beta version. That way current users of JsViews can also port their apps to the new JsRender.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">What's changed?</b><br />
<span style=\"font-size: 11pt;\">This post provides a guide through the changes, and&nbsp;</span><span style=\"font-size: 11pt;\">is primarily intended to</span><span style=\"font-size: 11pt;\">&nbsp;help existing users of JsViews or JsRender to move to the new version.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">It can also be helpful to first-time adopters, but bear in mind that this is&nbsp;</span><span style=\"font-size: 11pt;\">still not quite the official beta, so documentation is limited. I hope to provide more documentation (or update this post) as we move to the official beta for JsRender (fairly soon) and JsViews (probably end of April or early May...). In the meantime, take a look too at all the&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">live samples</a>&nbsp;and the corresponding code for&nbsp;<a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">JsViews</a>&nbsp;and&nbsp;<a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">JsRender</a>.</span></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\"><br class=\"Apple-interchange-newline\" />JsRender: principal changes</b></span></div><ul><li><b style=\"font-family: Calibri; font-size: 15px;\">{{: ...}} and {{&gt; ...}} tags:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;The basic tag for outputting data values,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{=some.data.path}},</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;is now&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:some.data.path}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, and supports converter functions, and almost any javascript expression, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{myConverter:someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.<br />
It is&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px; font-weight: bold;\">not</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;HTML-encoded by default.<br />
To HTML-encode, use the tag&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{&gt;someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Block tags and inline tags:&nbsp;</b><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">The syntax for block/inline tags is now similar to HTML element syntax in the use of the&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">'/'&nbsp;</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">character:</span></span><ul><li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag is written</span></span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;{{myBlockTag ...}} ... {{/myBlocktag}}</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A non-block (self-closing, or inline) tag is written&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">{{myInlineTag/}}.</i></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag can become an inline tag if it references a template as content:</span></span><span style=\"font-family: Calibri; font-size: 15px;\"><br />
<i>{{myBlockTag ... tmpl=\"myNamedTemplate\" /}}</i>.</span></li>
</ul></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>{{#each}} tag is now {{for}}:</b></span>&nbsp;<span style=\"font-family: Calibri; font-size: 15px;\">There was some confusion around the&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{each ...}}&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">tag, in that the name suggested that it only worked as an iterator over an array as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{#each myArray}}...{{/each}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. In fact it worked also against singleton data objects, and this is made more intuitive by renaming it to&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for ...}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. This means you can write&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myArray}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, but for other scenarios you might also write</span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myObject}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, which will render against <i>myObject</i> as current data item (data context) for the nested content</span><i style=\"font-family: Calibri; font-size: 15px;\">.</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Expressions within template tags:&nbsp;</b>JsRender template tags now support almost any JavaScript expression (and also allow parens, to any depth).<br />
For example, you can write:&nbsp;&nbsp;<i>{{if &nbsp;price &gt; 3 &amp;&amp; price &lt; (maxPrice - 10)}}Special deal{{/if}}.</i><br />
However, unlike with jQuery Templates, the expressions are evaluated within a parsing and execution context which precludes accessing global variables or running any code which arbitrarily assigns or modifies data or state. Only template data properties/methods and registered helper functions/parameters can be accessed.&nbsp;</span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b><b>View properties syntax:&nbsp;</b><span style=\"font-weight: normal;\">To access view properties, such as parent, the syntax is now</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">#parent.</i></b></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b><b>$itemNumber is now #index:&nbsp;</b><span style=\"font-weight: normal;\">There is now a zero-based index, identical to the index on view objects when using JsViews. This change is thanks to expression support which has made getting a 1-based index very easy, as in:</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">{{:#index + 1}}</i><span style=\"font-weight: normal;\">.</span></b></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Helper functions:</b><span style=\"font-weight: normal;\">&nbsp;There is now a single concept of a helper function, which can be provided either via the <i>options</i> parameter in the&nbsp;</span><i style=\"font-weight: normal;\">$.render</i><span style=\"font-weight: normal;\">&nbsp;(or the&nbsp;</span><i style=\"font-weight: normal;\">$.link</i><span style=\"font-weight: normal;\">&nbsp;method, if using JsViews), or by registering using the&nbsp;</span><i style=\"font-weight: normal;\">$.views.helpers()</i><span style=\"font-weight: normal;\">&nbsp;API call.<br />
In either case, a registered&nbsp;helper function&nbsp;<b><span style=\"font-weight: normal;\"><i>myHelper(...)&nbsp;</i></span></b>will be accessed within the template using a simpler syntax than before:&nbsp;<i>~myHelper(...)</i>, rather than&nbsp;<i>$ctx.myHelper(...).&nbsp;</i><br />
F</span></b></span><b style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-weight: normal;\">or example, you can write&nbsp;<i>{{:~myFullNameHelper(firstName, lastName)}}.</i></span></b></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Template parameters:&nbsp;</b><span style=\"font-family: Calibri; font-size: 15px;\">In addition to helper functions, template parameters can be passed in with <i>options</i>&nbsp;or registered using <i>$.views.helpers()</i>&nbsp;- and then accessed by the same template syntax as helper functions, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:~myParameter}}</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Aliasing variables for use in nested contexts:</b><span style=\"font-weight: normal;\">&nbsp;If you want to access the data in a parent context, you can now provide a variable (accessed like a&nbsp;<span style=\"background-color: white; color: #1f3244; line-height: 20px; text-align: left;\">template</span>&nbsp;parameter) which will be available within nested context. For example:&nbsp;</span><i style=\"font-weight: normal;\">{{for lineItems ~orderTitle=orderInfo.title}}...{{:~orderTitle}}...{{/for}}</i></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registration APIs:</b>&nbsp;Registering of helper functions, converter functions and custom tags each use an equivalent API pattern:&nbsp;<i>$.<b><span style=\"font-weight: normal;\">views.</span></b>helpers()</i>,&nbsp;<i>$.views.converters()</i>,&nbsp;<i>$.views.tags()</i>.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registering/compiling templates:</b>&nbsp;This uses a similar API,&nbsp;<i>$.templates()</i>, which also allows defining template properties and resources (below).</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>\"Intellisense-friendly\" APIs for rendering:</b> &nbsp;New APIs are provided which are convenient for intellisense. For example, you can now write:&nbsp;</span><span style=\"font-family: Calibri;\"><i style=\"font-size: 15px;\">$.render.detailsTmpl( person );&nbsp;</i></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Template resources and settings:</b> Registering templates now supports specifying individual settings for the template, and registering resources such as helpers, converters, other templates, etc. so that they are available only in the context of the registered template, and are not exposed globally to other templates.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Layout templates: </b>A template may have a setting: <i>layout: true. </i>This will make it&nbsp;render just once, independently of whether the data supplied is an array, <i>null</i>, <i>undefined</i>, <i>false</i>, or any other data value. A <i>{{for}} </i>tag within the template will then render against the data in the normal way.</span></span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Debug setting:</b><span style=\"font-family: Calibri; font-size: 15px;\"> If a compiled template has the setting&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">debug: true,</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;a <i>debugger; </i>statement will be&nbsp;inserted at the beginning of the compiled template function. This makes debugging declarative templates easier.</span><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Unit tests:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp; JsRender&nbsp;now includes unit tests.</span></li>
</ul><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">JsViews: principal changes</b></span></div><ul><li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Views:&nbsp;</b>Previously, both JsRender and JsViews had a concept of a view hierarchy, but the two were distinct. Now a single view hierarchy is created during rendering of templates (and nested templates) and the same view hierarchy is maintained (but augmented with additional methods or properties) during data linking by JsViews.&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Declarative data binding:&nbsp;</b><i style=\"font-family: Calibri; font-size: 15px;\">data-from</i><span style=\"font-family: Calibri; font-size: 15px;\">,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-getfrom</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;and&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-to</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;are now consolidated into a single data binding attribute:&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-link</i><span style=\"font-family: Calibri; font-size: 15px;\">. This provides for more concise and simpler data binding declarations that support both one-way and two-way binding. See the samples for different use-cases, including binding to multiple target attributes on the same HTML element.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Data binding expressions:&nbsp;</b>Data binding expressions are evaluated according to the same contextual and parsing rules as template tag expressions. They can access exactly the same user-registered helper functions, template parameters, or converter functions that are available to template tag expressions - whether&nbsp;<b><span style=\"font-family: Calibri; font-weight: normal;\"><b><span style=\"font-weight: normal;\">registered using&nbsp;<i>$.views.helpers</i>, or passed in with the <i>options </i>parameter in a&nbsp;</span><i style=\"font-weight: normal;\">render()</i><span style=\"font-weight: normal;\">&nbsp;call</span></b></span></b>. In addition, helper functions and template parameters can be passed in with the <i>options</i> parameter of any<i> link()</i> call.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Automatic dependency detection</b>&nbsp;:&nbsp;</b> In data binding expressions it is no longer necessary to put square brackets in paths to specify data-binding dependencies.<br />
<i>&lt;input data-getfrom=\"shipping.address[street]\" data-to=\" shipping.address[street]&nbsp;\" /&gt;&nbsp;</i>is now written:<br />
<i><i>&lt;</i>input data-link=\"shipping.address.street\"&nbsp;/&gt;</i><br />
This opens the way to supporting&nbsp;<i>[]</i>&nbsp;syntax for array or property accessors. </span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-family: Calibri;\"><b>\"Intellisense-friendly\" APIs for linking:</b>&nbsp; As with JsRender, JsViews now provides new APIs which are convenient for intellisense, such as</span></span><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">: &nbsp;<i>$.link.movieTmpl( \"#movieList\", movies );</i></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Disabling linking when rendering a template:</b> If JsViews is loaded, rendered template were previously automatically data-linked. It is now possible to set <i>link: false</i>&nbsp;on a template, or as an option in the render call, or as a tag property: <i>{{for link=false}}</i>, to switch off data linking within a rendered template.<br />
This is useful, for example, if you want to include template tags within attribute markup, and suppress JsViews HTML comment annotations that were automatically inserted for data-linking purposes.</span></li>
</ul><div><b style=\"font-family: Calibri; font-size: 11pt;\">Missing, or not yet available features</b></div></div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul><li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Programmatic data linking:&nbsp;</b></span><span style=\"font-family: Calibri; font-size: 15px;\">Programmatic data link APIs such as <i>addLink</i> have been removed.&nbsp;</span><span style=\"font-family: Calibri; font-size: 15px;\">(They will probably return in modified form for JsViews beta)</span></li>
<li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Unit tests:</b><span style=\"font-family: Calibri;\">&nbsp; JsViews is not so close to beta as JsRender, and does not yet include unit tests. They will be added before it reaches beta.&nbsp;&nbsp;</span></span></li>
</ul></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><b>Performance and code size</b><br />
In spite of the many new features, total minified code size for JsViews plus JsRender is similar to the previous update, and performance is slightly better. A performance test page is provided<span style=\"font-size: 11pt;\">.</span><br />
<br />
<b style=\"font-size: 11pt;\">Specific examples of porting to the current design</b><br />
The samples available at <a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsrender</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">here</a>) and at <a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsviews</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">here</a>) have been changed where necessary to work with current API calls and declarative syntax. In some cases there are new features available which would have provided a more elegant approach to the scenario shown, but the samples have generally been changed in a minimalistic way, to illustrate how to port to the new version. (More samples showing new features will be added at a later point, along with other documentation).<b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">And from here?</b></div><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\">The plan is to wait for some feedback or bug reports on this new update, before deciding whether to label this version of JsRender as the official beta. Once it has become beta, I hope to progressively add additional documentation<span style=\"font-size: 11pt;\">.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<span style=\"font-size: 11pt;\">In the meantime I will continue to work on moving JsViews towards beta. This may still take a while, since there are some significant changes and improvements in the pipeline. My hope is that it will be available late April or early May...&nbsp;</span><br />
<br />
</div></div></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/WP2M_E4Kl5Y\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/1815998073923523467/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html#comment-form") (title . "210 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1815998073923523467?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1815998073923523467?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/WP2M_E4Kl5Y/approaching-beta-whats-changing-in_06.html") (title . "Approaching Beta: What's changing in JsRender and JsViews"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "210") (feedburner:origLink nil "http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html")) (entry ((gd:etag . "W/\"D0AFSXo8cCp7ImA9WhVSEEU.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-4390082775510320361") (published nil "2011-10-12T18:10:00.002-07:00") (updated nil "2012-03-06T18:01:58.478-08:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2012-03-06T18:01:58.478-08:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Templates and JsViews: The Roadmap") (content ((type . "html")) "<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>JsRender is now close to beta, and JsViews has many new features which also bring it closer to beta.<br/>See <a href=\"http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html\">Approaching Beta: What's changing in JsRender and JsViews</a> for details on the latest changes.<br />
</div><br />
<div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-weight: bold;\"><span class=\"Apple-style-span\" style=\"font-weight: normal;\"></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"><b>From jQuery Templates to JsViews</b></span></span></div><div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div><span class=\"Apple-style-span\" style=\"font-weight: normal;\">This post provides some details and some context on the relationship between jQuery Templates, JsRender and JsViews, and provides information about the current roadmap.</span><br />
<div style=\"font-weight: bold;\"></div></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"></span><br />
<div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\">History of jQuery Templates</span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div>jQuery Templates started out in March 2010, and went through a series of steps:</div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul style=\"font-family: Calibri; font-size: 11pt;\"><li>March 2010:&nbsp;John Resig posted <a href=\"https://github.com/jquery/jquery-tmpl/commit/73168f499e80ddcc172cd1389e0be66cfd00b25a\">a prototype</a></li>
<li>from May 2010 onwards:&nbsp;I worked on a fork of John's prototype (as did many others)</li>
<li>October 2010:&nbsp;My fork was pulled into the jQuery Templates repo, and it was decided to make this a <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Official Plugin</a>: &nbsp;(along with the Globalization and Data Link plugins, created primarily by <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a>, also at Microsoft).&nbsp;</li>
<li>October 2010 - April 2011:&nbsp;I continued to iterate on the code on&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;- taking it to Beta1 then working towards Beta2.</li>
<li>April 2011:&nbsp;The jQuery Project decided to <a href=\"http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/\">change the status of official plugins</a>.&nbsp;From that point the version of jQuery Templates at <a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a> was owned by the jQuery UI team. I collaborated with jQuery UI on moving templates forward.&nbsp;</li>
<li>April 2011 onwards: jQuery UI decided to put&nbsp;&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;&nbsp;on hold - and asked me not to continue with fixes and updates under that repository. The plan was first to establish their templating requirements, and from there move on to determining what template engine they would use.</li>
</ul></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Meanwhile: JsRender and JsViews</b><br />
At the same time (April 2011) I was working on an updated approach to jQuery Templates: <a href=\"https://github.com/BorisMoore/jsrender\">JsRender </a>and <a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a>.&nbsp;JsRender uses pure string-based rendering without any DOM (or even jQuery) dependency, and JsViews integrates JsRender templates with data linking, to provide data-driven templated views.&nbsp;&nbsp;I gave a&nbsp;<a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">preview</a>&nbsp;of this work at the April 2011 jQuery Conference.<br />
<br />
The jQuery UI team asked me to continue that ongoing development in my own repository rather than under the jQuery project. Meantime we collaborated on establishing design and feature requirements for templates in jQuery UI.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">More recently jQuery UI decided that they did not want to use the jQuery Template syntax for their future templating engine, and instead opted for a logicless syntax (or as I prefer to say, codeless - since there would still be <i>{{each}}</i> and <i>{{if}}</i> tags) similar to Mustache and Handlebars. This led me to develop a version of JsRender using that style of markup. The result is the JsRender template engine that I <a href=\"http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html\">showed</a> at the October jQuery Conference, which is considerably faster that jQuery Templates, and remains very flexible thanks to the ease and power of creating custom tags and helpers (which include some features not found in Handlebars or Mustache - such as chaining of tags, intermixing of named and positional parameters, postfixed encoding syntax etc.)<br />
<br />
Personally I had mixed feelings about the new codeless syntax. One big concern was that it will require porting of existing jQuery Template apps to the new syntax, and in the case where the templates include a lot of inline JavaScript expressions, it will mean either creating new custom tags, or falling back on the 'opt-in' <i>{{*... }}</i> tag for inline code.<br />
<br />
But on the positive side, it provides better separation of presentation and behavior, and includes some other new features and improvements that provide considerable advantages, including the ease of creating custom tags, and the improved performance. So finally I am pretty excited by the new approach and what it brings...</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Moving forwards with JsViews and JsRender</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">Currently JsViews and JsRender include <a href=\"http://borismoore.github.com/jsviews/demos/index.html\">a number of samples</a> which can provide the basis for using them already for front-end development. Although there is not yet any documentation as such, and there has been no publicity (until now), they are nevertheless already being used at the prototype level by some important sites (notably by Hotmail - who are about to go into production using JsViews). That said, I anticipate some changes in JsViews, so it may be better to wait a bit longer before doing too much development using the JsViews platform. JsRender on the other hand is I think getting close to a stable Beta-release API.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Templates in jQuery UI&nbsp;</b><br />
As far as jQuery UI is concerned, the current expectation is that jQuery UI will use JsRender templates, or at least use JsRender as the starting point for jQuery UI templates. No&nbsp; decision has been made yet on whether jQuery UI will use JsViews for data linking and binding. </div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Roadmap summary:</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><ul><li><b><a href=\"https://github.com/jquery/jquery-tmpl\">jQuery templates</a></b>: Will remain at Beta1, and be superseded by JsRender templates, and JsViews.</li>
<li><b><a href=\"https://github.com/BorisMoore/jsrender\">JsRender</a></b>: Soon move to Beta – then on to V1<br />
jQueryUI plan to use JsRender. (TBD whether it will migrate to jQuery project in GitHub...)</li>
<li><b><a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a></b>: Move to Beta (after JsRender) and then on to V1 …<br />
May also be used by jQueryUI</li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/w37vtXoiMCg\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/4390082775510320361/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html#comment-form") (title . "77 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/4390082775510320361?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/4390082775510320361?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/w37vtXoiMCg/jquery-templates-and-jsviews-roadmap.html") (title . "jQuery Templates and JsViews: The Roadmap"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "77") (feedburner:origLink nil "http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html")) (entry ((gd:etag . "W/\"DUEBQ38-eyp7ImA9WhdaGUw.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-2450299268727821193") (published nil "2011-10-10T15:13:00.000-07:00") (updated nil "2011-10-29T12:47:32.153-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-29T12:47:32.153-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "JsViews presentation at jQuery Conference, Boston") (content ((type . "html")) "<b>Six months in stealth mode...</b><br />
My <a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">last blog entry</a> was six months ago, and concerned my jQuery Conference presentation in April 2011. Since then, no blog entries, but lots of activity on moving &nbsp;jQuery Templates forwards to the \"next generation\". It has been somewhat 'stealth mode' - since I wanted to stabilize the design and the code before drawing too much attention to it.&nbsp;That work has been progressing very well, and has now reached the point where I will gradually &nbsp;bring it out from 'under wraps'.<br />
<br />
<b>jQuery Conference Presentation</b><br />
The first step in that process just happened - another jQuery Conference presentation: I just returned from presenting on \"JsViews: Next-generation jQuery Templates and Data Link\" at the&nbsp;<a href=\"http://events.jquery.org/2011/boston/\">October 2011 jQuery Conference in Boston</a>.<br />
<br />
Here are the conference links:<br />
<ul><li><a href=\"http://www.slideshare.net/BorisMoore/jsviews-next-generation-jquery-templates\">Slides from the presentation</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/index.html\">Conference Demos</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/index.html\">Index of all demos</a></li>
<li><a href=\"https://github.com/BorisMoore/jsviews\">Code</a></li>
</ul>The presentation was very well received, and created some buzz on Twitter, as illustrated by these tweets:<br />
<ul><li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/thinksaydo\">thinksaydo</a> Think Say Do, LLC</span></b>: super excited about <a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a> and <a href=\"https://github.com/BorisMoore/jsviews\">github.com/BorisMoore/jsv…</a> being part of jQuery's future</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/rascalking\">rascalking</a> David Bonner</span></b>: looking forward to playing with jsrender/jsviews. feels really comfortable, coming from a django background. <a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/chinmaybijwe\">chinmaybijwe </a>Chinmay Bijwe</span></b>:&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a>&nbsp;: JSViews and JSRender look great! Want to try soon.</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/vinbrown2\">vinbrown2 </a>Vin Brown</span></b>: seems any previously stated (by me) similarity between jsViews and xslt were overstated. this is oozing coolness.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/weisjohn\">weisjohn </a>john weis</span></b>: coming from the Django template world, JsRender and JsViews are the &nbsp; &nbsp; &nbsp;hotness!&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom</a> Adam Backstrom</span></b>: Super easy to add new template tags to jsViews. Tags can be &nbsp; &nbsp; &nbsp;used in conditional template logic (if/else).&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom </a>Adam Backstrom</span></b>: Progressive enhancement in jsViews: render on the server, later apply a view to the DOM, get a view that is now observing for changes&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/shooley\">shooley</a> Shawn Hooley</span></b>: Excited about jsViews! Slick solution for dynamic rendering.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/addy_osmani\">addy_osmani </a>Addy Osmani</span></b>: Interesting next progression that's come out of the jQuery templatesproject: jsRender (no DOM/jQ dependence) -<a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/clayalouise\">clayalouise </a>clayalouise</span></b>: Love the design for JsViews! I've been looking for a better than knockoutjs&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/monkeysort\">monkeysort</a> Derek Meyer</span></b>: Great talk by Boris Moore on the jQuery Templates replacementJsViews. Could have used a longer time slot for a public launch.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/ScottRHuff\">ScottRHuff</a> Scott Huff</span></b>: Exciting and thought provoking talk from Boris Moore on JsViews&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/_jeffrose\">_jeffrose</a> Jeff Rose</span></b>: Wish Boris Moore's presentation on JsViews was longer. Looks very impressive.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
</ul>One aspect that triggered a lot of excitement and questions was progressive enhancement, using the same JsRender template on the server as on the client, and then activating the content in the client by calling $.link(). &nbsp;(<a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/11_server-rendered_client-activated.html\">See this demo</a>)<br />
<br />
<b>And now...</b><br />
<span class=\"Apple-style-span\">From this point I'll be working towards a documented Beta release - not too far away. More of that in an upcoming post on &nbsp;\"</span><span class=\"Apple-style-span\" style=\"background-color: white; color: #333333; font-family: &quot;trebuchet ms&quot;, verdana, arial, sans-serif; font-size: 13px; line-height: 18px;\"><a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a></span><span class=\"Apple-style-span\">\".</span><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/a8OjKeHHESQ\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/2450299268727821193/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html#comment-form") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2450299268727821193?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2450299268727821193?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/a8OjKeHHESQ/jsviews-presentation-at-jquery.html") (title . "JsViews presentation at jQuery Conference, Boston"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "0") (feedburner:origLink nil "http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html")) (entry ((gd:etag . "W/\"CEYAQ3w4eSp7ImA9WhdbEkU.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-6473568363716800389") (published nil "2011-04-21T12:40:00.000-07:00") (updated nil "2011-10-10T14:29:02.231-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-10T14:29:02.231-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Bay Area Conference - presentation, meetings and movements") (content ((type . "html")) "<div class=\"MsoNormal\">I just got back from speaking at this jQuery Conference Bay Area Conference last weekend, so this is a quick blog to provide some links.</div><div class=\"MsoNormal\"><o:p></o:p></div><div class=\"MsoNormal\"><br />
</div><div class=\"MsoNormal\">This was the official jQuery Conference, which is held twice a year. So all the key members of the jQuery team and community were there. <br />
<ul><li>29&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/schedule/\" target=\"_blank\">presentations</a>&nbsp;over two days</li>
<li><span style=\"font-family: Symbol;\"><span style=\"font: normal normal normal 7pt/normal 'Times New Roman';\">&nbsp;</span></span>About 500 participants</li>
<li>Other presenters included John Resig, Yehuda Katz, Paul Irish, and others who you can see&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/speakers/\" target=\"_blank\">here</a></li>
</ul></div><div class=\"MsoNormal\"><b>My Presentation</b><br />
I spoke about “<i>Harnessing jQuery Templates and Data Link, to build dynamic data-driven browser apps</i>”.<br />
The presentation was in three sections:<br />
<ul><li>Discussion of App Scenarios for data and templates in the client, and example <a href=\"http://jquery.github.com/jquery-tmpl/demos/movies/PagesCore/movies.html\" target=\"_blank\">demo app</a></li>
<li>Templates today: <a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">walkthrough</a> of all the main features</li>
<li>Templates ‘tomorrow’: preview of current work on really fast responsive interactive client-side views, integrating jQuery Templates and Data Linking. (<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">Demo</a>)</li>
</ul><div>The slides are&nbsp;<span class=\"Apple-style-span\" style=\"color: #1f497d;\"><a href=\"http://www.slideshare.net/BorisMoore/harness-jquery-templates-and-data-link\" target=\"_blank\">here</a></span>.&nbsp;</div><div><br />
</div></div><div class=\"MsoListParagraph\" style=\"margin-left: 1.0in; mso-list: l1 level2 lfo2; text-indent: -.25in;\"><o:p></o:p></div><div class=\"MsoNormal\"><b>Meetings and movements</b></div><div class=\"MsoNormal\">I had some great meetings and discussions with other developers and open-source community members. Definitely declarative binding of templated views to observable data is ‘in the air’, and there is clearly a huge interest in related scenarios and patterns like client-side MVVM or MVC. We were already doing much of this in Microsoft AJAX Preview 6 with observable objects and arrays and declarative bindings in templates, but it was not known to many. My hope is that the current <a href=\"https://github.com/BorisMoore/jsviews\" target=\"_blank\">JsViews</a> integration of data link and templating we are working on will break new ground in this area, but this time within a simpler leaner approach, and in synergy with jQuery. People are looking for fast lightweight declarative frameworks of this kind.&nbsp;<o:p></o:p></div><br />
<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>I have published the demo pages above on GitHub as live pages, and have updated the links above to point to the new pages.<br />
<br />
The new content is as follows:<br />
<ul><li>Live demo pages of current jQuery Templates:&nbsp;<a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">jquery.github.com/jquery-tmpl/demos/step-by-step.html</a></li>
<li>Demo pages of preview work of pure string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">borismoore.github.com/jsrender/demos/index.html</a></li>
<li>Demo pages of JsViews, for interactive pages while still using string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">borismoore.github.com/jsviews/demos/index.html</a></li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/mvigW6OSXvc\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/6473568363716800389/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html#comment-form") (title . "3 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/6473568363716800389?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/6473568363716800389?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/mvigW6OSXvc/jquery-bay-area-conference-presentation.html") (title . "jQuery Bay Area Conference - presentation, meetings and movements"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "3") (feedburner:origLink nil "http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html")) (entry ((gd:etag . "W/\"CEAHRHw5cCp7ImA9WhZSGUk.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-5455325010672456186") (published nil "2011-02-14T16:02:00.000-08:00") (updated nil "2011-04-04T11:45:35.228-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-04-04T11:45:35.228-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "In the Pipeline") (content ((type . "html")) "Things have been busy, and I have been way less active on this blog than I intended.<br />
<br />
But there's a good side to that: there are some important updates and improvements in the pipeline, and that's what's been keeping me busy...<br />
<br />
I have been working in three main areas:<br />
<br />
<ul><li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-tmpl\">jQuery Templates</a>, which is planned for April. <br />
<br />
This should address a number of issues and requests that have been expressed. One new feature planned for Beta2 is an API to render a template against data, straight to an HTML string, without any dependency on an HTML DOM. This can then be used for direct insertion as innerHTML, and will also enable easy use of jQuery Templates for rendering on the server, as well as improved performance of jQuery Templates when used in the browser for read-only scenarios. <br />
<br />
At the same time all the power of jQuery Templates will still be there, for those that choose to render templates with the full DOM activation phase included, as at present. <br />
<br />
In the case of server rendering, the idea is that the DOM activation can still happen in the browser, against server-rendered HTML. So progressive enhancement scenarios should be relatively easy to achieve...<br />
<br />
</li>
<li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-datalink\">jQuery Data Link</a>, also planned for April.<br />
<br />
This involves significant changes to the current Data Link implementation, with much broader scenario coverage than at present. I hope to push my present code for this new version to a Beta2 branch of jQuery Data Link soon, for those who are curious about the ongoing design.<br />
<br />
</li>
<li>Finally, I have been working on a new script loader: <a href=\"https://github.com/BorisMoore/JsDefer\">JsDefer</a>.<br />
<br />
You can find the current code for JsDefer here <a href=\"https://github.com/BorisMoore/JsDefer\">https://github.com/BorisMoore/JsDefer</a>. This script loader shares a number of features with a script loader which we had released a long way back within the Microsoft AJAX platform (see <a href=\"http://aspnet.codeplex.com/releases/view/34488\">http://aspnet.codeplex.com/releases/view/34488</a>). <br />
<br />
It comes in two versions - a jQuery plugin, and another version that does not require jQuery to be loaded in the page. <br />
<br />
As well as providing some of the features we had in our Microsoft AJAX script loader, JsDefer also takes advantage of the concept of a \"Deferred\" object, to facilitate working with asynchronous processes (in particular, of course, the process of dynamically fetching a script and loading it into the page). The recent jQuery 1.5 release uses Deferred objects in the context of AJAX requests, so JsDefer is designed to work 'hand in glove' with jQuery 1.5 AJAX requests, among other scenarios.&nbsp;</li>
</ul><br />
I plan to publish a blog post on JsDefer very soon, with an initial dive into how it works and the scenarios it addresses.<br />
<div><br />
</div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/PSWsAJLINY8\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/5455325010672456186/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/02/in-pipeline.html#comment-form") (title . "9 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5455325010672456186?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5455325010672456186?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/PSWsAJLINY8/in-pipeline.html") (title . "In the Pipeline"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "9") (feedburner:origLink nil "http://www.borismoore.com/2011/02/in-pipeline.html")) (entry ((gd:etag . "W/\"A0IDQnk8fCp7ImA9WhdbFEs.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-5219992015095126253") (published nil "2010-10-04T07:00:00.000-07:00") (updated nil "2011-10-12T18:32:53.774-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-12T18:32:53.774-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Templates is now an Official jQuery Plugin") (content ((type . "html")) "<div style=\"border: 1px solid #999; padding: 5px; margin-top:12px;\"><i><b>Update - October 2011</b></i>: Please see recent post: \"<a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a>\" for current information on the jQuery Templates roadmap.  </div><br />
Joint announcements were made today by jQuery and Microsoft that jQuery has decided to make the <em>jQuery Templates</em>, <em>Data Link</em>, and <em>Globalization</em> plugins <em>'Official jQuery Plugins'</em>. <br />
<br />
See the following blog announcements for more details:<br />
<ul><li><a href=\"http://weblogs.asp.net/scottgu/archive/2010/10/04/jquery-templates-data-link-and-globalization-accepted-as-official-jquery-plugins.aspx\">jQuery Templates, Data Link, and Globalization Accepted as Official jQuery Plugins</a></li>
<li><a href=\"http://blog.jquery.com/2010/10/04/new-official-jquery-plugins-provide-templating-data-linking-and-globalization/\">New Official jQuery Plugins Provide Templating, Data Linking and Globalization</a></li>
</ul>Of course I am very pleased by this news, which is the result of some active collaboration with members of the jQuery team. <br />
<br />
<h3>What this means:</h3><h4>A new home for the plugins...</h4>First thing it means, of course, is that the repositories where those plugins live have now moved to a new home. The code that was at GitHub under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project has been moved to the following repositories under the <a href=\"http://github.com/jquery/\">jQuery</a> project:<br />
<ul><li>jQuery Templates: <a href=\"http://github.com/jquery/jquery-tmpl/\">http://github.com/jquery/jquery-tmpl/</a></li>
<li>jQuery DataLink: <a href=\"http://github.com/jquery/jquery-datalink/\">http://github.com/jquery/jquery-datalink/</a></li>
<li>jQuery Globalization: <a href=\"http://github.com/jquery/jquery-global/\">http://github.com/jquery/jquery-global/</a></li>
</ul>The above projects constitute <em>Beta</em> releases of the plugins.<br />
<br />
The previous repositories under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project may continue to exist, but if they do then it will be for exploratory work which may or may not find its way back into the official plugins in a later update.  <br />
<h4>New documentation on the jQuery API site...</h4>Another very important consequence of this announcement is that from now on, documentation for the <em>jQuery Templates plugin</em> and for the <em>jQuery Data Link plugin</em> will be available on the jQuery API site at <a href=\"http://api.jquery.com/\">http://api.jquery.com</a>. <br />
<br />
From today, new documentation is available there, which is much more complete than the previous Wiki provided on our repository.<br />
<ul><li>The following link provides a list of all the documentation topics for the jQuery Templates plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/templates/\">http://api.jquery.com/category/plugins/templates</a><br />
<br />
</li>
<li>And the following link provides a list of all the documentation topics for the jQuery Data Link plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/data-link/\">http://api.jquery.com/category/plugins/data-link</a><br />
</li>
</ul>One goal I have with this blog entry is to give you an idea of how the new documentation for jQuery Templates is organized, and to provide a convenient set of links to the various topics. Each topic concerns either a method from the plugin API, or a template tag that you can use within your template markup to obtain some of the rich features that this plugin provides. <br />
<h4><em>API</em> documentation topics:</h4><ul><li><strong>jQuery.tmpl() and .tmpl():</strong> <br />
These APIs are used to <em>render</em> a jQuery template:<br />
<a href=\"http://api.jquery.com/tmpl\">http://api.jquery.com/tmpl</a><br />
<a href=\"http://api.jquery.com/jQuery.tmpl\">http://api.jquery.com/jQuery.tmpl</a><br />
<br />
</li>
<li><strong>jQuery.tmplItem() and .tmplItem():</strong> <br />
These APIs are used to <em>find</em> a jQuery template instance, and are crucial for providing interactivity:<br />
<a href=\"http://api.jquery.com/tmplitem\">http://api.jquery.com/tmplitem</a><br />
<a href=\"http://api.jquery.com/jQuery.tmplitem\">http://api.jquery.com/jQuery.tmplitem</a><br />
<br />
</li>
<li><strong>jQuery.template() and .template():</strong> <br />
These APIs are used to <em>compile or store</em> a jQuery template, and are particularly useful for scenarios where templates are loaded in the form of strings, such as templates retreived remotely:<br />
<a href=\"http://api.jquery.com/template\">http://api.jquery.com/template</a><br />
<a href=\"http://api.jquery.com/jQuery.template\">http://api.jquery.com/jQuery.template</a><br />
</li>
</ul><h4><em>Template tag</em> documentation topics:</h4><ul><li><strong>${...}:</strong> <br />
This tag is used to <em>evaluate fields or JavaScript expressions</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-equal\">http://api.jquery.com/template-tag-equal</a><br />
<br />
</li>
<li><strong>{{each ...}}...{{/each}}:</strong> <br />
This tag is used used to <em>iterate</em> within a template (without creating template items):<br />
<a href=\"http://api.jquery.com/template-tag-each\">http://api.jquery.com/template-tag-each</a><br />
<br />
</li>
<li><strong>{{if ...}}...{{else ...}}...{{/if}}:</strong> <br />
This tag is used used to create <em>conditional sections</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-if\">http://api.jquery.com/template-tag-if</a><br />
<a href=\"http://api.jquery.com/template-tag-else\">http://api.jquery.com/template-tag-else</a><br />
<br />
</li>
<li><strong>{{html ...}}:</strong> <br />
This tag is used used to <em>insert markup obtained from data</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-html\">http://api.jquery.com/template-tag-html</a><br />
<br />
</li>
<li><strong>{{tmpl ...}}:</strong> <br />
This tag is used used for <em>composition and iteration</em> within templates (and creating new template items for each nested rendered template):<br />
<a href=\"http://api.jquery.com/template-tag-tmpl\">http://api.jquery.com/template-tag-tmpl</a><br />
<br />
</li>
<li><strong>{{wrap ...}}...{{/wrap}}:</strong> <br />
This tag is used used for <em>composition and iteration, along with incorporation of wrapped HTML</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-wrap\">http://api.jquery.com/template-tag-wrap</a><br />
</li>
</ul><br />
I hope this new documentation will help you to take advantage of some of the rich features of jQuery Templates. <br />
<br />
For extra help I'm expecting soon to provide some more blog entries that continue the series <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">Introducing jQuery Templates</a>...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/vP5sWuSacWk\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/5219992015095126253/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html#comment-form") (title . "57 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5219992015095126253?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5219992015095126253?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/vP5sWuSacWk/jquery-templates-is-now-official-jquery.html") (title . "jQuery Templates is now an Official jQuery Plugin"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "57") (feedburner:origLink nil "http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html")) (entry ((gd:etag . "W/\"CEAER305eyp7ImA9WhZXEE8.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-2182287749356001745") (published nil "2010-09-23T16:50:00.001-07:00") (updated nil "2011-04-28T13:31:46.323-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-04-28T13:31:46.323-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "Introducing jQuery Templates 1: First Steps") (content ((type . "html")) "<script type=\"text/javascript\">
(function(b){var c=0,a,e,k=b.tmpl,g=b.template,l=jQuery.fn.domManip,d,f='<table class=\"plusViewerTabs\"><tbody><tr><th class=\"header_${activeIndex === 0}\">Result</th><th class=\"header_${activeIndex === 1}\">Data</th>{{each tmpls}}<th class=\"header_${activeIndex === 2 + $index}\">${$value.name}</th>{{/each}}</tr><tr><td colspan=\"${tmpls.length + 2}\">{{if activeIndex === 0}}{{wrap wrapper}}{{tmpl(data) tmpls[0].tmpl}}{{/wrap}}{{else activeIndex === 1}}<textarea{{if !editable}} readonly{{/if}}>${$item.getData()}</textarea>{{else}}<textarea{{if !editable}} readonly{{/if}}>${tmpls[activeIndex - 2].markup}</textarea>{{/if}}</td></tr></tbody></table>';f=b.template(null,f);b.tmpl=function(f,d,e,b){if(!c&&!b)a={tmpls:[],tmplNames:{},activeIndex:0,data:d};return k(f,d,e,b)};b.extend(b.tmpl,k);b.template=function(d,e){var f,h,b=e;if(a&&a.tmplNames[d])return a.tmpls[a.tmplNames[d]-1].tmpl;else if(b&&!c){if(b instanceof jQuery)b=e[0]||{};if(b.nodeType){f=\"#\"+b.getAttribute(\"id\");b=b.innerHTML}if(typeof b===\"string\"){h=f||b;if(!a.tmplNames[h]){a.tmpls.push({markup:b,tmpl:b=g(d,e),name:f||\"Template\"});a.tmplNames[h]=a.tmpls.length;return b}}}return g(d,e)};jQuery.fn.extend({domManip:function(){if(!c){var f=0,e=this[0],d=b(e),g;d.addClass(\"plusViewerTarget\");while(e!==document.body){if(d.hasClass(\"plusViewer\")){a.wrapper=e.innerHTML;a.depth=f;a.persist=d.hasClass(\"persist\"),g=a.tabs=d.hasClass(\"tabs\"),a.editable=a.persist||d.hasClass(\"edit\");d.data(\"plusViewerState\",a);d.data(\"plusViewerInitialState\",b.extend(true,{},a));a=null;break}d=b(e=e.parentNode);f++}}var i=l.apply(this,arguments);if(g){c++;h(d);c--}else!a&&d.addClass(\"plusTargetContainer\");return i}});function h(c){a=c.data(\"plusViewerState\");if(a.wrapper){var d=a.wrapper.split(\"plusViewerTarget\");d[1]=d[1].replace(/>[\\w\\s]*</,\">{{html $item.html()}}</\");a.wrapper=d.join(\"plusViewerTarget\")}else a.wrapper=\"{{! }}{{html $item.html()}}\";if(a.tabs)if(c.hasClass(\"data\"))a.activeIndex=1;else b.each(a.tmplNames,function(d,b){if(c.hasClass(d)){a.activeIndex=b+1;return false}});b.tmpl(f,a,{getData:j}).appendTo(c.empty());a.tabs&&a.activeIndex&&i(c)}function i(c){var a=b(c).find(\"textarea\")[0];if(a){a.style.overflow=\"hidden\";a.scrollHeight;a.style.height=a.scrollHeight+\"px\";a.style.overflow=\"auto\"}}function j(){return JSON.stringify(this.data.data,null,\"\\t\")}b(function(){d=document.createElement(\"div\");d.innerHTML=\"+\";d.className=\"plusButton\";document.body.appendChild(d);b(\".plusViewer\").delegate(\".header_false\",\"click\",function(){var f,d=b.tmplItem(this),e=d.data.activeIndex=b(this).index();c++;a=d.data;d.update();a=null;c--;if(!e)return;i(d.nodes[0])}).delegate(\"textarea\",\"change\",function(){var a=b.tmplItem(this);if(a.data.activeIndex===1)try{a.data.data=b.parseJSON(this.value)}catch(g){alert(\"Syntax error!\");this.value=j.call(a)}else{c++;var e=this.value,f=b.template(null,e),d=a.data.tmpls[a.data.activeIndex-2];try{f(b,b.extend({},a,{data:a.data.data[0]||a.data.data}));a.data.targetMarkup=e;d.markup=e;d.tmpl=f}catch(g){alert(\"Syntax error!\");this.value=d.markup}c--}});b(\".plusTargetContainer\").live(\"mouseenter\",function(c){if(c.relatedTarget&&c.relatedTarget.className===\"plusButton\")return;if(e)e.style.border=\"solid transparent 1px\";e=this;d.innerHTML=b(this).hasClass(\"activeViewer\")?\"-\":\"+\";var a=b(this).offset();this.style.border=\"solid green 1px\";d.style.left=a.left+\"px\";d.style.top=a.top+\"px\";d.style.display=\"block\"});b(\".plusTargetContainer\").live(\"mouseleave\",function(a){if(a.relatedTarget&&a.relatedTarget.className===\"plusButton\")return;e=null;d.style.display=\"none\";this.style.border=\"solid transparent 1px\"});b(\".plusButton\").click(function(){c++;var d=b(e);if(this.innerHTML===\"+\"){h(d);d.addClass(\"activeViewer\");this.innerHTML=\"-\"}else{var f=b(e).children().first().tmplItem(),j=f.nodes,g=document.createElement(\"div\"),k=j[0].parentNode,l=f.data.depth,i=d.data(\"plusViewerInitialState\");g.innerHTML=i.wrapper;if(f.data.persist){a=f.data;d.data(\"plusViewerState\",a)}else{a=i;d.data(\"plusViewerState\",b.extend(true,{},a))}b.tmpl(a.tmpls[0].tmpl,a.data).appendTo(b(g).find(\".plusViewerTarget\"));jQuery(j).remove();k.innerHTML=g.innerHTML;this.innerHTML=\"+\";d.removeClass(\"activeViewer\")}a=null;c--})})})(jQuery);if(!this.JSON)this.JSON={};(function(){function c(a){return a<10?\"0\"+a:a}if(typeof Date.prototype.toJSON!==\"function\"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+c(this.getUTCMonth()+1)+\"-\"+c(this.getUTCDate())+\"T\"+c(this.getUTCHours())+\":\"+c(this.getUTCMinutes())+\":\"+c(this.getUTCSeconds())+\"Z\":null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()}}var h=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,f=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,a,d,i={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},b;function g(a){f.lastIndex=0;return f.test(a)?'\"'+a.replace(f,function(a){var b=i[a];return typeof b===\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function e(m,n){var i,j,h,k,l=a,f,c=n[m];if(c&&typeof c===\"object\"&&typeof c.toJSON===\"function\")c=c.toJSON(m);if(typeof b===\"function\")c=b.call(n,m,c);switch(typeof c){case\"string\":return g(c);case\"number\":return isFinite(c)?String(c):\"null\";case\"boolean\":case\"null\":return String(c);case\"object\":if(!c)return\"null\";a+=d;f=[];if(Object.prototype.toString.apply(c)===\"[object Array]\"){k=c.length;for(i=0;i<k;i+=1)f[i]=e(i,c)||\"null\";h=f.length===0?\"[]\":a?\"[\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"]\":\"[\"+f.join(\",\")+\"]\";a=l;return h}if(b&&typeof b===\"object\"){k=b.length;for(i=0;i<k;i+=1){j=b[i];if(typeof j===\"string\"){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}}}else for(j in c)if(Object.hasOwnProperty.call(c,j)){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}h=f.length===0?\"{}\":a?\"{\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"}\":\"{\"+f.join(\",\")+\"}\";a=l;return h}}if(typeof JSON.stringify!==\"function\")JSON.stringify=function(h,c,f){var g;a=\"\";d=\"\";if(typeof f===\"number\")for(g=0;g<f;g+=1)d+=\" \";else if(typeof f===\"string\")d=f;b=c;if(c&&typeof c!==\"function\"&&(typeof c!==\"object\"||typeof c.length!==\"number\"))throw new Error(\"JSON.stringify\");return e(\"\",{\"\":h})};if(typeof JSON.parse!==\"function\")JSON.parse=function(a,c){var b;function d(f,g){var b,e,a=f[g];if(a&&typeof a===\"object\")for(b in a)if(Object.hasOwnProperty.call(a,b)){e=d(a,b);if(e!==undefined)a[b]=e;else delete a[b]}return c.call(f,g,a)}a=String(a);h.lastIndex=0;if(h.test(a))a=a.replace(h,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)});if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){b=eval(\"(\"+a+\")\");return typeof c===\"function\"?d({\"\":b},\"\"):b}throw new SyntaxError(\"JSON.parse\");}})();
</script>
<hr />






<strong><em>UPDATE:</em></strong> A joint announcement has just been made by jQuery and Microsoft that the <em>jQuery Templates</em>, <em>Data Link</em> and <em>Globalization</em> plugins are now <em>'Official jQuery Plugins'</em>. In addition, a full set of documentation for the <em>jQuery Templates</em> and <em>Data Link</em> plugins is now available on the <a href=\"http://api.jquery.com/\">http://api.jquery.com/</a> site. 

See my next post: <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Templates is now an Official jQuery Plugin</a> for details.
<hr />








In my <a href=\"http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html\">last post</a>, I said I planned to start a series of posts introducing <i>jQuery Templates</i>. This is the first of that series. This post also introduces the <a href=\"#sampleViewer\">Sample Viewer</a>, which you can use to try out your own jQuery templates.

In a sense <em>jQuery Templates</em> consists of <em>three</em> plugins: <em>.tmpl(), .tmplItem() </em>and <em>.template()</em>, and each one comes in two flavors: <em>instance </em>plugin and <em>static </em>plugin.

From a basic scenario point of view, it is like this:
<ul>
<li><em>.tmpl()</em>: <em>Render</em> the template</li>
<li><em>.tmplItem()</em>: <em>Find</em> the template item</li>
<li><em>.template()</em>: <em>Compile/Store</em> the template</li>
</ul>The template itself is any HTML markup, along with any of a set of <i>template tags</i> which enable some very rich scenarios for creating data-driven UI.

The current set of tags that are supported in jQuery templates are:
<ul>
<li><em>${...}</em>: <em>Evaluate</em> fields or expression</li>
<li><em>{{each ...}}...{{/each}}</em>: <em>Iterate</em> without creating template items</li>
<li><em>{{if ...}}...{{else ...}}...{{/if}}</em>: <em>Conditional</em> sections</li>
<li><em>{{html ...}}</em>: <em>Insert markup</em> from data </li>
<li><em>{{tmpl ...}}</em>: <em>Composition</em>, as template items</li>
<li><em>{{wrap ...}}...{{/wrap}}</em>: <em>Composition</em>, plus incorporation of wrapped HTML</li>
</ul>This blog will be the first of a series in which I hope to drill into the role of each of those APIs and tags. 

For this first blog, we'll start with the simplest possible scenario. We'll use just the <em>.tmpl()</em> API, for rendering a template, and the <em>${...}</em> template tag, for inserting data values into the rendered output...

So here goes:
<h4>








Rendering a template using local data within the page</h4>Here is some data:
<pre class=\"brush: js;\">var movies = [
    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
];</pre>Here is some markup to be used as a template:
<pre class=\"brush: xml;\">&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
    &lt;/li&gt;
&lt;/script&gt;</pre>and a target element where we are going to render the result of rendering the template against our data:
<pre class=\"brush: xml;\">&lt;ul id=\"results\"&gt;&lt;/ul&gt;</pre>And here is some code to take the template, render it with the data, and append the resulting HTML as content under our target element:
<pre class=\"brush: js;\">$( \"#movieTemplate\" ).tmpl( movies )
    .appendTo( \"#results\" );</pre>In the above code, we get a jQuery wrapped set containing our template markup, and use the <em>.tmpl()</em> plugin method (to which we pass the data) to render the template. Then we chain with the <i>appendTo</i> method to append the results under our target element:
<div class=\"demo\">








<strong>Demo:</strong>
<ul id=\"results1a\"></ul></div>As you see the template got rendered once for each item in the <i>movies</i> array. Data values are inserted using the template tag <i>${...}</i>. In fact <i>${expression}</i> inserts the (HTML-encoded) result of evaluating the <i>expression</i> term, in the context of the current item.  

The template engine actually exposes the current data item as the variable <i>$data</i>, and also exposes each of the fields of the current data item as individual variables. So the most simplest use-case of <i>${...}</i> is just with a field name as expression, such as <i>${ReleaseYear}</i>. This is actually equivalent to <i>${$data.ReleaseYear}</i> and inserts the value of that field on the current data item. Pretty straightforward.

Here is the complete code of our example:

<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;

&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
    &lt;/li&gt;
&lt;/script&gt;

&lt;ul id=\"results\"&gt;&lt;/ul&gt;

&lt;script type=\"text/javascript\"&gt;
    var movies = [
        { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
        { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
    ];

    $( \"#movieTemplate\" ).tmpl( movies )
        .appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>








Playing with the data and the template: Sample Viewer</h4>To get the feeling of how it works, here is the same demo again, but this time I have used a special Sample Viewer script which is integrated into my blog, so that if you mouse over the demo, you will see a little '+' button that you can click on. The result will be a tabbed view in which you can see the data and the template, as well as the result:
<div class=\"plusViewer edit\">








<strong>Demo with Sample Viewer</strong> (Mouse over...)
<ul id=\"results1b\"></ul></div>Try mousing over the demo above, clicking on the '+' button, and modifying the data or the template under the respective tabs. Go back to the result tab and you will see how it renders. Click on the '-' button, and you will be back with the orginal data and template...

By the way, this sample viewer is actually implemented using jQuery templates, and illustrates the kind of dynamic interactive client-side UI that can be built very easily with jQuery templates. Maybe at some point I'll reach the point of blogging about how I went about building the sample viewer. But for now, let's get back to just playing with it. For example, if you want to just change the data, and see how the template rendering works with your changes, here are some examples of changes to the data that you could explore:
<h4>








Changing the data</h4>Mouse over the demo above and expand the <i>Sample Viewer</i>. Now try copying and pasting the data examples below into the <i>Data</i> tab, and then switching back to the <i>Result</i> tab.

<em>Change values, number of elements etc.</em>
<pre class=\"code\">[
    { \"Name\": \"The BLUE Violin\", \"ReleaseYear\": \"1998\" }
]</pre><i>Conclusion:</i> It actually is data-driven :-)

<em>Remove some fields and add others:</em>
<pre class=\"code\">[
    { \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\" },
    { \"Name\": \"Eyes Wide Shut\"  },
    { \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> It ignores the missing/undefined values without error. If you put the value of those fields to null or to the empty string, the result is the same. And of course the added fields have no effect, unless you want to add <i>${Director}</i> to the template. (Try it...)

<em>Replace the array with a single object:</em>
<pre class=\"code\">{ Name: \"The Red Violin\", ReleaseYear: \"1998\" }</pre><i>Conclusion:</i> The templating engine is smart about arrays. Pass an object and it renders the template once, with the object as data item. Pass it an array and it creates a template item (a rendered template) for each of the data items in the array.

<em>Set the data to null:</em>
<pre class=\"code\">null</pre><i>Conclusion:</i> If you pass no data at all, the templating engine still renders the template once, but the current data item is null. 

We will see that there are many scenarios where you are just rendering boiler-plate, or where  the template pulls in data from other places than the data item, so passing data to the template is not always appropriate or relevant. It may be a nested template, and use data from the parent item. It may have template tags whose parameters are not simple values, but function calls, and the template is driven by the data returned by that function call. For example it might include <i>{{each myApp.getData(foo)}}</i>, or <i>${myApp.getData(foo)}</i>. 

In this blog I am staying with much simpler examples, but we will see in later blogs how passing functions to template tags is extremely common. 

<em>Include some HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style=\"color: Red;\"&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><i>Conclusion:</i> This does <i>not</i> change the formatting of the text. Instead, it shows the markup in the rendered UI. This is by design: <i>${expression}</i> HTML-encodes the value before inserting it into the DOM. If you actually want your markup to get inserted into the DOM, then use the <i>{{html ...}}</i> template tag rather than the <i>${...}</i> template tag. You can try it now: go to the <i>#movieTemplate</i> tab and replace ${Name} by {{html Name}}. Now the markup will not be escaped, and the data will actually get inserted as HTML. (We'll come back to this lower down in the blog).

One detail: the sample viewer is using <a href=\"http://www.json.org/js.html\">JSON2</a> to convert between string expressions and JavaScript objects. So the text you are editing above is actually JSON, not JavaScript literals. That's why the keys are wrapped in quotes. Try removing them, and the sample viewer will tell you that you have a syntax error! But in your script, of course, you have literals, and those quotes can be omitted (as long as you avoid JavaScript keywords!)
<h4>








Changing the template</h4>Let's try changing the template, now, rather than the data. For convenience, here is the sample viewer again. This time I set it to show the tabs from the get-go, so you don't need to mouse over and click the '+' button...

<strong><a href=\"\" name=\"sampleViewer\">Sample Viewer</a></strong>
<div class=\"plusViewer edit tabs\">








<ul id=\"results1c\"></ul></div>So try copying and pasting the template examples below into the <i>#movieTemplate</i> tab, and then switching back to the <i>Result</i> tab.

<em>Add some text:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (Released in the year ${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect!

<em>Add some markup and some formatting:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (&lt;span style=\"color: Blue;\"&gt;${ReleaseYear}&lt;span&gt;)
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect...

<em>Add simple JavaScript expressions:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name.toUpperCase()}&lt;/b&gt; (${parseInt(ReleaseYear) + 100})
&lt;/li&gt;</pre><i>Conclusion:</i> This works too. You can put JavaScript expressions as parameters to the tags. 

But don't go overboard! There is not a complete JavaScript parser in the context of inline expressions in the template. If you have complex code, write a function, and call the function from your template, and pass parameters if you need to: <i>${myFunction(a,b)}</i>. (More on that in a later blog...) 

<em>Add another template tag:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear}) - Director: ${Director}
&lt;/li&gt;</pre><i>Conclusion:</i> Nothing yet - there is no Director field... 

<em>Now change the data too:</em>
<pre class=\"code\">[
    { \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\", \"Director\": \"Francois Girard\" },
    { \"Name\": \"Eyes Wide Shut\", \"ReleaseYear\": \"1999\", \"Director\": \"Stanley Kubrick\" },
    { \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> Yes, it works as expected!

Finally let's make the change I mentioned in the previous section, and get a 'teaser' on one of the other template tags to be covered in later blogs: the <i>{{html ...}}</i> tag... 

<em>First, include HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style='color: Red;'&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><em>Now change the template to use the {{html ...}} template tag instead of the ${...} template tag:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;{{html Name}}&lt;/b&gt; (${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> Thanks to the <i>{{html ...}}</i> tag, you can insert HTML markup into the DOM, as HTML.  

Combining some of the changes above to data and template, here is a working example that illustrates what you did, and which you can use for exploring further changes: 

<strong>Sample Viewer</strong>
<div class=\"plusViewer edit tabs\">








<ul id=\"results2\"></ul></div>And here is the complete code of our modified example:
<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;

&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;{{html Name}}&lt;/b&gt; 
        (&lt;span style=\"color: Blue\"&gt; ${ReleaseYear}&lt;/span&gt;) - Director: ${Director}
    &lt;/li&gt;
&lt;/script&gt;

&lt;ul id=\"results\"&gt;&lt;/ul&gt;

&lt;script type=\"text/javascript\"&gt;
    var movies = [
        { Name: \"The &lt;strong style='color: red'&gt;Red&lt;/strong&gt; Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
        { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
    ];

    $( \"#movieTemplate\" ).tmpl( movies )
        .appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>








What's next?...</h4>Of course we have only just started scratching the surface here. I hope to provide more blogs soon to continue exploring the possibilities of jQuery templates.

In the meantime, you can download the code for jQuery templates from <a href=\"http://github.com/jquery/jquery-tmpl\">http://github.com/jquery/jquery-tmpl</a>. <script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\">
<li>
    <b>${Name}</b> (${ReleaseYear})
</li>
</script><script id=\"movieTemplate2\" type=\"text/x-jquery-tmpl\">
<li>
    <b>{{html Name}}</b> (<span style=\"color: Blue;\">${ReleaseYear}</span>) - Director: ${Director}
</li>
</script><script type=\"text/javascript\">
 var movies = [
  { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
  { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
 ];
 
 var movies2 = [
    { Name: \"The <strong style='color: red'>Red</strong> Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
    { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
 ];
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1a\" );
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1b\" );
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1c\" );
 $( \"#movieTemplate2\" ).tmpl( movies2 ).appendTo( \"#results2\" );
</script><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/HzZeYM-b0VY\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/2182287749356001745/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html#comment-form") (title . "32 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2182287749356001745?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2182287749356001745?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/HzZeYM-b0VY/introducing-jquery-templates-1-first.html") (title . "Introducing jQuery Templates 1: First Steps"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "32") (feedburner:origLink nil "http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html")) (entry ((gd:etag . "W/\"CEIFQXY_fyp7ImA9Wx5WGUU.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-3709530129956699146") (published nil "2010-09-22T16:27:00.000-07:00") (updated nil "2010-10-01T18:21:50.847-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2010-10-01T18:21:50.847-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "From Microsoft to Open Source") (content ((type . "html")) "Since earlier this year, I have been working on <em>jQuery Templates</em>, as well as some other contributions to jQuery. The starting point was an initial prototype by John Resig, sometimes referred to as his <i>micro-templating</i> proposal. I hope to follow this post with a series of posts on <em>jQuery Templates</em>. <br />
<br />
But before beginning those posts I wanted to to give some background:<br />
<h4>Microsoft and jQuery</h4>At Microsoft, we had a pretty cool <a href=\"http://aspnet.codeplex.com/releases/view/34488\">client templating implementation</a> which <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a> and I created. This was part of the Microsoft AJAX Library. The client templates were integrated with live data-linking, and with a script loader.&nbsp;We also worked on some very interesting integration between all that and jQuery, so that if you were using jQuery you could get jQuery-style APIs for the MS AJAX features, and use selectors, fluent-style APIs etc.<br />
<br />
But after reaching the point of releasing Preview 6,&nbsp;and getting very close to a final release, our management team decided to make a radical change. Client-side AJAX platforms are all about performance and optimization of Web requests, and in a sense we were in a contradictory situation. - We were encouraging our developers to use both the MS AJAX platform and jQuery in their client apps, but inevitably there was some overlap and the inclusion of both platforms in their apps was not completely optimal.<br />
<br />
So the change was that from that point on we would not just provide support for using jQuery alongside our own client-side Microsoft AJAX platform. We would instead begin to offer contributions directly to jQuery.<br />
<br />
In fact while jQuery has some very cool features, there were a number of features in our AJAX platform which were not in jQuery, and indeed were pretty much ahead of the curve as far as AJAX platforms in general are concerned -&nbsp;or at least that is my view :-). Amongst those features -&nbsp;our client templates, our concept of observable JavaScript objects and arrays (which we now refer to as <em>\"data-linking\"</em>), our globalization support, and our script loader. <br />
<h4>Moving to Open Source</h4>So we began the process of completely redesigning and re-implementing some of those features as pure jQuery plugins or extensions.&nbsp;The goal was very strongly towards lean and clean JavaScript code; to follow JavaScript best-practice for coding -&nbsp;in the sense of optimal use of the JavaScript language itself; and <em>not</em> to attempt to squeeze it into a strongly-typed or object-orientated (in the C# or Java sense) paradigm -&nbsp;or in general bring to bear coding habits and patterns that come from C# and are not really 'at home' in JavaScript code.<br />
<br />
The work is taking place as a true open source effort, hosted on GitHub, and in touch with the community. I have been having a great time as a developer working in that context, and enjoying every minute of it!<br />
<br />
So far we have three projects on GitHub: <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a>, <a href=\"http://github.com/nje/jquery-datalink\">jQuery Data Linking</a>, and&nbsp;<a href=\"http://github.com/nje/jquery-glob\">jQuery Globalization</a>. We are also working on bringing our original Script Loader code into a form that might be optimal for jQuery.&nbsp;The globalization plugin was announced <a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\">here</a>, and is already seeing a lot of use. jQuery Templates has been under very active development recently, and will be the subject of some of my upcoming blogs. And jQuery Data-Linking will probably see some more intensive development in the coming weeks, and is likely to include some very interesting integration with jQuery Templates...<br />
<br />
I am looking forward to sharing more of these Open Source efforts with you over the coming weeks, starting with a <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">series of blogs</a> introducing jQuery Templates...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/MuT9YPfvOro\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/3709530129956699146/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html#comment-form") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/3709530129956699146?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/3709530129956699146?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/MuT9YPfvOro/from-microsoft-to-open-source.html") (title . "From Microsoft to Open Source"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "5") (feedburner:origLink nil "http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html")) (entry ((gd:etag . "W/\"D0EGRX8_eyp7ImA9Wx5WEkU.\"")) (id nil "tag:blogger.com,1999:blog-3627888979577168137.post-1009219366886146159") (published nil "2010-09-20T18:10:00.000-07:00") (updated nil "2010-09-23T16:47:04.143-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2010-09-23T16:47:04.143-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "me"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "life"))) (title nil "Dancing with Data") (content ((type . "html")) "Well, finally, this blog will start. After so long always planning to start a blog, but never actually doing so, now, my current work on jQuery templates is reaching the point where I really can't 'hide' any longer! <br />
<br />
The immediate purpose of this blog, then, will be to share with others what I feel to be the really rich potential of building dynamic Web applications using client-side templates, and in particular, the <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a> I have been working on these past four months or so. But more broadly, I hope to share aspects of my <i>\"Dancing with Data\"</i> journey that I think may be interesting to others, or on which I would love to get feedback. <br />
<h4>




Why \"Dancing with Data\"?</h4>
I referred to my<i> \"Dancing with Data\"</i> journey, and in fact my journey through life has so often I feel drawn me into a fascination with apparent opposites. Dance and Data. Order and Chaos, Mathematics and Music, Science and Spirituality.<br />
<br />
I studied mathematics at college, went on to do research studies in theoretical physics (actually<a href=\"http://en.wikipedia.org/wiki/Twistor_Theory\"> twistor theory</a>) under <a href=\"http://en.wikipedia.org/wiki/Roger_Penrose\">Roger Penrose</a>, then, rather than submit my doctoral thesis, went off in a different direction, getting involved in working in experimental theater and voice work, with the <a href=\"http://en.wikipedia.org/wiki/Roy_Hart\">Roy Hart Theatre</a>, and soon after, moving from the UK to France with the theater company, and also playing clarinet and composing music for theater performances.<br />
<br />
Then, some time later, music took me back to mathematics, in a sense: For a music composition I was working on, I got my first music software, sampling keyboard, and so on, and from there started to teach myself programming, and began to develop my own music software tools for composition and real-time improvisation. And basically it was music that took me into the world of software development, and ultimately to becoming a professional developer.<br />
<br />
So from there, it was \"data\" too that fascinated me. Not so much data itself, but data-driven applications and UI. In a sense, life itself is data-driven, if you think about genomes and DNA sequences, for example. Yet within that 'prescriptive' concept, so much richness and 'innovation', coming, as it were, from the meeting of chaos with order, through mutations and selection, with the interplay between gene expression and environmental factors. I would almost say that life itself, in fact, is a kind of dance with data.<br />
<br />
Right at the beginning of the emergence of XML I created a client-side (in the browser) declarative stylesheet language for transforming XML data fetched from the server, into HTML. This led me to become a member of the XSLT working group on the W3C. - And later, to join Microsoft, where I was a member of the team which created InfoPath before, later, joining the ASP.NET team. And most recently, it led me to be involved in working with the open source community and with jQuery, once again exploring this interplay between data and UI, where the user too is a player, and the result is an interactive responsive application; where&nbsp;the user, too, if you like, is 'dancing with the data'.<br />
<h4>




Opposites</h4>
Opposites then, but through that opposing dialectic, the richness of the interplay. I feel as if my contribution is about bringing together these opposites. Facilitating, in some way. Using my own logical analytic capabilities, but following at the same time some kind of intuitive path, a gut feeling, and seeking the innovative richness that can occur when the goal is not just to compete, or to emulate, (or, dare I say it - in&nbsp;some cases at least - to copy), the competition - rather, the goal is to follow what seems right, what seems to make sense, what seems to be suggested by the underlying patterns, what seems to fit the user need.<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/fFMBYqcbR-E\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/1009219366886146159/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/dancing-with-data.html#comment-form") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1009219366886146159?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1009219366886146159?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/fFMBYqcbR-E/dancing-with-data.html") (title . "Dancing with Data"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "0") (feedburner:origLink nil "http://www.borismoore.com/2010/09/dancing-with-data.html")))) ("Approaching Beta: What's changing in JsRender and JsViews" "<div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">Major update to &nbsp;JsRender and JsViews</b></span></div><span class=\"Apple-style-span\"><span class=\"Apple-style-span\">In <a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\" target=\"_blank\">previous posts</a> and elsewhere, I had set the goal of reaching beta for JsRender at the end of February. A</span><span style=\"font-size: 11pt;\">&nbsp;major update has just been committed to</span><span style=\"font-size: 11pt;\">&nbsp;</span><a href=\"https://github.com/BorisMoore\" style=\"font-size: 11pt;\" target=\"_blank\">GitHub</a>&nbsp;for both JsRender and JsViews, which is effectively a beta candidate for JsRender.<br />
<span style=\"font-size: 11pt;\"><br />
This update brings a large number of API changes, new features, and improvements, to both JsRender and JsViews. It follows quite a period of apparent silence on GitHub (as far as commits are concerned), which left some folks with the impression that the project may have become inactive. The truth is quite the&nbsp;</span><span style=\"font-size: 11pt;\">opposite. JsRender and JsViews are&nbsp;</span><span style=\"font-size: 11pt;\">(in my view!)</span><span style=\"font-size: 11pt;\">&nbsp;</span><span style=\"font-size: 11pt;\">alive and well and growing apace...</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">So why the silence? In working on the new bits, I had to address the fact that the beta API design I was aiming for would be breaking for many users. Not a big deal usually for alpha software, but in the case of JsRender and JsViews there has been quite a lot of adoption already, so I wanted to avoid causing too much pain with a series of breaking commits. I decided to work on a single breaking update intended to provide a one-step transition to a beta candidate for JsRender (or at least a candidate for a stabl</span><span style=\"font-size: 11pt;\">e beta API)</span><span style=\"font-size: 11pt;\">, and also introduce much of the future stable beta API for JsViews.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">That update has taken a long time to complete, since it is a major rewrite not only of JsRender but also JsViews... The new bits for JsRender have been nearly ready for quite a while now, but the integration between JsViews and JsRender meant also moving JsViews a long way towards its future beta version. That way current users of JsViews can also port their apps to the new JsRender.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">What's changed?</b><br />
<span style=\"font-size: 11pt;\">This post provides a guide through the changes, and&nbsp;</span><span style=\"font-size: 11pt;\">is primarily intended to</span><span style=\"font-size: 11pt;\">&nbsp;help existing users of JsViews or JsRender to move to the new version.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">It can also be helpful to first-time adopters, but bear in mind that this is&nbsp;</span><span style=\"font-size: 11pt;\">still not quite the official beta, so documentation is limited. I hope to provide more documentation (or update this post) as we move to the official beta for JsRender (fairly soon) and JsViews (probably end of April or early May...). In the meantime, take a look too at all the&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">live samples</a>&nbsp;and the corresponding code for&nbsp;<a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">JsViews</a>&nbsp;and&nbsp;<a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">JsRender</a>.</span></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\"><br class=\"Apple-interchange-newline\" />JsRender: principal changes</b></span></div><ul><li><b style=\"font-family: Calibri; font-size: 15px;\">{{: ...}} and {{&gt; ...}} tags:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;The basic tag for outputting data values,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{=some.data.path}},</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;is now&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:some.data.path}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, and supports converter functions, and almost any javascript expression, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{myConverter:someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.<br />
It is&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px; font-weight: bold;\">not</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;HTML-encoded by default.<br />
To HTML-encode, use the tag&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{&gt;someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Block tags and inline tags:&nbsp;</b><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">The syntax for block/inline tags is now similar to HTML element syntax in the use of the&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">'/'&nbsp;</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">character:</span></span><ul><li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag is written</span></span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;{{myBlockTag ...}} ... {{/myBlocktag}}</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A non-block (self-closing, or inline) tag is written&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">{{myInlineTag/}}.</i></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag can become an inline tag if it references a template as content:</span></span><span style=\"font-family: Calibri; font-size: 15px;\"><br />
<i>{{myBlockTag ... tmpl=\"myNamedTemplate\" /}}</i>.</span></li>
</ul></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>{{#each}} tag is now {{for}}:</b></span>&nbsp;<span style=\"font-family: Calibri; font-size: 15px;\">There was some confusion around the&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{each ...}}&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">tag, in that the name suggested that it only worked as an iterator over an array as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{#each myArray}}...{{/each}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. In fact it worked also against singleton data objects, and this is made more intuitive by renaming it to&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for ...}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. This means you can write&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myArray}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, but for other scenarios you might also write</span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myObject}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, which will render against <i>myObject</i> as current data item (data context) for the nested content</span><i style=\"font-family: Calibri; font-size: 15px;\">.</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Expressions within template tags:&nbsp;</b>JsRender template tags now support almost any JavaScript expression (and also allow parens, to any depth).<br />
For example, you can write:&nbsp;&nbsp;<i>{{if &nbsp;price &gt; 3 &amp;&amp; price &lt; (maxPrice - 10)}}Special deal{{/if}}.</i><br />
However, unlike with jQuery Templates, the expressions are evaluated within a parsing and execution context which precludes accessing global variables or running any code which arbitrarily assigns or modifies data or state. Only template data properties/methods and registered helper functions/parameters can be accessed.&nbsp;</span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b><b>View properties syntax:&nbsp;</b><span style=\"font-weight: normal;\">To access view properties, such as parent, the syntax is now</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">#parent.</i></b></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b><b>$itemNumber is now #index:&nbsp;</b><span style=\"font-weight: normal;\">There is now a zero-based index, identical to the index on view objects when using JsViews. This change is thanks to expression support which has made getting a 1-based index very easy, as in:</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">{{:#index + 1}}</i><span style=\"font-weight: normal;\">.</span></b></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Helper functions:</b><span style=\"font-weight: normal;\">&nbsp;There is now a single concept of a helper function, which can be provided either via the <i>options</i> parameter in the&nbsp;</span><i style=\"font-weight: normal;\">$.render</i><span style=\"font-weight: normal;\">&nbsp;(or the&nbsp;</span><i style=\"font-weight: normal;\">$.link</i><span style=\"font-weight: normal;\">&nbsp;method, if using JsViews), or by registering using the&nbsp;</span><i style=\"font-weight: normal;\">$.views.helpers()</i><span style=\"font-weight: normal;\">&nbsp;API call.<br />
In either case, a registered&nbsp;helper function&nbsp;<b><span style=\"font-weight: normal;\"><i>myHelper(...)&nbsp;</i></span></b>will be accessed within the template using a simpler syntax than before:&nbsp;<i>~myHelper(...)</i>, rather than&nbsp;<i>$ctx.myHelper(...).&nbsp;</i><br />
F</span></b></span><b style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-weight: normal;\">or example, you can write&nbsp;<i>{{:~myFullNameHelper(firstName, lastName)}}.</i></span></b></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Template parameters:&nbsp;</b><span style=\"font-family: Calibri; font-size: 15px;\">In addition to helper functions, template parameters can be passed in with <i>options</i>&nbsp;or registered using <i>$.views.helpers()</i>&nbsp;- and then accessed by the same template syntax as helper functions, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:~myParameter}}</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Aliasing variables for use in nested contexts:</b><span style=\"font-weight: normal;\">&nbsp;If you want to access the data in a parent context, you can now provide a variable (accessed like a&nbsp;<span style=\"background-color: white; color: #1f3244; line-height: 20px; text-align: left;\">template</span>&nbsp;parameter) which will be available within nested context. For example:&nbsp;</span><i style=\"font-weight: normal;\">{{for lineItems ~orderTitle=orderInfo.title}}...{{:~orderTitle}}...{{/for}}</i></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registration APIs:</b>&nbsp;Registering of helper functions, converter functions and custom tags each use an equivalent API pattern:&nbsp;<i>$.<b><span style=\"font-weight: normal;\">views.</span></b>helpers()</i>,&nbsp;<i>$.views.converters()</i>,&nbsp;<i>$.views.tags()</i>.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registering/compiling templates:</b>&nbsp;This uses a similar API,&nbsp;<i>$.templates()</i>, which also allows defining template properties and resources (below).</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>\"Intellisense-friendly\" APIs for rendering:</b> &nbsp;New APIs are provided which are convenient for intellisense. For example, you can now write:&nbsp;</span><span style=\"font-family: Calibri;\"><i style=\"font-size: 15px;\">$.render.detailsTmpl( person );&nbsp;</i></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Template resources and settings:</b> Registering templates now supports specifying individual settings for the template, and registering resources such as helpers, converters, other templates, etc. so that they are available only in the context of the registered template, and are not exposed globally to other templates.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Layout templates: </b>A template may have a setting: <i>layout: true. </i>This will make it&nbsp;render just once, independently of whether the data supplied is an array, <i>null</i>, <i>undefined</i>, <i>false</i>, or any other data value. A <i>{{for}} </i>tag within the template will then render against the data in the normal way.</span></span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Debug setting:</b><span style=\"font-family: Calibri; font-size: 15px;\"> If a compiled template has the setting&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">debug: true,</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;a <i>debugger; </i>statement will be&nbsp;inserted at the beginning of the compiled template function. This makes debugging declarative templates easier.</span><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Unit tests:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp; JsRender&nbsp;now includes unit tests.</span></li>
</ul><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">JsViews: principal changes</b></span></div><ul><li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Views:&nbsp;</b>Previously, both JsRender and JsViews had a concept of a view hierarchy, but the two were distinct. Now a single view hierarchy is created during rendering of templates (and nested templates) and the same view hierarchy is maintained (but augmented with additional methods or properties) during data linking by JsViews.&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Declarative data binding:&nbsp;</b><i style=\"font-family: Calibri; font-size: 15px;\">data-from</i><span style=\"font-family: Calibri; font-size: 15px;\">,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-getfrom</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;and&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-to</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;are now consolidated into a single data binding attribute:&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-link</i><span style=\"font-family: Calibri; font-size: 15px;\">. This provides for more concise and simpler data binding declarations that support both one-way and two-way binding. See the samples for different use-cases, including binding to multiple target attributes on the same HTML element.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Data binding expressions:&nbsp;</b>Data binding expressions are evaluated according to the same contextual and parsing rules as template tag expressions. They can access exactly the same user-registered helper functions, template parameters, or converter functions that are available to template tag expressions - whether&nbsp;<b><span style=\"font-family: Calibri; font-weight: normal;\"><b><span style=\"font-weight: normal;\">registered using&nbsp;<i>$.views.helpers</i>, or passed in with the <i>options </i>parameter in a&nbsp;</span><i style=\"font-weight: normal;\">render()</i><span style=\"font-weight: normal;\">&nbsp;call</span></b></span></b>. In addition, helper functions and template parameters can be passed in with the <i>options</i> parameter of any<i> link()</i> call.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Automatic dependency detection</b>&nbsp;:&nbsp;</b> In data binding expressions it is no longer necessary to put square brackets in paths to specify data-binding dependencies.<br />
<i>&lt;input data-getfrom=\"shipping.address[street]\" data-to=\" shipping.address[street]&nbsp;\" /&gt;&nbsp;</i>is now written:<br />
<i><i>&lt;</i>input data-link=\"shipping.address.street\"&nbsp;/&gt;</i><br />
This opens the way to supporting&nbsp;<i>[]</i>&nbsp;syntax for array or property accessors. </span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-family: Calibri;\"><b>\"Intellisense-friendly\" APIs for linking:</b>&nbsp; As with JsRender, JsViews now provides new APIs which are convenient for intellisense, such as</span></span><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">: &nbsp;<i>$.link.movieTmpl( \"#movieList\", movies );</i></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Disabling linking when rendering a template:</b> If JsViews is loaded, rendered template were previously automatically data-linked. It is now possible to set <i>link: false</i>&nbsp;on a template, or as an option in the render call, or as a tag property: <i>{{for link=false}}</i>, to switch off data linking within a rendered template.<br />
This is useful, for example, if you want to include template tags within attribute markup, and suppress JsViews HTML comment annotations that were automatically inserted for data-linking purposes.</span></li>
</ul><div><b style=\"font-family: Calibri; font-size: 11pt;\">Missing, or not yet available features</b></div></div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul><li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Programmatic data linking:&nbsp;</b></span><span style=\"font-family: Calibri; font-size: 15px;\">Programmatic data link APIs such as <i>addLink</i> have been removed.&nbsp;</span><span style=\"font-family: Calibri; font-size: 15px;\">(They will probably return in modified form for JsViews beta)</span></li>
<li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Unit tests:</b><span style=\"font-family: Calibri;\">&nbsp; JsViews is not so close to beta as JsRender, and does not yet include unit tests. They will be added before it reaches beta.&nbsp;&nbsp;</span></span></li>
</ul></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><b>Performance and code size</b><br />
In spite of the many new features, total minified code size for JsViews plus JsRender is similar to the previous update, and performance is slightly better. A performance test page is provided<span style=\"font-size: 11pt;\">.</span><br />
<br />
<b style=\"font-size: 11pt;\">Specific examples of porting to the current design</b><br />
The samples available at <a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsrender</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">here</a>) and at <a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsviews</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">here</a>) have been changed where necessary to work with current API calls and declarative syntax. In some cases there are new features available which would have provided a more elegant approach to the scenario shown, but the samples have generally been changed in a minimalistic way, to illustrate how to port to the new version. (More samples showing new features will be added at a later point, along with other documentation).<b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">And from here?</b></div><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\">The plan is to wait for some feedback or bug reports on this new update, before deciding whether to label this version of JsRender as the official beta. Once it has become beta, I hope to progressively add additional documentation<span style=\"font-size: 11pt;\">.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<span style=\"font-size: 11pt;\">In the meantime I will continue to work on moving JsViews towards beta. This may still take a while, since there are some significant changes and improvements in the pipeline. My hope is that it will be available late April or early May...&nbsp;</span><br />
<br />
</div></div></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/WP2M_E4Kl5Y\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/1815998073923523467/comments/default" (20310 39025) old 1 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-1815998073923523467") (published nil "2012-03-06T15:04:00.001-08:00") (updated nil "2012-03-06T15:06:25.413-08:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2012-03-06T15:06:25.413-08:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "Approaching Beta: What's changing in JsRender and JsViews") (content ((type . "html")) "<div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">Major update to &nbsp;JsRender and JsViews</b></span></div><span class=\"Apple-style-span\"><span class=\"Apple-style-span\">In <a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\" target=\"_blank\">previous posts</a> and elsewhere, I had set the goal of reaching beta for JsRender at the end of February. A</span><span style=\"font-size: 11pt;\">&nbsp;major update has just been committed to</span><span style=\"font-size: 11pt;\">&nbsp;</span><a href=\"https://github.com/BorisMoore\" style=\"font-size: 11pt;\" target=\"_blank\">GitHub</a>&nbsp;for both JsRender and JsViews, which is effectively a beta candidate for JsRender.<br />
<span style=\"font-size: 11pt;\"><br />
This update brings a large number of API changes, new features, and improvements, to both JsRender and JsViews. It follows quite a period of apparent silence on GitHub (as far as commits are concerned), which left some folks with the impression that the project may have become inactive. The truth is quite the&nbsp;</span><span style=\"font-size: 11pt;\">opposite. JsRender and JsViews are&nbsp;</span><span style=\"font-size: 11pt;\">(in my view!)</span><span style=\"font-size: 11pt;\">&nbsp;</span><span style=\"font-size: 11pt;\">alive and well and growing apace...</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">So why the silence? In working on the new bits, I had to address the fact that the beta API design I was aiming for would be breaking for many users. Not a big deal usually for alpha software, but in the case of JsRender and JsViews there has been quite a lot of adoption already, so I wanted to avoid causing too much pain with a series of breaking commits. I decided to work on a single breaking update intended to provide a one-step transition to a beta candidate for JsRender (or at least a candidate for a stabl</span><span style=\"font-size: 11pt;\">e beta API)</span><span style=\"font-size: 11pt;\">, and also introduce much of the future stable beta API for JsViews.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">That update has taken a long time to complete, since it is a major rewrite not only of JsRender but also JsViews... The new bits for JsRender have been nearly ready for quite a while now, but the integration between JsViews and JsRender meant also moving JsViews a long way towards its future beta version. That way current users of JsViews can also port their apps to the new JsRender.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">What's changed?</b><br />
<span style=\"font-size: 11pt;\">This post provides a guide through the changes, and&nbsp;</span><span style=\"font-size: 11pt;\">is primarily intended to</span><span style=\"font-size: 11pt;\">&nbsp;help existing users of JsViews or JsRender to move to the new version.</span><span style=\"font-size: 11pt;\"><br />
</span><br />
<span style=\"font-size: 11pt;\">It can also be helpful to first-time adopters, but bear in mind that this is&nbsp;</span><span style=\"font-size: 11pt;\">still not quite the official beta, so documentation is limited. I hope to provide more documentation (or update this post) as we move to the official beta for JsRender (fairly soon) and JsViews (probably end of April or early May...). In the meantime, take a look too at all the&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">live samples</a>&nbsp;and the corresponding code for&nbsp;<a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">JsViews</a>&nbsp;and&nbsp;<a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">JsRender</a>.</span></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\"><br class=\"Apple-interchange-newline\" />JsRender: principal changes</b></span></div><ul><li><b style=\"font-family: Calibri; font-size: 15px;\">{{: ...}} and {{&gt; ...}} tags:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;The basic tag for outputting data values,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{=some.data.path}},</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;is now&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:some.data.path}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, and supports converter functions, and almost any javascript expression, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{myConverter:someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.<br />
It is&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px; font-weight: bold;\">not</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;HTML-encoded by default.<br />
To HTML-encode, use the tag&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{&gt;someExpression}}</i><span style=\"font-family: Calibri; font-size: 15px;\">.</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Block tags and inline tags:&nbsp;</b><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">The syntax for block/inline tags is now similar to HTML element syntax in the use of the&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">'/'&nbsp;</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">character:</span></span><ul><li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag is written</span></span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;{{myBlockTag ...}} ... {{/myBlocktag}}</i><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A non-block (self-closing, or inline) tag is written&nbsp;</span></span><i style=\"font-family: Calibri; font-size: 15px;\">{{myInlineTag/}}.</i></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">A block tag can become an inline tag if it references a template as content:</span></span><span style=\"font-family: Calibri; font-size: 15px;\"><br />
<i>{{myBlockTag ... tmpl=\"myNamedTemplate\" /}}</i>.</span></li>
</ul></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>{{#each}} tag is now {{for}}:</b></span>&nbsp;<span style=\"font-family: Calibri; font-size: 15px;\">There was some confusion around the&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{each ...}}&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">tag, in that the name suggested that it only worked as an iterator over an array as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{#each myArray}}...{{/each}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. In fact it worked also against singleton data objects, and this is made more intuitive by renaming it to&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for ...}}</i><span style=\"font-family: Calibri; font-size: 15px;\">. This means you can write&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myArray}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, but for other scenarios you might also write</span><i style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{for myObject}}...{{/for}}</i><span style=\"font-family: Calibri; font-size: 15px;\">, which will render against <i>myObject</i> as current data item (data context) for the nested content</span><i style=\"font-family: Calibri; font-size: 15px;\">.</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Expressions within template tags:&nbsp;</b>JsRender template tags now support almost any JavaScript expression (and also allow parens, to any depth).<br />
For example, you can write:&nbsp;&nbsp;<i>{{if &nbsp;price &gt; 3 &amp;&amp; price &lt; (maxPrice - 10)}}Special deal{{/if}}.</i><br />
However, unlike with jQuery Templates, the expressions are evaluated within a parsing and execution context which precludes accessing global variables or running any code which arbitrarily assigns or modifies data or state. Only template data properties/methods and registered helper functions/parameters can be accessed.&nbsp;</span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b><b>View properties syntax:&nbsp;</b><span style=\"font-weight: normal;\">To access view properties, such as parent, the syntax is now</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">#parent.</i></b></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b><b>$itemNumber is now #index:&nbsp;</b><span style=\"font-weight: normal;\">There is now a zero-based index, identical to the index on view objects when using JsViews. This change is thanks to expression support which has made getting a 1-based index very easy, as in:</span><span style=\"font-weight: normal;\">&nbsp;</span><i style=\"font-weight: normal;\">{{:#index + 1}}</i><span style=\"font-weight: normal;\">.</span></b></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Helper functions:</b><span style=\"font-weight: normal;\">&nbsp;There is now a single concept of a helper function, which can be provided either via the <i>options</i> parameter in the&nbsp;</span><i style=\"font-weight: normal;\">$.render</i><span style=\"font-weight: normal;\">&nbsp;(or the&nbsp;</span><i style=\"font-weight: normal;\">$.link</i><span style=\"font-weight: normal;\">&nbsp;method, if using JsViews), or by registering using the&nbsp;</span><i style=\"font-weight: normal;\">$.views.helpers()</i><span style=\"font-weight: normal;\">&nbsp;API call.<br />
In either case, a registered&nbsp;helper function&nbsp;<b><span style=\"font-weight: normal;\"><i>myHelper(...)&nbsp;</i></span></b>will be accessed within the template using a simpler syntax than before:&nbsp;<i>~myHelper(...)</i>, rather than&nbsp;<i>$ctx.myHelper(...).&nbsp;</i><br />
F</span></b></span><b style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-weight: normal;\">or example, you can write&nbsp;<i>{{:~myFullNameHelper(firstName, lastName)}}.</i></span></b></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Template parameters:&nbsp;</b><span style=\"font-family: Calibri; font-size: 15px;\">In addition to helper functions, template parameters can be passed in with <i>options</i>&nbsp;or registered using <i>$.views.helpers()</i>&nbsp;- and then accessed by the same template syntax as helper functions, as in&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">{{:~myParameter}}</i></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Aliasing variables for use in nested contexts:</b><span style=\"font-weight: normal;\">&nbsp;If you want to access the data in a parent context, you can now provide a variable (accessed like a&nbsp;<span style=\"background-color: white; color: #1f3244; line-height: 20px; text-align: left;\">template</span>&nbsp;parameter) which will be available within nested context. For example:&nbsp;</span><i style=\"font-weight: normal;\">{{for lineItems ~orderTitle=orderInfo.title}}...{{:~orderTitle}}...{{/for}}</i></b></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registration APIs:</b>&nbsp;Registering of helper functions, converter functions and custom tags each use an equivalent API pattern:&nbsp;<i>$.<b><span style=\"font-weight: normal;\">views.</span></b>helpers()</i>,&nbsp;<i>$.views.converters()</i>,&nbsp;<i>$.views.tags()</i>.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Registering/compiling templates:</b>&nbsp;This uses a similar API,&nbsp;<i>$.templates()</i>, which also allows defining template properties and resources (below).</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>\"Intellisense-friendly\" APIs for rendering:</b> &nbsp;New APIs are provided which are convenient for intellisense. For example, you can now write:&nbsp;</span><span style=\"font-family: Calibri;\"><i style=\"font-size: 15px;\">$.render.detailsTmpl( person );&nbsp;</i></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Template resources and settings:</b> Registering templates now supports specifying individual settings for the template, and registering resources such as helpers, converters, other templates, etc. so that they are available only in the context of the registered template, and are not exposed globally to other templates.</span></span></li>
<li><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\"><b>Layout templates: </b>A template may have a setting: <i>layout: true. </i>This will make it&nbsp;render just once, independently of whether the data supplied is an array, <i>null</i>, <i>undefined</i>, <i>false</i>, or any other data value. A <i>{{for}} </i>tag within the template will then render against the data in the normal way.</span></span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Debug setting:</b><span style=\"font-family: Calibri; font-size: 15px;\"> If a compiled template has the setting&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">debug: true,</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;a <i>debugger; </i>statement will be&nbsp;inserted at the beginning of the compiled template function. This makes debugging declarative templates easier.</span><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Unit tests:</b><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp; JsRender&nbsp;now includes unit tests.</span></li>
</ul><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><b style=\"font-size: 11pt;\">JsViews: principal changes</b></span></div><ul><li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Views:&nbsp;</b>Previously, both JsRender and JsViews had a concept of a view hierarchy, but the two were distinct. Now a single view hierarchy is created during rendering of templates (and nested templates) and the same view hierarchy is maintained (but augmented with additional methods or properties) during data linking by JsViews.&nbsp;</span></li>
<li><b style=\"font-family: Calibri; font-size: 15px;\">Declarative data binding:&nbsp;</b><i style=\"font-family: Calibri; font-size: 15px;\">data-from</i><span style=\"font-family: Calibri; font-size: 15px;\">,&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-getfrom</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;and&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-to</i><span style=\"font-family: Calibri; font-size: 15px;\">&nbsp;are now consolidated into a single data binding attribute:&nbsp;</span><i style=\"font-family: Calibri; font-size: 15px;\">data-link</i><span style=\"font-family: Calibri; font-size: 15px;\">. This provides for more concise and simpler data binding declarations that support both one-way and two-way binding. See the samples for different use-cases, including binding to multiple target attributes on the same HTML element.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Data binding expressions:&nbsp;</b>Data binding expressions are evaluated according to the same contextual and parsing rules as template tag expressions. They can access exactly the same user-registered helper functions, template parameters, or converter functions that are available to template tag expressions - whether&nbsp;<b><span style=\"font-family: Calibri; font-weight: normal;\"><b><span style=\"font-weight: normal;\">registered using&nbsp;<i>$.views.helpers</i>, or passed in with the <i>options </i>parameter in a&nbsp;</span><i style=\"font-weight: normal;\">render()</i><span style=\"font-weight: normal;\">&nbsp;call</span></b></span></b>. In addition, helper functions and template parameters can be passed in with the <i>options</i> parameter of any<i> link()</i> call.</span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b><b>Automatic dependency detection</b>&nbsp;:&nbsp;</b> In data binding expressions it is no longer necessary to put square brackets in paths to specify data-binding dependencies.<br />
<i>&lt;input data-getfrom=\"shipping.address[street]\" data-to=\" shipping.address[street]&nbsp;\" /&gt;&nbsp;</i>is now written:<br />
<i><i>&lt;</i>input data-link=\"shipping.address.street\"&nbsp;/&gt;</i><br />
This opens the way to supporting&nbsp;<i>[]</i>&nbsp;syntax for array or property accessors. </span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><span style=\"font-family: Calibri;\"><b>\"Intellisense-friendly\" APIs for linking:</b>&nbsp; As with JsRender, JsViews now provides new APIs which are convenient for intellisense, such as</span></span><span style=\"font-family: Calibri;\"><span style=\"font-size: 15px;\">: &nbsp;<i>$.link.movieTmpl( \"#movieList\", movies );</i></span></span></li>
<li><span style=\"font-family: Calibri; font-size: 15px;\"><b>Disabling linking when rendering a template:</b> If JsViews is loaded, rendered template were previously automatically data-linked. It is now possible to set <i>link: false</i>&nbsp;on a template, or as an option in the render call, or as a tag property: <i>{{for link=false}}</i>, to switch off data linking within a rendered template.<br />
This is useful, for example, if you want to include template tags within attribute markup, and suppress JsViews HTML comment annotations that were automatically inserted for data-linking purposes.</span></li>
</ul><div><b style=\"font-family: Calibri; font-size: 11pt;\">Missing, or not yet available features</b></div></div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul><li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Programmatic data linking:&nbsp;</b></span><span style=\"font-family: Calibri; font-size: 15px;\">Programmatic data link APIs such as <i>addLink</i> have been removed.&nbsp;</span><span style=\"font-family: Calibri; font-size: 15px;\">(They will probably return in modified form for JsViews beta)</span></li>
<li><span style=\"font-size: 11pt;\"><b style=\"font-family: Calibri;\">Unit tests:</b><span style=\"font-family: Calibri;\">&nbsp; JsViews is not so close to beta as JsRender, and does not yet include unit tests. They will be added before it reaches beta.&nbsp;&nbsp;</span></span></li>
</ul></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><b>Performance and code size</b><br />
In spite of the many new features, total minified code size for JsViews plus JsRender is similar to the previous update, and performance is slightly better. A performance test page is provided<span style=\"font-size: 11pt;\">.</span><br />
<br />
<b style=\"font-size: 11pt;\">Specific examples of porting to the current design</b><br />
The samples available at <a href=\"https://github.com/BorisMoore/jsrender/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsrender</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">here</a>) and at <a href=\"https://github.com/BorisMoore/jsviews/tree/master/demos\" target=\"_blank\">github.com/BorisMoore/jsviews</a>&nbsp;(live <a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">here</a>) have been changed where necessary to work with current API calls and declarative syntax. In some cases there are new features available which would have provided a more elegant approach to the scenario shown, but the samples have generally been changed in a minimalistic way, to illustrate how to port to the new version. (More samples showing new features will be added at a later point, along with other documentation).<b style=\"font-size: 11pt;\"><br />
</b><br />
<b style=\"font-size: 11pt;\">And from here?</b></div><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\">The plan is to wait for some feedback or bug reports on this new update, before deciding whether to label this version of JsRender as the official beta. Once it has become beta, I hope to progressively add additional documentation<span style=\"font-size: 11pt;\">.</span><b style=\"font-size: 11pt;\"><br />
</b><br />
<span style=\"font-size: 11pt;\">In the meantime I will continue to work on moving JsViews towards beta. This may still take a while, since there are some significant changes and improvements in the pipeline. My hope is that it will be available late April or early May...&nbsp;</span><br />
<br />
</div></div></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/WP2M_E4Kl5Y\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/1815998073923523467/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html#comment-form") (title . "210 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1815998073923523467?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1815998073923523467?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/WP2M_E4Kl5Y/approaching-beta-whats-changing-in_06.html") (title . "Approaching Beta: What's changing in JsRender and JsViews"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "210") (feedburner:origLink nil "http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html"))) ("jQuery Templates and JsViews: The Roadmap" "<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>JsRender is now close to beta, and JsViews has many new features which also bring it closer to beta.<br/>See <a href=\"http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html\">Approaching Beta: What's changing in JsRender and JsViews</a> for details on the latest changes.<br />
</div><br />
<div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-weight: bold;\"><span class=\"Apple-style-span\" style=\"font-weight: normal;\"></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"><b>From jQuery Templates to JsViews</b></span></span></div><div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div><span class=\"Apple-style-span\" style=\"font-weight: normal;\">This post provides some details and some context on the relationship between jQuery Templates, JsRender and JsViews, and provides information about the current roadmap.</span><br />
<div style=\"font-weight: bold;\"></div></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"></span><br />
<div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\">History of jQuery Templates</span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div>jQuery Templates started out in March 2010, and went through a series of steps:</div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul style=\"font-family: Calibri; font-size: 11pt;\"><li>March 2010:&nbsp;John Resig posted <a href=\"https://github.com/jquery/jquery-tmpl/commit/73168f499e80ddcc172cd1389e0be66cfd00b25a\">a prototype</a></li>
<li>from May 2010 onwards:&nbsp;I worked on a fork of John's prototype (as did many others)</li>
<li>October 2010:&nbsp;My fork was pulled into the jQuery Templates repo, and it was decided to make this a <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Official Plugin</a>: &nbsp;(along with the Globalization and Data Link plugins, created primarily by <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a>, also at Microsoft).&nbsp;</li>
<li>October 2010 - April 2011:&nbsp;I continued to iterate on the code on&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;- taking it to Beta1 then working towards Beta2.</li>
<li>April 2011:&nbsp;The jQuery Project decided to <a href=\"http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/\">change the status of official plugins</a>.&nbsp;From that point the version of jQuery Templates at <a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a> was owned by the jQuery UI team. I collaborated with jQuery UI on moving templates forward.&nbsp;</li>
<li>April 2011 onwards: jQuery UI decided to put&nbsp;&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;&nbsp;on hold - and asked me not to continue with fixes and updates under that repository. The plan was first to establish their templating requirements, and from there move on to determining what template engine they would use.</li>
</ul></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Meanwhile: JsRender and JsViews</b><br />
At the same time (April 2011) I was working on an updated approach to jQuery Templates: <a href=\"https://github.com/BorisMoore/jsrender\">JsRender </a>and <a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a>.&nbsp;JsRender uses pure string-based rendering without any DOM (or even jQuery) dependency, and JsViews integrates JsRender templates with data linking, to provide data-driven templated views.&nbsp;&nbsp;I gave a&nbsp;<a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">preview</a>&nbsp;of this work at the April 2011 jQuery Conference.<br />
<br />
The jQuery UI team asked me to continue that ongoing development in my own repository rather than under the jQuery project. Meantime we collaborated on establishing design and feature requirements for templates in jQuery UI.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">More recently jQuery UI decided that they did not want to use the jQuery Template syntax for their future templating engine, and instead opted for a logicless syntax (or as I prefer to say, codeless - since there would still be <i>{{each}}</i> and <i>{{if}}</i> tags) similar to Mustache and Handlebars. This led me to develop a version of JsRender using that style of markup. The result is the JsRender template engine that I <a href=\"http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html\">showed</a> at the October jQuery Conference, which is considerably faster that jQuery Templates, and remains very flexible thanks to the ease and power of creating custom tags and helpers (which include some features not found in Handlebars or Mustache - such as chaining of tags, intermixing of named and positional parameters, postfixed encoding syntax etc.)<br />
<br />
Personally I had mixed feelings about the new codeless syntax. One big concern was that it will require porting of existing jQuery Template apps to the new syntax, and in the case where the templates include a lot of inline JavaScript expressions, it will mean either creating new custom tags, or falling back on the 'opt-in' <i>{{*... }}</i> tag for inline code.<br />
<br />
But on the positive side, it provides better separation of presentation and behavior, and includes some other new features and improvements that provide considerable advantages, including the ease of creating custom tags, and the improved performance. So finally I am pretty excited by the new approach and what it brings...</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Moving forwards with JsViews and JsRender</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">Currently JsViews and JsRender include <a href=\"http://borismoore.github.com/jsviews/demos/index.html\">a number of samples</a> which can provide the basis for using them already for front-end development. Although there is not yet any documentation as such, and there has been no publicity (until now), they are nevertheless already being used at the prototype level by some important sites (notably by Hotmail - who are about to go into production using JsViews). That said, I anticipate some changes in JsViews, so it may be better to wait a bit longer before doing too much development using the JsViews platform. JsRender on the other hand is I think getting close to a stable Beta-release API.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Templates in jQuery UI&nbsp;</b><br />
As far as jQuery UI is concerned, the current expectation is that jQuery UI will use JsRender templates, or at least use JsRender as the starting point for jQuery UI templates. No&nbsp; decision has been made yet on whether jQuery UI will use JsViews for data linking and binding. </div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Roadmap summary:</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><ul><li><b><a href=\"https://github.com/jquery/jquery-tmpl\">jQuery templates</a></b>: Will remain at Beta1, and be superseded by JsRender templates, and JsViews.</li>
<li><b><a href=\"https://github.com/BorisMoore/jsrender\">JsRender</a></b>: Soon move to Beta – then on to V1<br />
jQueryUI plan to use JsRender. (TBD whether it will migrate to jQuery project in GitHub...)</li>
<li><b><a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a></b>: Move to Beta (after JsRender) and then on to V1 …<br />
May also be used by jQueryUI</li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/w37vtXoiMCg\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/4390082775510320361/comments/default" (20310 49558) old 2 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-4390082775510320361") (published nil "2011-10-12T18:10:00.002-07:00") (updated nil "2012-03-06T18:01:58.478-08:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2012-03-06T18:01:58.478-08:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Templates and JsViews: The Roadmap") (content ((type . "html")) "<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>JsRender is now close to beta, and JsViews has many new features which also bring it closer to beta.<br/>See <a href=\"http://www.borismoore.com/2012/03/approaching-beta-whats-changing-in_06.html\">Approaching Beta: What's changing in JsRender and JsViews</a> for details on the latest changes.<br />
</div><br />
<div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><div style=\"font-weight: bold;\"><span class=\"Apple-style-span\" style=\"font-weight: normal;\"></span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"><b>From jQuery Templates to JsViews</b></span></span></div><div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div><span class=\"Apple-style-span\" style=\"font-weight: normal;\">This post provides some details and some context on the relationship between jQuery Templates, JsRender and JsViews, and provides information about the current roadmap.</span><br />
<div style=\"font-weight: bold;\"></div></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\"></span><br />
<div style=\"font-family: Calibri; font-size: 11pt; font-weight: bold; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman'; font-size: small;\">History of jQuery Templates</span></div><div style=\"font-family: Calibri; font-size: 11pt; margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"></div>jQuery Templates started out in March 2010, and went through a series of steps:</div><div style=\"margin-bottom: 0in; margin-left: 0in; margin-right: 0in; margin-top: 0in;\"><ul style=\"font-family: Calibri; font-size: 11pt;\"><li>March 2010:&nbsp;John Resig posted <a href=\"https://github.com/jquery/jquery-tmpl/commit/73168f499e80ddcc172cd1389e0be66cfd00b25a\">a prototype</a></li>
<li>from May 2010 onwards:&nbsp;I worked on a fork of John's prototype (as did many others)</li>
<li>October 2010:&nbsp;My fork was pulled into the jQuery Templates repo, and it was decided to make this a <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Official Plugin</a>: &nbsp;(along with the Globalization and Data Link plugins, created primarily by <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a>, also at Microsoft).&nbsp;</li>
<li>October 2010 - April 2011:&nbsp;I continued to iterate on the code on&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;- taking it to Beta1 then working towards Beta2.</li>
<li>April 2011:&nbsp;The jQuery Project decided to <a href=\"http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/\">change the status of official plugins</a>.&nbsp;From that point the version of jQuery Templates at <a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a> was owned by the jQuery UI team. I collaborated with jQuery UI on moving templates forward.&nbsp;</li>
<li>April 2011 onwards: jQuery UI decided to put&nbsp;&nbsp;<a href=\"https://github.com/jquery/jquery-tmpl\">jquery/jquery-tmpl</a>&nbsp;&nbsp;on hold - and asked me not to continue with fixes and updates under that repository. The plan was first to establish their templating requirements, and from there move on to determining what template engine they would use.</li>
</ul></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Meanwhile: JsRender and JsViews</b><br />
At the same time (April 2011) I was working on an updated approach to jQuery Templates: <a href=\"https://github.com/BorisMoore/jsrender\">JsRender </a>and <a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a>.&nbsp;JsRender uses pure string-based rendering without any DOM (or even jQuery) dependency, and JsViews integrates JsRender templates with data linking, to provide data-driven templated views.&nbsp;&nbsp;I gave a&nbsp;<a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">preview</a>&nbsp;of this work at the April 2011 jQuery Conference.<br />
<br />
The jQuery UI team asked me to continue that ongoing development in my own repository rather than under the jQuery project. Meantime we collaborated on establishing design and feature requirements for templates in jQuery UI.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">More recently jQuery UI decided that they did not want to use the jQuery Template syntax for their future templating engine, and instead opted for a logicless syntax (or as I prefer to say, codeless - since there would still be <i>{{each}}</i> and <i>{{if}}</i> tags) similar to Mustache and Handlebars. This led me to develop a version of JsRender using that style of markup. The result is the JsRender template engine that I <a href=\"http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html\">showed</a> at the October jQuery Conference, which is considerably faster that jQuery Templates, and remains very flexible thanks to the ease and power of creating custom tags and helpers (which include some features not found in Handlebars or Mustache - such as chaining of tags, intermixing of named and positional parameters, postfixed encoding syntax etc.)<br />
<br />
Personally I had mixed feelings about the new codeless syntax. One big concern was that it will require porting of existing jQuery Template apps to the new syntax, and in the case where the templates include a lot of inline JavaScript expressions, it will mean either creating new custom tags, or falling back on the 'opt-in' <i>{{*... }}</i> tag for inline code.<br />
<br />
But on the positive side, it provides better separation of presentation and behavior, and includes some other new features and improvements that provide considerable advantages, including the ease of creating custom tags, and the improved performance. So finally I am pretty excited by the new approach and what it brings...</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Moving forwards with JsViews and JsRender</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\">Currently JsViews and JsRender include <a href=\"http://borismoore.github.com/jsviews/demos/index.html\">a number of samples</a> which can provide the basis for using them already for front-end development. Although there is not yet any documentation as such, and there has been no publicity (until now), they are nevertheless already being used at the prototype level by some important sites (notably by Hotmail - who are about to go into production using JsViews). That said, I anticipate some changes in JsViews, so it may be better to wait a bit longer before doing too much development using the JsViews platform. JsRender on the other hand is I think getting close to a stable Beta-release API.</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Templates in jQuery UI&nbsp;</b><br />
As far as jQuery UI is concerned, the current expectation is that jQuery UI will use JsRender templates, or at least use JsRender as the starting point for jQuery UI templates. No&nbsp; decision has been made yet on whether jQuery UI will use JsViews for data linking and binding. </div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><br />
</div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><b>Roadmap summary:</b></div><div style=\"font-family: Calibri; font-size: 11.0pt; margin: 0in;\"><ul><li><b><a href=\"https://github.com/jquery/jquery-tmpl\">jQuery templates</a></b>: Will remain at Beta1, and be superseded by JsRender templates, and JsViews.</li>
<li><b><a href=\"https://github.com/BorisMoore/jsrender\">JsRender</a></b>: Soon move to Beta – then on to V1<br />
jQueryUI plan to use JsRender. (TBD whether it will migrate to jQuery project in GitHub...)</li>
<li><b><a href=\"https://github.com/BorisMoore/jsviews\">JsViews</a></b>: Move to Beta (after JsRender) and then on to V1 …<br />
May also be used by jQueryUI</li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/w37vtXoiMCg\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/4390082775510320361/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html#comment-form") (title . "77 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/4390082775510320361?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/4390082775510320361?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/w37vtXoiMCg/jquery-templates-and-jsviews-roadmap.html") (title . "jQuery Templates and JsViews: The Roadmap"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "77") (feedburner:origLink nil "http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html"))) ("JsViews presentation at jQuery Conference, Boston" "<b>Six months in stealth mode...</b><br />
My <a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">last blog entry</a> was six months ago, and concerned my jQuery Conference presentation in April 2011. Since then, no blog entries, but lots of activity on moving &nbsp;jQuery Templates forwards to the \"next generation\". It has been somewhat 'stealth mode' - since I wanted to stabilize the design and the code before drawing too much attention to it.&nbsp;That work has been progressing very well, and has now reached the point where I will gradually &nbsp;bring it out from 'under wraps'.<br />
<br />
<b>jQuery Conference Presentation</b><br />
The first step in that process just happened - another jQuery Conference presentation: I just returned from presenting on \"JsViews: Next-generation jQuery Templates and Data Link\" at the&nbsp;<a href=\"http://events.jquery.org/2011/boston/\">October 2011 jQuery Conference in Boston</a>.<br />
<br />
Here are the conference links:<br />
<ul><li><a href=\"http://www.slideshare.net/BorisMoore/jsviews-next-generation-jquery-templates\">Slides from the presentation</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/index.html\">Conference Demos</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/index.html\">Index of all demos</a></li>
<li><a href=\"https://github.com/BorisMoore/jsviews\">Code</a></li>
</ul>The presentation was very well received, and created some buzz on Twitter, as illustrated by these tweets:<br />
<ul><li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/thinksaydo\">thinksaydo</a> Think Say Do, LLC</span></b>: super excited about <a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a> and <a href=\"https://github.com/BorisMoore/jsviews\">github.com/BorisMoore/jsv…</a> being part of jQuery's future</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/rascalking\">rascalking</a> David Bonner</span></b>: looking forward to playing with jsrender/jsviews. feels really comfortable, coming from a django background. <a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/chinmaybijwe\">chinmaybijwe </a>Chinmay Bijwe</span></b>:&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a>&nbsp;: JSViews and JSRender look great! Want to try soon.</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/vinbrown2\">vinbrown2 </a>Vin Brown</span></b>: seems any previously stated (by me) similarity between jsViews and xslt were overstated. this is oozing coolness.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/weisjohn\">weisjohn </a>john weis</span></b>: coming from the Django template world, JsRender and JsViews are the &nbsp; &nbsp; &nbsp;hotness!&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom</a> Adam Backstrom</span></b>: Super easy to add new template tags to jsViews. Tags can be &nbsp; &nbsp; &nbsp;used in conditional template logic (if/else).&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom </a>Adam Backstrom</span></b>: Progressive enhancement in jsViews: render on the server, later apply a view to the DOM, get a view that is now observing for changes&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/shooley\">shooley</a> Shawn Hooley</span></b>: Excited about jsViews! Slick solution for dynamic rendering.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/addy_osmani\">addy_osmani </a>Addy Osmani</span></b>: Interesting next progression that's come out of the jQuery templatesproject: jsRender (no DOM/jQ dependence) -<a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/clayalouise\">clayalouise </a>clayalouise</span></b>: Love the design for JsViews! I've been looking for a better than knockoutjs&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/monkeysort\">monkeysort</a> Derek Meyer</span></b>: Great talk by Boris Moore on the jQuery Templates replacementJsViews. Could have used a longer time slot for a public launch.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/ScottRHuff\">ScottRHuff</a> Scott Huff</span></b>: Exciting and thought provoking talk from Boris Moore on JsViews&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/_jeffrose\">_jeffrose</a> Jeff Rose</span></b>: Wish Boris Moore's presentation on JsViews was longer. Looks very impressive.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
</ul>One aspect that triggered a lot of excitement and questions was progressive enhancement, using the same JsRender template on the server as on the client, and then activating the content in the client by calling $.link(). &nbsp;(<a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/11_server-rendered_client-activated.html\">See this demo</a>)<br />
<br />
<b>And now...</b><br />
<span class=\"Apple-style-span\">From this point I'll be working towards a documented Beta release - not too far away. More of that in an upcoming post on &nbsp;\"</span><span class=\"Apple-style-span\" style=\"background-color: white; color: #333333; font-family: &quot;trebuchet ms&quot;, verdana, arial, sans-serif; font-size: 13px; line-height: 18px;\"><a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a></span><span class=\"Apple-style-span\">\".</span><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/a8OjKeHHESQ\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/2450299268727821193/comments/default" (20140 22612) old 3 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-2450299268727821193") (published nil "2011-10-10T15:13:00.000-07:00") (updated nil "2011-10-29T12:47:32.153-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-29T12:47:32.153-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "JsViews presentation at jQuery Conference, Boston") (content ((type . "html")) "<b>Six months in stealth mode...</b><br />
My <a href=\"http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html\">last blog entry</a> was six months ago, and concerned my jQuery Conference presentation in April 2011. Since then, no blog entries, but lots of activity on moving &nbsp;jQuery Templates forwards to the \"next generation\". It has been somewhat 'stealth mode' - since I wanted to stabilize the design and the code before drawing too much attention to it.&nbsp;That work has been progressing very well, and has now reached the point where I will gradually &nbsp;bring it out from 'under wraps'.<br />
<br />
<b>jQuery Conference Presentation</b><br />
The first step in that process just happened - another jQuery Conference presentation: I just returned from presenting on \"JsViews: Next-generation jQuery Templates and Data Link\" at the&nbsp;<a href=\"http://events.jquery.org/2011/boston/\">October 2011 jQuery Conference in Boston</a>.<br />
<br />
Here are the conference links:<br />
<ul><li><a href=\"http://www.slideshare.net/BorisMoore/jsviews-next-generation-jquery-templates\">Slides from the presentation</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/index.html\">Conference Demos</a></li>
<li><a href=\"http://borismoore.github.com/jsviews/demos/index.html\">Index of all demos</a></li>
<li><a href=\"https://github.com/BorisMoore/jsviews\">Code</a></li>
</ul>The presentation was very well received, and created some buzz on Twitter, as illustrated by these tweets:<br />
<ul><li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/thinksaydo\">thinksaydo</a> Think Say Do, LLC</span></b>: super excited about <a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a> and <a href=\"https://github.com/BorisMoore/jsviews\">github.com/BorisMoore/jsv…</a> being part of jQuery's future</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/rascalking\">rascalking</a> David Bonner</span></b>: looking forward to playing with jsrender/jsviews. feels really comfortable, coming from a django background. <a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/chinmaybijwe\">chinmaybijwe </a>Chinmay Bijwe</span></b>:&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a>&nbsp;: JSViews and JSRender look great! Want to try soon.</li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/vinbrown2\">vinbrown2 </a>Vin Brown</span></b>: seems any previously stated (by me) similarity between jsViews and xslt were overstated. this is oozing coolness.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/weisjohn\">weisjohn </a>john weis</span></b>: coming from the Django template world, JsRender and JsViews are the &nbsp; &nbsp; &nbsp;hotness!&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom</a> Adam Backstrom</span></b>: Super easy to add new template tags to jsViews. Tags can be &nbsp; &nbsp; &nbsp;used in conditional template logic (if/else).&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/abackstrom\">abackstrom </a>Adam Backstrom</span></b>: Progressive enhancement in jsViews: render on the server, later apply a view to the DOM, get a view that is now observing for changes&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/shooley\">shooley</a> Shawn Hooley</span></b>: Excited about jsViews! Slick solution for dynamic rendering.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/addy_osmani\">addy_osmani </a>Addy Osmani</span></b>: Interesting next progression that's come out of the jQuery templatesproject: jsRender (no DOM/jQ dependence) -<a href=\"https://github.com/BorisMoore/jsrender\">github.com/BorisMoore/jsr…</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/clayalouise\">clayalouise </a>clayalouise</span></b>: Love the design for JsViews! I've been looking for a better than knockoutjs&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/monkeysort\">monkeysort</a> Derek Meyer</span></b>: Great talk by Boris Moore on the jQuery Templates replacementJsViews. Could have used a longer time slot for a public launch.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/ScottRHuff\">ScottRHuff</a> Scott Huff</span></b>: Exciting and thought provoking talk from Boris Moore on JsViews&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
<li><b><span class=\"Apple-style-span\" style=\"font-size: x-small;\"><a href=\"http://twitter.com/#!/_jeffrose\">_jeffrose</a> Jeff Rose</span></b>: Wish Boris Moore's presentation on JsViews was longer. Looks very impressive.&nbsp;<a href=\"http://twitter.com/#!/search?q=%23jqcon\">#jqcon</a></li>
</ul>One aspect that triggered a lot of excitement and questions was progressive enhancement, using the same JsRender template on the server as on the client, and then activating the content in the client by calling $.link(). &nbsp;(<a href=\"http://borismoore.github.com/jsviews/demos/jQueryConfDemosOct2011/11_server-rendered_client-activated.html\">See this demo</a>)<br />
<br />
<b>And now...</b><br />
<span class=\"Apple-style-span\">From this point I'll be working towards a documented Beta release - not too far away. More of that in an upcoming post on &nbsp;\"</span><span class=\"Apple-style-span\" style=\"background-color: white; color: #333333; font-family: &quot;trebuchet ms&quot;, verdana, arial, sans-serif; font-size: 13px; line-height: 18px;\"><a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a></span><span class=\"Apple-style-span\">\".</span><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/a8OjKeHHESQ\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/2450299268727821193/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html#comment-form") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2450299268727821193?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2450299268727821193?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/a8OjKeHHESQ/jsviews-presentation-at-jquery.html") (title . "JsViews presentation at jQuery Conference, Boston"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "0") (feedburner:origLink nil "http://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html"))) ("jQuery Bay Area Conference - presentation, meetings and movements" "<div class=\"MsoNormal\">I just got back from speaking at this jQuery Conference Bay Area Conference last weekend, so this is a quick blog to provide some links.</div><div class=\"MsoNormal\"><o:p></o:p></div><div class=\"MsoNormal\"><br />
</div><div class=\"MsoNormal\">This was the official jQuery Conference, which is held twice a year. So all the key members of the jQuery team and community were there. <br />
<ul><li>29&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/schedule/\" target=\"_blank\">presentations</a>&nbsp;over two days</li>
<li><span style=\"font-family: Symbol;\"><span style=\"font: normal normal normal 7pt/normal 'Times New Roman';\">&nbsp;</span></span>About 500 participants</li>
<li>Other presenters included John Resig, Yehuda Katz, Paul Irish, and others who you can see&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/speakers/\" target=\"_blank\">here</a></li>
</ul></div><div class=\"MsoNormal\"><b>My Presentation</b><br />
I spoke about “<i>Harnessing jQuery Templates and Data Link, to build dynamic data-driven browser apps</i>”.<br />
The presentation was in three sections:<br />
<ul><li>Discussion of App Scenarios for data and templates in the client, and example <a href=\"http://jquery.github.com/jquery-tmpl/demos/movies/PagesCore/movies.html\" target=\"_blank\">demo app</a></li>
<li>Templates today: <a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">walkthrough</a> of all the main features</li>
<li>Templates ‘tomorrow’: preview of current work on really fast responsive interactive client-side views, integrating jQuery Templates and Data Linking. (<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">Demo</a>)</li>
</ul><div>The slides are&nbsp;<span class=\"Apple-style-span\" style=\"color: #1f497d;\"><a href=\"http://www.slideshare.net/BorisMoore/harness-jquery-templates-and-data-link\" target=\"_blank\">here</a></span>.&nbsp;</div><div><br />
</div></div><div class=\"MsoListParagraph\" style=\"margin-left: 1.0in; mso-list: l1 level2 lfo2; text-indent: -.25in;\"><o:p></o:p></div><div class=\"MsoNormal\"><b>Meetings and movements</b></div><div class=\"MsoNormal\">I had some great meetings and discussions with other developers and open-source community members. Definitely declarative binding of templated views to observable data is ‘in the air’, and there is clearly a huge interest in related scenarios and patterns like client-side MVVM or MVC. We were already doing much of this in Microsoft AJAX Preview 6 with observable objects and arrays and declarative bindings in templates, but it was not known to many. My hope is that the current <a href=\"https://github.com/BorisMoore/jsviews\" target=\"_blank\">JsViews</a> integration of data link and templating we are working on will break new ground in this area, but this time within a simpler leaner approach, and in synergy with jQuery. People are looking for fast lightweight declarative frameworks of this kind.&nbsp;<o:p></o:p></div><br />
<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>I have published the demo pages above on GitHub as live pages, and have updated the links above to point to the new pages.<br />
<br />
The new content is as follows:<br />
<ul><li>Live demo pages of current jQuery Templates:&nbsp;<a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">jquery.github.com/jquery-tmpl/demos/step-by-step.html</a></li>
<li>Demo pages of preview work of pure string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">borismoore.github.com/jsrender/demos/index.html</a></li>
<li>Demo pages of JsViews, for interactive pages while still using string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">borismoore.github.com/jsviews/demos/index.html</a></li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/mvigW6OSXvc\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/6473568363716800389/comments/default" (20115 25502) old 4 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-6473568363716800389") (published nil "2011-04-21T12:40:00.000-07:00") (updated nil "2011-10-10T14:29:02.231-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-10T14:29:02.231-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Bay Area Conference - presentation, meetings and movements") (content ((type . "html")) "<div class=\"MsoNormal\">I just got back from speaking at this jQuery Conference Bay Area Conference last weekend, so this is a quick blog to provide some links.</div><div class=\"MsoNormal\"><o:p></o:p></div><div class=\"MsoNormal\"><br />
</div><div class=\"MsoNormal\">This was the official jQuery Conference, which is held twice a year. So all the key members of the jQuery team and community were there. <br />
<ul><li>29&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/schedule/\" target=\"_blank\">presentations</a>&nbsp;over two days</li>
<li><span style=\"font-family: Symbol;\"><span style=\"font: normal normal normal 7pt/normal 'Times New Roman';\">&nbsp;</span></span>About 500 participants</li>
<li>Other presenters included John Resig, Yehuda Katz, Paul Irish, and others who you can see&nbsp;<a href=\"http://events.jquery.org/2011/sf-bay-area/speakers/\" target=\"_blank\">here</a></li>
</ul></div><div class=\"MsoNormal\"><b>My Presentation</b><br />
I spoke about “<i>Harnessing jQuery Templates and Data Link, to build dynamic data-driven browser apps</i>”.<br />
The presentation was in three sections:<br />
<ul><li>Discussion of App Scenarios for data and templates in the client, and example <a href=\"http://jquery.github.com/jquery-tmpl/demos/movies/PagesCore/movies.html\" target=\"_blank\">demo app</a></li>
<li>Templates today: <a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">walkthrough</a> of all the main features</li>
<li>Templates ‘tomorrow’: preview of current work on really fast responsive interactive client-side views, integrating jQuery Templates and Data Linking. (<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">Demo</a>)</li>
</ul><div>The slides are&nbsp;<span class=\"Apple-style-span\" style=\"color: #1f497d;\"><a href=\"http://www.slideshare.net/BorisMoore/harness-jquery-templates-and-data-link\" target=\"_blank\">here</a></span>.&nbsp;</div><div><br />
</div></div><div class=\"MsoListParagraph\" style=\"margin-left: 1.0in; mso-list: l1 level2 lfo2; text-indent: -.25in;\"><o:p></o:p></div><div class=\"MsoNormal\"><b>Meetings and movements</b></div><div class=\"MsoNormal\">I had some great meetings and discussions with other developers and open-source community members. Definitely declarative binding of templated views to observable data is ‘in the air’, and there is clearly a huge interest in related scenarios and patterns like client-side MVVM or MVC. We were already doing much of this in Microsoft AJAX Preview 6 with observable objects and arrays and declarative bindings in templates, but it was not known to many. My hope is that the current <a href=\"https://github.com/BorisMoore/jsviews\" target=\"_blank\">JsViews</a> integration of data link and templating we are working on will break new ground in this area, but this time within a simpler leaner approach, and in synergy with jQuery. People are looking for fast lightweight declarative frameworks of this kind.&nbsp;<o:p></o:p></div><br />
<div style=\"border: 1px solid #999; padding: 5px;\"><i>Update: </i>I have published the demo pages above on GitHub as live pages, and have updated the links above to point to the new pages.<br />
<br />
The new content is as follows:<br />
<ul><li>Live demo pages of current jQuery Templates:&nbsp;<a href=\"http://jquery.github.com/jquery-tmpl/demos/step-by-step.html\" target=\"_blank\">jquery.github.com/jquery-tmpl/demos/step-by-step.html</a></li>
<li>Demo pages of preview work of pure string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsrender/demos/index.html\" target=\"_blank\">borismoore.github.com/jsrender/demos/index.html</a></li>
<li>Demo pages of JsViews, for interactive pages while still using string-based rendering, for better performance in read-only scenarios:&nbsp;<a href=\"http://borismoore.github.com/jsviews/demos/index.html\" target=\"_blank\">borismoore.github.com/jsviews/demos/index.html</a></li>
</ul></div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/mvigW6OSXvc\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/6473568363716800389/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html#comment-form") (title . "3 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/6473568363716800389?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/6473568363716800389?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/mvigW6OSXvc/jquery-bay-area-conference-presentation.html") (title . "jQuery Bay Area Conference - presentation, meetings and movements"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "3") (feedburner:origLink nil "http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html"))) ("In the Pipeline" "Things have been busy, and I have been way less active on this blog than I intended.<br />
<br />
But there's a good side to that: there are some important updates and improvements in the pipeline, and that's what's been keeping me busy...<br />
<br />
I have been working in three main areas:<br />
<br />
<ul><li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-tmpl\">jQuery Templates</a>, which is planned for April. <br />
<br />
This should address a number of issues and requests that have been expressed. One new feature planned for Beta2 is an API to render a template against data, straight to an HTML string, without any dependency on an HTML DOM. This can then be used for direct insertion as innerHTML, and will also enable easy use of jQuery Templates for rendering on the server, as well as improved performance of jQuery Templates when used in the browser for read-only scenarios. <br />
<br />
At the same time all the power of jQuery Templates will still be there, for those that choose to render templates with the full DOM activation phase included, as at present. <br />
<br />
In the case of server rendering, the idea is that the DOM activation can still happen in the browser, against server-rendered HTML. So progressive enhancement scenarios should be relatively easy to achieve...<br />
<br />
</li>
<li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-datalink\">jQuery Data Link</a>, also planned for April.<br />
<br />
This involves significant changes to the current Data Link implementation, with much broader scenario coverage than at present. I hope to push my present code for this new version to a Beta2 branch of jQuery Data Link soon, for those who are curious about the ongoing design.<br />
<br />
</li>
<li>Finally, I have been working on a new script loader: <a href=\"https://github.com/BorisMoore/JsDefer\">JsDefer</a>.<br />
<br />
You can find the current code for JsDefer here <a href=\"https://github.com/BorisMoore/JsDefer\">https://github.com/BorisMoore/JsDefer</a>. This script loader shares a number of features with a script loader which we had released a long way back within the Microsoft AJAX platform (see <a href=\"http://aspnet.codeplex.com/releases/view/34488\">http://aspnet.codeplex.com/releases/view/34488</a>). <br />
<br />
It comes in two versions - a jQuery plugin, and another version that does not require jQuery to be loaded in the page. <br />
<br />
As well as providing some of the features we had in our Microsoft AJAX script loader, JsDefer also takes advantage of the concept of a \"Deferred\" object, to facilitate working with asynchronous processes (in particular, of course, the process of dynamically fetching a script and loading it into the page). The recent jQuery 1.5 release uses Deferred objects in the context of AJAX requests, so JsDefer is designed to work 'hand in glove' with jQuery 1.5 AJAX requests, among other scenarios.&nbsp;</li>
</ul><br />
I plan to publish a blog post on JsDefer very soon, with an initial dive into how it works and the scenarios it addresses.<br />
<div><br />
</div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/PSWsAJLINY8\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/5455325010672456186/comments/default" (19866 4559) old 5 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-5455325010672456186") (published nil "2011-02-14T16:02:00.000-08:00") (updated nil "2011-04-04T11:45:35.228-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-04-04T11:45:35.228-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "In the Pipeline") (content ((type . "html")) "Things have been busy, and I have been way less active on this blog than I intended.<br />
<br />
But there's a good side to that: there are some important updates and improvements in the pipeline, and that's what's been keeping me busy...<br />
<br />
I have been working in three main areas:<br />
<br />
<ul><li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-tmpl\">jQuery Templates</a>, which is planned for April. <br />
<br />
This should address a number of issues and requests that have been expressed. One new feature planned for Beta2 is an API to render a template against data, straight to an HTML string, without any dependency on an HTML DOM. This can then be used for direct insertion as innerHTML, and will also enable easy use of jQuery Templates for rendering on the server, as well as improved performance of jQuery Templates when used in the browser for read-only scenarios. <br />
<br />
At the same time all the power of jQuery Templates will still be there, for those that choose to render templates with the full DOM activation phase included, as at present. <br />
<br />
In the case of server rendering, the idea is that the DOM activation can still happen in the browser, against server-rendered HTML. So progressive enhancement scenarios should be relatively easy to achieve...<br />
<br />
</li>
<li>A Beta2 release of <a href=\"https://github.com/jquery/jquery-datalink\">jQuery Data Link</a>, also planned for April.<br />
<br />
This involves significant changes to the current Data Link implementation, with much broader scenario coverage than at present. I hope to push my present code for this new version to a Beta2 branch of jQuery Data Link soon, for those who are curious about the ongoing design.<br />
<br />
</li>
<li>Finally, I have been working on a new script loader: <a href=\"https://github.com/BorisMoore/JsDefer\">JsDefer</a>.<br />
<br />
You can find the current code for JsDefer here <a href=\"https://github.com/BorisMoore/JsDefer\">https://github.com/BorisMoore/JsDefer</a>. This script loader shares a number of features with a script loader which we had released a long way back within the Microsoft AJAX platform (see <a href=\"http://aspnet.codeplex.com/releases/view/34488\">http://aspnet.codeplex.com/releases/view/34488</a>). <br />
<br />
It comes in two versions - a jQuery plugin, and another version that does not require jQuery to be loaded in the page. <br />
<br />
As well as providing some of the features we had in our Microsoft AJAX script loader, JsDefer also takes advantage of the concept of a \"Deferred\" object, to facilitate working with asynchronous processes (in particular, of course, the process of dynamically fetching a script and loading it into the page). The recent jQuery 1.5 release uses Deferred objects in the context of AJAX requests, so JsDefer is designed to work 'hand in glove' with jQuery 1.5 AJAX requests, among other scenarios.&nbsp;</li>
</ul><br />
I plan to publish a blog post on JsDefer very soon, with an initial dive into how it works and the scenarios it addresses.<br />
<div><br />
</div><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/PSWsAJLINY8\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/5455325010672456186/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2011/02/in-pipeline.html#comment-form") (title . "9 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5455325010672456186?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5455325010672456186?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/PSWsAJLINY8/in-pipeline.html") (title . "In the Pipeline"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "9") (feedburner:origLink nil "http://www.borismoore.com/2011/02/in-pipeline.html"))) ("jQuery Templates is now an Official jQuery Plugin" "<div style=\"border: 1px solid #999; padding: 5px; margin-top:12px;\"><i><b>Update - October 2011</b></i>: Please see recent post: \"<a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a>\" for current information on the jQuery Templates roadmap.  </div><br />
Joint announcements were made today by jQuery and Microsoft that jQuery has decided to make the <em>jQuery Templates</em>, <em>Data Link</em>, and <em>Globalization</em> plugins <em>'Official jQuery Plugins'</em>. <br />
<br />
See the following blog announcements for more details:<br />
<ul><li><a href=\"http://weblogs.asp.net/scottgu/archive/2010/10/04/jquery-templates-data-link-and-globalization-accepted-as-official-jquery-plugins.aspx\">jQuery Templates, Data Link, and Globalization Accepted as Official jQuery Plugins</a></li>
<li><a href=\"http://blog.jquery.com/2010/10/04/new-official-jquery-plugins-provide-templating-data-linking-and-globalization/\">New Official jQuery Plugins Provide Templating, Data Linking and Globalization</a></li>
</ul>Of course I am very pleased by this news, which is the result of some active collaboration with members of the jQuery team. <br />
<br />
<h3>What this means:</h3><h4>A new home for the plugins...</h4>First thing it means, of course, is that the repositories where those plugins live have now moved to a new home. The code that was at GitHub under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project has been moved to the following repositories under the <a href=\"http://github.com/jquery/\">jQuery</a> project:<br />
<ul><li>jQuery Templates: <a href=\"http://github.com/jquery/jquery-tmpl/\">http://github.com/jquery/jquery-tmpl/</a></li>
<li>jQuery DataLink: <a href=\"http://github.com/jquery/jquery-datalink/\">http://github.com/jquery/jquery-datalink/</a></li>
<li>jQuery Globalization: <a href=\"http://github.com/jquery/jquery-global/\">http://github.com/jquery/jquery-global/</a></li>
</ul>The above projects constitute <em>Beta</em> releases of the plugins.<br />
<br />
The previous repositories under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project may continue to exist, but if they do then it will be for exploratory work which may or may not find its way back into the official plugins in a later update.  <br />
<h4>New documentation on the jQuery API site...</h4>Another very important consequence of this announcement is that from now on, documentation for the <em>jQuery Templates plugin</em> and for the <em>jQuery Data Link plugin</em> will be available on the jQuery API site at <a href=\"http://api.jquery.com/\">http://api.jquery.com</a>. <br />
<br />
From today, new documentation is available there, which is much more complete than the previous Wiki provided on our repository.<br />
<ul><li>The following link provides a list of all the documentation topics for the jQuery Templates plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/templates/\">http://api.jquery.com/category/plugins/templates</a><br />
<br />
</li>
<li>And the following link provides a list of all the documentation topics for the jQuery Data Link plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/data-link/\">http://api.jquery.com/category/plugins/data-link</a><br />
</li>
</ul>One goal I have with this blog entry is to give you an idea of how the new documentation for jQuery Templates is organized, and to provide a convenient set of links to the various topics. Each topic concerns either a method from the plugin API, or a template tag that you can use within your template markup to obtain some of the rich features that this plugin provides. <br />
<h4><em>API</em> documentation topics:</h4><ul><li><strong>jQuery.tmpl() and .tmpl():</strong> <br />
These APIs are used to <em>render</em> a jQuery template:<br />
<a href=\"http://api.jquery.com/tmpl\">http://api.jquery.com/tmpl</a><br />
<a href=\"http://api.jquery.com/jQuery.tmpl\">http://api.jquery.com/jQuery.tmpl</a><br />
<br />
</li>
<li><strong>jQuery.tmplItem() and .tmplItem():</strong> <br />
These APIs are used to <em>find</em> a jQuery template instance, and are crucial for providing interactivity:<br />
<a href=\"http://api.jquery.com/tmplitem\">http://api.jquery.com/tmplitem</a><br />
<a href=\"http://api.jquery.com/jQuery.tmplitem\">http://api.jquery.com/jQuery.tmplitem</a><br />
<br />
</li>
<li><strong>jQuery.template() and .template():</strong> <br />
These APIs are used to <em>compile or store</em> a jQuery template, and are particularly useful for scenarios where templates are loaded in the form of strings, such as templates retreived remotely:<br />
<a href=\"http://api.jquery.com/template\">http://api.jquery.com/template</a><br />
<a href=\"http://api.jquery.com/jQuery.template\">http://api.jquery.com/jQuery.template</a><br />
</li>
</ul><h4><em>Template tag</em> documentation topics:</h4><ul><li><strong>${...}:</strong> <br />
This tag is used to <em>evaluate fields or JavaScript expressions</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-equal\">http://api.jquery.com/template-tag-equal</a><br />
<br />
</li>
<li><strong>{{each ...}}...{{/each}}:</strong> <br />
This tag is used used to <em>iterate</em> within a template (without creating template items):<br />
<a href=\"http://api.jquery.com/template-tag-each\">http://api.jquery.com/template-tag-each</a><br />
<br />
</li>
<li><strong>{{if ...}}...{{else ...}}...{{/if}}:</strong> <br />
This tag is used used to create <em>conditional sections</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-if\">http://api.jquery.com/template-tag-if</a><br />
<a href=\"http://api.jquery.com/template-tag-else\">http://api.jquery.com/template-tag-else</a><br />
<br />
</li>
<li><strong>{{html ...}}:</strong> <br />
This tag is used used to <em>insert markup obtained from data</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-html\">http://api.jquery.com/template-tag-html</a><br />
<br />
</li>
<li><strong>{{tmpl ...}}:</strong> <br />
This tag is used used for <em>composition and iteration</em> within templates (and creating new template items for each nested rendered template):<br />
<a href=\"http://api.jquery.com/template-tag-tmpl\">http://api.jquery.com/template-tag-tmpl</a><br />
<br />
</li>
<li><strong>{{wrap ...}}...{{/wrap}}:</strong> <br />
This tag is used used for <em>composition and iteration, along with incorporation of wrapped HTML</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-wrap\">http://api.jquery.com/template-tag-wrap</a><br />
</li>
</ul><br />
I hope this new documentation will help you to take advantage of some of the rich features of jQuery Templates. <br />
<br />
For extra help I'm expecting soon to provide some more blog entries that continue the series <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">Introducing jQuery Templates</a>...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/vP5sWuSacWk\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/5219992015095126253/comments/default" (20118 16325) old 6 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-5219992015095126253") (published nil "2010-10-04T07:00:00.000-07:00") (updated nil "2011-10-12T18:32:53.774-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-10-12T18:32:53.774-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "jQuery Templates is now an Official jQuery Plugin") (content ((type . "html")) "<div style=\"border: 1px solid #999; padding: 5px; margin-top:12px;\"><i><b>Update - October 2011</b></i>: Please see recent post: \"<a href=\"http://www.borismoore.com/2011/10/jquery-templates-and-jsviews-roadmap.html\">jQuery Templates and JsViews: The Roadmap</a>\" for current information on the jQuery Templates roadmap.  </div><br />
Joint announcements were made today by jQuery and Microsoft that jQuery has decided to make the <em>jQuery Templates</em>, <em>Data Link</em>, and <em>Globalization</em> plugins <em>'Official jQuery Plugins'</em>. <br />
<br />
See the following blog announcements for more details:<br />
<ul><li><a href=\"http://weblogs.asp.net/scottgu/archive/2010/10/04/jquery-templates-data-link-and-globalization-accepted-as-official-jquery-plugins.aspx\">jQuery Templates, Data Link, and Globalization Accepted as Official jQuery Plugins</a></li>
<li><a href=\"http://blog.jquery.com/2010/10/04/new-official-jquery-plugins-provide-templating-data-linking-and-globalization/\">New Official jQuery Plugins Provide Templating, Data Linking and Globalization</a></li>
</ul>Of course I am very pleased by this news, which is the result of some active collaboration with members of the jQuery team. <br />
<br />
<h3>What this means:</h3><h4>A new home for the plugins...</h4>First thing it means, of course, is that the repositories where those plugins live have now moved to a new home. The code that was at GitHub under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project has been moved to the following repositories under the <a href=\"http://github.com/jquery/\">jQuery</a> project:<br />
<ul><li>jQuery Templates: <a href=\"http://github.com/jquery/jquery-tmpl/\">http://github.com/jquery/jquery-tmpl/</a></li>
<li>jQuery DataLink: <a href=\"http://github.com/jquery/jquery-datalink/\">http://github.com/jquery/jquery-datalink/</a></li>
<li>jQuery Globalization: <a href=\"http://github.com/jquery/jquery-global/\">http://github.com/jquery/jquery-global/</a></li>
</ul>The above projects constitute <em>Beta</em> releases of the plugins.<br />
<br />
The previous repositories under the <a href=\"http://github.com/nje/\">http://github.com/nje/</a> project may continue to exist, but if they do then it will be for exploratory work which may or may not find its way back into the official plugins in a later update.  <br />
<h4>New documentation on the jQuery API site...</h4>Another very important consequence of this announcement is that from now on, documentation for the <em>jQuery Templates plugin</em> and for the <em>jQuery Data Link plugin</em> will be available on the jQuery API site at <a href=\"http://api.jquery.com/\">http://api.jquery.com</a>. <br />
<br />
From today, new documentation is available there, which is much more complete than the previous Wiki provided on our repository.<br />
<ul><li>The following link provides a list of all the documentation topics for the jQuery Templates plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/templates/\">http://api.jquery.com/category/plugins/templates</a><br />
<br />
</li>
<li>And the following link provides a list of all the documentation topics for the jQuery Data Link plugin:<br />
<a href=\"http://api.jquery.com/category/plugins/data-link/\">http://api.jquery.com/category/plugins/data-link</a><br />
</li>
</ul>One goal I have with this blog entry is to give you an idea of how the new documentation for jQuery Templates is organized, and to provide a convenient set of links to the various topics. Each topic concerns either a method from the plugin API, or a template tag that you can use within your template markup to obtain some of the rich features that this plugin provides. <br />
<h4><em>API</em> documentation topics:</h4><ul><li><strong>jQuery.tmpl() and .tmpl():</strong> <br />
These APIs are used to <em>render</em> a jQuery template:<br />
<a href=\"http://api.jquery.com/tmpl\">http://api.jquery.com/tmpl</a><br />
<a href=\"http://api.jquery.com/jQuery.tmpl\">http://api.jquery.com/jQuery.tmpl</a><br />
<br />
</li>
<li><strong>jQuery.tmplItem() and .tmplItem():</strong> <br />
These APIs are used to <em>find</em> a jQuery template instance, and are crucial for providing interactivity:<br />
<a href=\"http://api.jquery.com/tmplitem\">http://api.jquery.com/tmplitem</a><br />
<a href=\"http://api.jquery.com/jQuery.tmplitem\">http://api.jquery.com/jQuery.tmplitem</a><br />
<br />
</li>
<li><strong>jQuery.template() and .template():</strong> <br />
These APIs are used to <em>compile or store</em> a jQuery template, and are particularly useful for scenarios where templates are loaded in the form of strings, such as templates retreived remotely:<br />
<a href=\"http://api.jquery.com/template\">http://api.jquery.com/template</a><br />
<a href=\"http://api.jquery.com/jQuery.template\">http://api.jquery.com/jQuery.template</a><br />
</li>
</ul><h4><em>Template tag</em> documentation topics:</h4><ul><li><strong>${...}:</strong> <br />
This tag is used to <em>evaluate fields or JavaScript expressions</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-equal\">http://api.jquery.com/template-tag-equal</a><br />
<br />
</li>
<li><strong>{{each ...}}...{{/each}}:</strong> <br />
This tag is used used to <em>iterate</em> within a template (without creating template items):<br />
<a href=\"http://api.jquery.com/template-tag-each\">http://api.jquery.com/template-tag-each</a><br />
<br />
</li>
<li><strong>{{if ...}}...{{else ...}}...{{/if}}:</strong> <br />
This tag is used used to create <em>conditional sections</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-if\">http://api.jquery.com/template-tag-if</a><br />
<a href=\"http://api.jquery.com/template-tag-else\">http://api.jquery.com/template-tag-else</a><br />
<br />
</li>
<li><strong>{{html ...}}:</strong> <br />
This tag is used used to <em>insert markup obtained from data</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-html\">http://api.jquery.com/template-tag-html</a><br />
<br />
</li>
<li><strong>{{tmpl ...}}:</strong> <br />
This tag is used used for <em>composition and iteration</em> within templates (and creating new template items for each nested rendered template):<br />
<a href=\"http://api.jquery.com/template-tag-tmpl\">http://api.jquery.com/template-tag-tmpl</a><br />
<br />
</li>
<li><strong>{{wrap ...}}...{{/wrap}}:</strong> <br />
This tag is used used for <em>composition and iteration, along with incorporation of wrapped HTML</em> within templates:<br />
<a href=\"http://api.jquery.com/template-tag-wrap\">http://api.jquery.com/template-tag-wrap</a><br />
</li>
</ul><br />
I hope this new documentation will help you to take advantage of some of the rich features of jQuery Templates. <br />
<br />
For extra help I'm expecting soon to provide some more blog entries that continue the series <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">Introducing jQuery Templates</a>...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/vP5sWuSacWk\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/5219992015095126253/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html#comment-form") (title . "57 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5219992015095126253?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/5219992015095126253?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/vP5sWuSacWk/jquery-templates-is-now-official-jquery.html") (title . "jQuery Templates is now an Official jQuery Plugin"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "57") (feedburner:origLink nil "http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html"))) ("Introducing jQuery Templates 1: First Steps" "<script type=\"text/javascript\">
(function(b){var c=0,a,e,k=b.tmpl,g=b.template,l=jQuery.fn.domManip,d,f='<table class=\"plusViewerTabs\"><tbody><tr><th class=\"header_${activeIndex === 0}\">Result</th><th class=\"header_${activeIndex === 1}\">Data</th>{{each tmpls}}<th class=\"header_${activeIndex === 2 + $index}\">${$value.name}</th>{{/each}}</tr><tr><td colspan=\"${tmpls.length + 2}\">{{if activeIndex === 0}}{{wrap wrapper}}{{tmpl(data) tmpls[0].tmpl}}{{/wrap}}{{else activeIndex === 1}}<textarea{{if !editable}} readonly{{/if}}>${$item.getData()}</textarea>{{else}}<textarea{{if !editable}} readonly{{/if}}>${tmpls[activeIndex - 2].markup}</textarea>{{/if}}</td></tr></tbody></table>';f=b.template(null,f);b.tmpl=function(f,d,e,b){if(!c&&!b)a={tmpls:[],tmplNames:{},activeIndex:0,data:d};return k(f,d,e,b)};b.extend(b.tmpl,k);b.template=function(d,e){var f,h,b=e;if(a&&a.tmplNames[d])return a.tmpls[a.tmplNames[d]-1].tmpl;else if(b&&!c){if(b instanceof jQuery)b=e[0]||{};if(b.nodeType){f=\"#\"+b.getAttribute(\"id\");b=b.innerHTML}if(typeof b===\"string\"){h=f||b;if(!a.tmplNames[h]){a.tmpls.push({markup:b,tmpl:b=g(d,e),name:f||\"Template\"});a.tmplNames[h]=a.tmpls.length;return b}}}return g(d,e)};jQuery.fn.extend({domManip:function(){if(!c){var f=0,e=this[0],d=b(e),g;d.addClass(\"plusViewerTarget\");while(e!==document.body){if(d.hasClass(\"plusViewer\")){a.wrapper=e.innerHTML;a.depth=f;a.persist=d.hasClass(\"persist\"),g=a.tabs=d.hasClass(\"tabs\"),a.editable=a.persist||d.hasClass(\"edit\");d.data(\"plusViewerState\",a);d.data(\"plusViewerInitialState\",b.extend(true,{},a));a=null;break}d=b(e=e.parentNode);f++}}var i=l.apply(this,arguments);if(g){c++;h(d);c--}else!a&&d.addClass(\"plusTargetContainer\");return i}});function h(c){a=c.data(\"plusViewerState\");if(a.wrapper){var d=a.wrapper.split(\"plusViewerTarget\");d[1]=d[1].replace(/>[\\w\\s]*</,\">{{html $item.html()}}</\");a.wrapper=d.join(\"plusViewerTarget\")}else a.wrapper=\"{{! }}{{html $item.html()}}\";if(a.tabs)if(c.hasClass(\"data\"))a.activeIndex=1;else b.each(a.tmplNames,function(d,b){if(c.hasClass(d)){a.activeIndex=b+1;return false}});b.tmpl(f,a,{getData:j}).appendTo(c.empty());a.tabs&&a.activeIndex&&i(c)}function i(c){var a=b(c).find(\"textarea\")[0];if(a){a.style.overflow=\"hidden\";a.scrollHeight;a.style.height=a.scrollHeight+\"px\";a.style.overflow=\"auto\"}}function j(){return JSON.stringify(this.data.data,null,\"\\t\")}b(function(){d=document.createElement(\"div\");d.innerHTML=\"+\";d.className=\"plusButton\";document.body.appendChild(d);b(\".plusViewer\").delegate(\".header_false\",\"click\",function(){var f,d=b.tmplItem(this),e=d.data.activeIndex=b(this).index();c++;a=d.data;d.update();a=null;c--;if(!e)return;i(d.nodes[0])}).delegate(\"textarea\",\"change\",function(){var a=b.tmplItem(this);if(a.data.activeIndex===1)try{a.data.data=b.parseJSON(this.value)}catch(g){alert(\"Syntax error!\");this.value=j.call(a)}else{c++;var e=this.value,f=b.template(null,e),d=a.data.tmpls[a.data.activeIndex-2];try{f(b,b.extend({},a,{data:a.data.data[0]||a.data.data}));a.data.targetMarkup=e;d.markup=e;d.tmpl=f}catch(g){alert(\"Syntax error!\");this.value=d.markup}c--}});b(\".plusTargetContainer\").live(\"mouseenter\",function(c){if(c.relatedTarget&&c.relatedTarget.className===\"plusButton\")return;if(e)e.style.border=\"solid transparent 1px\";e=this;d.innerHTML=b(this).hasClass(\"activeViewer\")?\"-\":\"+\";var a=b(this).offset();this.style.border=\"solid green 1px\";d.style.left=a.left+\"px\";d.style.top=a.top+\"px\";d.style.display=\"block\"});b(\".plusTargetContainer\").live(\"mouseleave\",function(a){if(a.relatedTarget&&a.relatedTarget.className===\"plusButton\")return;e=null;d.style.display=\"none\";this.style.border=\"solid transparent 1px\"});b(\".plusButton\").click(function(){c++;var d=b(e);if(this.innerHTML===\"+\"){h(d);d.addClass(\"activeViewer\");this.innerHTML=\"-\"}else{var f=b(e).children().first().tmplItem(),j=f.nodes,g=document.createElement(\"div\"),k=j[0].parentNode,l=f.data.depth,i=d.data(\"plusViewerInitialState\");g.innerHTML=i.wrapper;if(f.data.persist){a=f.data;d.data(\"plusViewerState\",a)}else{a=i;d.data(\"plusViewerState\",b.extend(true,{},a))}b.tmpl(a.tmpls[0].tmpl,a.data).appendTo(b(g).find(\".plusViewerTarget\"));jQuery(j).remove();k.innerHTML=g.innerHTML;this.innerHTML=\"+\";d.removeClass(\"activeViewer\")}a=null;c--})})})(jQuery);if(!this.JSON)this.JSON={};(function(){function c(a){return a<10?\"0\"+a:a}if(typeof Date.prototype.toJSON!==\"function\"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+c(this.getUTCMonth()+1)+\"-\"+c(this.getUTCDate())+\"T\"+c(this.getUTCHours())+\":\"+c(this.getUTCMinutes())+\":\"+c(this.getUTCSeconds())+\"Z\":null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()}}var h=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,f=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,a,d,i={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},b;function g(a){f.lastIndex=0;return f.test(a)?'\"'+a.replace(f,function(a){var b=i[a];return typeof b===\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function e(m,n){var i,j,h,k,l=a,f,c=n[m];if(c&&typeof c===\"object\"&&typeof c.toJSON===\"function\")c=c.toJSON(m);if(typeof b===\"function\")c=b.call(n,m,c);switch(typeof c){case\"string\":return g(c);case\"number\":return isFinite(c)?String(c):\"null\";case\"boolean\":case\"null\":return String(c);case\"object\":if(!c)return\"null\";a+=d;f=[];if(Object.prototype.toString.apply(c)===\"[object Array]\"){k=c.length;for(i=0;i<k;i+=1)f[i]=e(i,c)||\"null\";h=f.length===0?\"[]\":a?\"[\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"]\":\"[\"+f.join(\",\")+\"]\";a=l;return h}if(b&&typeof b===\"object\"){k=b.length;for(i=0;i<k;i+=1){j=b[i];if(typeof j===\"string\"){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}}}else for(j in c)if(Object.hasOwnProperty.call(c,j)){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}h=f.length===0?\"{}\":a?\"{\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"}\":\"{\"+f.join(\",\")+\"}\";a=l;return h}}if(typeof JSON.stringify!==\"function\")JSON.stringify=function(h,c,f){var g;a=\"\";d=\"\";if(typeof f===\"number\")for(g=0;g<f;g+=1)d+=\" \";else if(typeof f===\"string\")d=f;b=c;if(c&&typeof c!==\"function\"&&(typeof c!==\"object\"||typeof c.length!==\"number\"))throw new Error(\"JSON.stringify\");return e(\"\",{\"\":h})};if(typeof JSON.parse!==\"function\")JSON.parse=function(a,c){var b;function d(f,g){var b,e,a=f[g];if(a&&typeof a===\"object\")for(b in a)if(Object.hasOwnProperty.call(a,b)){e=d(a,b);if(e!==undefined)a[b]=e;else delete a[b]}return c.call(f,g,a)}a=String(a);h.lastIndex=0;if(h.test(a))a=a.replace(h,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)});if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){b=eval(\"(\"+a+\")\");return typeof c===\"function\"?d({\"\":b},\"\"):b}throw new SyntaxError(\"JSON.parse\");}})();
</script>
<hr />
<strong><em>UPDATE:</em></strong> A joint announcement has just been made by jQuery and Microsoft that the <em>jQuery Templates</em>, <em>Data Link</em> and <em>Globalization</em> plugins are now <em>'Official jQuery Plugins'</em>. In addition, a full set of documentation for the <em>jQuery Templates</em> and <em>Data Link</em> plugins is now available on the <a href=\"http://api.jquery.com/\">http://api.jquery.com/</a> site.
See my next post: <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Templates is now an Official jQuery Plugin</a> for details.
<hr />
In my <a href=\"http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html\">last post</a>, I said I planned to start a series of posts introducing <i>jQuery Templates</i>. This is the first of that series. This post also introduces the <a href=\"#sampleViewer\">Sample Viewer</a>, which you can use to try out your own jQuery templates.
In a sense <em>jQuery Templates</em> consists of <em>three</em> plugins: <em>.tmpl(), .tmplItem() </em>and <em>.template()</em>, and each one comes in two flavors: <em>instance </em>plugin and <em>static </em>plugin.
From a basic scenario point of view, it is like this:
<ul>
<li><em>.tmpl()</em>: <em>Render</em> the template</li>
<li><em>.tmplItem()</em>: <em>Find</em> the template item</li>
<li><em>.template()</em>: <em>Compile/Store</em> the template</li>
</ul>The template itself is any HTML markup, along with any of a set of <i>template tags</i> which enable some very rich scenarios for creating data-driven UI.
The current set of tags that are supported in jQuery templates are:
<ul>
<li><em>${...}</em>: <em>Evaluate</em> fields or expression</li>
<li><em>{{each ...}}...{{/each}}</em>: <em>Iterate</em> without creating template items</li>
<li><em>{{if ...}}...{{else ...}}...{{/if}}</em>: <em>Conditional</em> sections</li>
<li><em>{{html ...}}</em>: <em>Insert markup</em> from data </li>
<li><em>{{tmpl ...}}</em>: <em>Composition</em>, as template items</li>
<li><em>{{wrap ...}}...{{/wrap}}</em>: <em>Composition</em>, plus incorporation of wrapped HTML</li>
</ul>This blog will be the first of a series in which I hope to drill into the role of each of those APIs and tags.
For this first blog, we'll start with the simplest possible scenario. We'll use just the <em>.tmpl()</em> API, for rendering a template, and the <em>${...}</em> template tag, for inserting data values into the rendered output...
So here goes:
<h4>
Rendering a template using local data within the page</h4>Here is some data:
<pre class=\"brush: js;\">var movies = [
{ Name: \"The Red Violin\", ReleaseYear: \"1998\" },
{ Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
{ Name: \"The Inheritance\", ReleaseYear: \"1976\" }
];</pre>Here is some markup to be used as a template:
<pre class=\"brush: xml;\">&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
&lt;li&gt;
&lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
&lt;/li&gt;
&lt;/script&gt;</pre>and a target element where we are going to render the result of rendering the template against our data:
<pre class=\"brush: xml;\">&lt;ul id=\"results\"&gt;&lt;/ul&gt;</pre>And here is some code to take the template, render it with the data, and append the resulting HTML as content under our target element:
<pre class=\"brush: js;\">$( \"#movieTemplate\" ).tmpl( movies )
.appendTo( \"#results\" );</pre>In the above code, we get a jQuery wrapped set containing our template markup, and use the <em>.tmpl()</em> plugin method (to which we pass the data) to render the template. Then we chain with the <i>appendTo</i> method to append the results under our target element:
<div class=\"demo\">
<strong>Demo:</strong>
<ul id=\"results1a\"></ul></div>As you see the template got rendered once for each item in the <i>movies</i> array. Data values are inserted using the template tag <i>${...}</i>. In fact <i>${expression}</i> inserts the (HTML-encoded) result of evaluating the <i>expression</i> term, in the context of the current item.
The template engine actually exposes the current data item as the variable <i>$data</i>, and also exposes each of the fields of the current data item as individual variables. So the most simplest use-case of <i>${...}</i> is just with a field name as expression, such as <i>${ReleaseYear}</i>. This is actually equivalent to <i>${$data.ReleaseYear}</i> and inserts the value of that field on the current data item. Pretty straightforward.
Here is the complete code of our example:
<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
&lt;li&gt;
&lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
&lt;/li&gt;
&lt;/script&gt;
&lt;ul id=\"results\"&gt;&lt;/ul&gt;
&lt;script type=\"text/javascript\"&gt;
var movies = [
{ Name: \"The Red Violin\", ReleaseYear: \"1998\" },
{ Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
{ Name: \"The Inheritance\", ReleaseYear: \"1976\" }
];
$( \"#movieTemplate\" ).tmpl( movies )
.appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>
Playing with the data and the template: Sample Viewer</h4>To get the feeling of how it works, here is the same demo again, but this time I have used a special Sample Viewer script which is integrated into my blog, so that if you mouse over the demo, you will see a little '+' button that you can click on. The result will be a tabbed view in which you can see the data and the template, as well as the result:
<div class=\"plusViewer edit\">
<strong>Demo with Sample Viewer</strong> (Mouse over...)
<ul id=\"results1b\"></ul></div>Try mousing over the demo above, clicking on the '+' button, and modifying the data or the template under the respective tabs. Go back to the result tab and you will see how it renders. Click on the '-' button, and you will be back with the orginal data and template...
By the way, this sample viewer is actually implemented using jQuery templates, and illustrates the kind of dynamic interactive client-side UI that can be built very easily with jQuery templates. Maybe at some point I'll reach the point of blogging about how I went about building the sample viewer. But for now, let's get back to just playing with it. For example, if you want to just change the data, and see how the template rendering works with your changes, here are some examples of changes to the data that you could explore:
<h4>
Changing the data</h4>Mouse over the demo above and expand the <i>Sample Viewer</i>. Now try copying and pasting the data examples below into the <i>Data</i> tab, and then switching back to the <i>Result</i> tab.
<em>Change values, number of elements etc.</em>
<pre class=\"code\">[
{ \"Name\": \"The BLUE Violin\", \"ReleaseYear\": \"1998\" }
]</pre><i>Conclusion:</i> It actually is data-driven :-)
<em>Remove some fields and add others:</em>
<pre class=\"code\">[
{ \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\" },
{ \"Name\": \"Eyes Wide Shut\"  },
{ \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> It ignores the missing/undefined values without error. If you put the value of those fields to null or to the empty string, the result is the same. And of course the added fields have no effect, unless you want to add <i>${Director}</i> to the template. (Try it...)
<em>Replace the array with a single object:</em>
<pre class=\"code\">{ Name: \"The Red Violin\", ReleaseYear: \"1998\" }</pre><i>Conclusion:</i> The templating engine is smart about arrays. Pass an object and it renders the template once, with the object as data item. Pass it an array and it creates a template item (a rendered template) for each of the data items in the array.
<em>Set the data to null:</em>
<pre class=\"code\">null</pre><i>Conclusion:</i> If you pass no data at all, the templating engine still renders the template once, but the current data item is null.
We will see that there are many scenarios where you are just rendering boiler-plate, or where  the template pulls in data from other places than the data item, so passing data to the template is not always appropriate or relevant. It may be a nested template, and use data from the parent item. It may have template tags whose parameters are not simple values, but function calls, and the template is driven by the data returned by that function call. For example it might include <i>{{each myApp.getData(foo)}}</i>, or <i>${myApp.getData(foo)}</i>.
In this blog I am staying with much simpler examples, but we will see in later blogs how passing functions to template tags is extremely common.
<em>Include some HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style=\"color: Red;\"&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><i>Conclusion:</i> This does <i>not</i> change the formatting of the text. Instead, it shows the markup in the rendered UI. This is by design: <i>${expression}</i> HTML-encodes the value before inserting it into the DOM. If you actually want your markup to get inserted into the DOM, then use the <i>{{html ...}}</i> template tag rather than the <i>${...}</i> template tag. You can try it now: go to the <i>#movieTemplate</i> tab and replace ${Name} by {{html Name}}. Now the markup will not be escaped, and the data will actually get inserted as HTML. (We'll come back to this lower down in the blog).
One detail: the sample viewer is using <a href=\"http://www.json.org/js.html\">JSON2</a> to convert between string expressions and JavaScript objects. So the text you are editing above is actually JSON, not JavaScript literals. That's why the keys are wrapped in quotes. Try removing them, and the sample viewer will tell you that you have a syntax error! But in your script, of course, you have literals, and those quotes can be omitted (as long as you avoid JavaScript keywords!)
<h4>
Changing the template</h4>Let's try changing the template, now, rather than the data. For convenience, here is the sample viewer again. This time I set it to show the tabs from the get-go, so you don't need to mouse over and click the '+' button...
<strong><a href=\"\" name=\"sampleViewer\">Sample Viewer</a></strong>
<div class=\"plusViewer edit tabs\">
<ul id=\"results1c\"></ul></div>So try copying and pasting the template examples below into the <i>#movieTemplate</i> tab, and then switching back to the <i>Result</i> tab.
<em>Add some text:</em>
<pre class=\"code\">&lt;li&gt;
&lt;b&gt;${Name}&lt;/b&gt; (Released in the year ${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect!
<em>Add some markup and some formatting:</em>
<pre class=\"code\">&lt;li&gt;
&lt;b&gt;${Name}&lt;/b&gt; (&lt;span style=\"color: Blue;\"&gt;${ReleaseYear}&lt;span&gt;)
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect...
<em>Add simple JavaScript expressions:</em>
<pre class=\"code\">&lt;li&gt;
&lt;b&gt;${Name.toUpperCase()}&lt;/b&gt; (${parseInt(ReleaseYear) + 100})
&lt;/li&gt;</pre><i>Conclusion:</i> This works too. You can put JavaScript expressions as parameters to the tags.
But don't go overboard! There is not a complete JavaScript parser in the context of inline expressions in the template. If you have complex code, write a function, and call the function from your template, and pass parameters if you need to: <i>${myFunction(a,b)}</i>. (More on that in a later blog...)
<em>Add another template tag:</em>
<pre class=\"code\">&lt;li&gt;
&lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear}) - Director: ${Director}
&lt;/li&gt;</pre><i>Conclusion:</i> Nothing yet - there is no Director field...
<em>Now change the data too:</em>
<pre class=\"code\">[
{ \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\", \"Director\": \"Francois Girard\" },
{ \"Name\": \"Eyes Wide Shut\", \"ReleaseYear\": \"1999\", \"Director\": \"Stanley Kubrick\" },
{ \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> Yes, it works as expected!
Finally let's make the change I mentioned in the previous section, and get a 'teaser' on one of the other template tags to be covered in later blogs: the <i>{{html ...}}</i> tag...
<em>First, include HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style='color: Red;'&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><em>Now change the template to use the {{html ...}} template tag instead of the ${...} template tag:</em>
<pre class=\"code\">&lt;li&gt;
&lt;b&gt;{{html Name}}&lt;/b&gt; (${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> Thanks to the <i>{{html ...}}</i> tag, you can insert HTML markup into the DOM, as HTML.
Combining some of the changes above to data and template, here is a working example that illustrates what you did, and which you can use for exploring further changes:
<strong>Sample Viewer</strong>
<div class=\"plusViewer edit tabs\">
<ul id=\"results2\"></ul></div>And here is the complete code of our modified example:
<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
&lt;li&gt;
&lt;b&gt;{{html Name}}&lt;/b&gt;
(&lt;span style=\"color: Blue\"&gt; ${ReleaseYear}&lt;/span&gt;) - Director: ${Director}
&lt;/li&gt;
&lt;/script&gt;
&lt;ul id=\"results\"&gt;&lt;/ul&gt;
&lt;script type=\"text/javascript\"&gt;
var movies = [
{ Name: \"The &lt;strong style='color: red'&gt;Red&lt;/strong&gt; Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
{ Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
{ Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
];
$( \"#movieTemplate\" ).tmpl( movies )
.appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>
What's next?...</h4>Of course we have only just started scratching the surface here. I hope to provide more blogs soon to continue exploring the possibilities of jQuery templates.
In the meantime, you can download the code for jQuery templates from <a href=\"http://github.com/jquery/jquery-tmpl\">http://github.com/jquery/jquery-tmpl</a>. <script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\">
<li>
<b>${Name}</b> (${ReleaseYear})
</li>
</script><script id=\"movieTemplate2\" type=\"text/x-jquery-tmpl\">
<li>
<b>{{html Name}}</b> (<span style=\"color: Blue;\">${ReleaseYear}</span>) - Director: ${Director}
</li>
</script><script type=\"text/javascript\">
var movies = [
{ Name: \"The Red Violin\", ReleaseYear: \"1998\" },
{ Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
{ Name: \"The Inheritance\", ReleaseYear: \"1976\" }
];
var movies2 = [
{ Name: \"The <strong style='color: red'>Red</strong> Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
{ Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
{ Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
];
$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1a\" );
$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1b\" );
$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1c\" );
$( \"#movieTemplate2\" ).tmpl( movies2 ).appendTo( \"#results2\" );
</script><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/HzZeYM-b0VY\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/2182287749356001745/comments/default" (19897 52914) old 7 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-2182287749356001745") (published nil "2010-09-23T16:50:00.001-07:00") (updated nil "2011-04-28T13:31:46.323-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2011-04-28T13:31:46.323-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "Introducing jQuery Templates 1: First Steps") (content ((type . "html")) "<script type=\"text/javascript\">
(function(b){var c=0,a,e,k=b.tmpl,g=b.template,l=jQuery.fn.domManip,d,f='<table class=\"plusViewerTabs\"><tbody><tr><th class=\"header_${activeIndex === 0}\">Result</th><th class=\"header_${activeIndex === 1}\">Data</th>{{each tmpls}}<th class=\"header_${activeIndex === 2 + $index}\">${$value.name}</th>{{/each}}</tr><tr><td colspan=\"${tmpls.length + 2}\">{{if activeIndex === 0}}{{wrap wrapper}}{{tmpl(data) tmpls[0].tmpl}}{{/wrap}}{{else activeIndex === 1}}<textarea{{if !editable}} readonly{{/if}}>${$item.getData()}</textarea>{{else}}<textarea{{if !editable}} readonly{{/if}}>${tmpls[activeIndex - 2].markup}</textarea>{{/if}}</td></tr></tbody></table>';f=b.template(null,f);b.tmpl=function(f,d,e,b){if(!c&&!b)a={tmpls:[],tmplNames:{},activeIndex:0,data:d};return k(f,d,e,b)};b.extend(b.tmpl,k);b.template=function(d,e){var f,h,b=e;if(a&&a.tmplNames[d])return a.tmpls[a.tmplNames[d]-1].tmpl;else if(b&&!c){if(b instanceof jQuery)b=e[0]||{};if(b.nodeType){f=\"#\"+b.getAttribute(\"id\");b=b.innerHTML}if(typeof b===\"string\"){h=f||b;if(!a.tmplNames[h]){a.tmpls.push({markup:b,tmpl:b=g(d,e),name:f||\"Template\"});a.tmplNames[h]=a.tmpls.length;return b}}}return g(d,e)};jQuery.fn.extend({domManip:function(){if(!c){var f=0,e=this[0],d=b(e),g;d.addClass(\"plusViewerTarget\");while(e!==document.body){if(d.hasClass(\"plusViewer\")){a.wrapper=e.innerHTML;a.depth=f;a.persist=d.hasClass(\"persist\"),g=a.tabs=d.hasClass(\"tabs\"),a.editable=a.persist||d.hasClass(\"edit\");d.data(\"plusViewerState\",a);d.data(\"plusViewerInitialState\",b.extend(true,{},a));a=null;break}d=b(e=e.parentNode);f++}}var i=l.apply(this,arguments);if(g){c++;h(d);c--}else!a&&d.addClass(\"plusTargetContainer\");return i}});function h(c){a=c.data(\"plusViewerState\");if(a.wrapper){var d=a.wrapper.split(\"plusViewerTarget\");d[1]=d[1].replace(/>[\\w\\s]*</,\">{{html $item.html()}}</\");a.wrapper=d.join(\"plusViewerTarget\")}else a.wrapper=\"{{! }}{{html $item.html()}}\";if(a.tabs)if(c.hasClass(\"data\"))a.activeIndex=1;else b.each(a.tmplNames,function(d,b){if(c.hasClass(d)){a.activeIndex=b+1;return false}});b.tmpl(f,a,{getData:j}).appendTo(c.empty());a.tabs&&a.activeIndex&&i(c)}function i(c){var a=b(c).find(\"textarea\")[0];if(a){a.style.overflow=\"hidden\";a.scrollHeight;a.style.height=a.scrollHeight+\"px\";a.style.overflow=\"auto\"}}function j(){return JSON.stringify(this.data.data,null,\"\\t\")}b(function(){d=document.createElement(\"div\");d.innerHTML=\"+\";d.className=\"plusButton\";document.body.appendChild(d);b(\".plusViewer\").delegate(\".header_false\",\"click\",function(){var f,d=b.tmplItem(this),e=d.data.activeIndex=b(this).index();c++;a=d.data;d.update();a=null;c--;if(!e)return;i(d.nodes[0])}).delegate(\"textarea\",\"change\",function(){var a=b.tmplItem(this);if(a.data.activeIndex===1)try{a.data.data=b.parseJSON(this.value)}catch(g){alert(\"Syntax error!\");this.value=j.call(a)}else{c++;var e=this.value,f=b.template(null,e),d=a.data.tmpls[a.data.activeIndex-2];try{f(b,b.extend({},a,{data:a.data.data[0]||a.data.data}));a.data.targetMarkup=e;d.markup=e;d.tmpl=f}catch(g){alert(\"Syntax error!\");this.value=d.markup}c--}});b(\".plusTargetContainer\").live(\"mouseenter\",function(c){if(c.relatedTarget&&c.relatedTarget.className===\"plusButton\")return;if(e)e.style.border=\"solid transparent 1px\";e=this;d.innerHTML=b(this).hasClass(\"activeViewer\")?\"-\":\"+\";var a=b(this).offset();this.style.border=\"solid green 1px\";d.style.left=a.left+\"px\";d.style.top=a.top+\"px\";d.style.display=\"block\"});b(\".plusTargetContainer\").live(\"mouseleave\",function(a){if(a.relatedTarget&&a.relatedTarget.className===\"plusButton\")return;e=null;d.style.display=\"none\";this.style.border=\"solid transparent 1px\"});b(\".plusButton\").click(function(){c++;var d=b(e);if(this.innerHTML===\"+\"){h(d);d.addClass(\"activeViewer\");this.innerHTML=\"-\"}else{var f=b(e).children().first().tmplItem(),j=f.nodes,g=document.createElement(\"div\"),k=j[0].parentNode,l=f.data.depth,i=d.data(\"plusViewerInitialState\");g.innerHTML=i.wrapper;if(f.data.persist){a=f.data;d.data(\"plusViewerState\",a)}else{a=i;d.data(\"plusViewerState\",b.extend(true,{},a))}b.tmpl(a.tmpls[0].tmpl,a.data).appendTo(b(g).find(\".plusViewerTarget\"));jQuery(j).remove();k.innerHTML=g.innerHTML;this.innerHTML=\"+\";d.removeClass(\"activeViewer\")}a=null;c--})})})(jQuery);if(!this.JSON)this.JSON={};(function(){function c(a){return a<10?\"0\"+a:a}if(typeof Date.prototype.toJSON!==\"function\"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+c(this.getUTCMonth()+1)+\"-\"+c(this.getUTCDate())+\"T\"+c(this.getUTCHours())+\":\"+c(this.getUTCMinutes())+\":\"+c(this.getUTCSeconds())+\"Z\":null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()}}var h=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,f=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,a,d,i={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},b;function g(a){f.lastIndex=0;return f.test(a)?'\"'+a.replace(f,function(a){var b=i[a];return typeof b===\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function e(m,n){var i,j,h,k,l=a,f,c=n[m];if(c&&typeof c===\"object\"&&typeof c.toJSON===\"function\")c=c.toJSON(m);if(typeof b===\"function\")c=b.call(n,m,c);switch(typeof c){case\"string\":return g(c);case\"number\":return isFinite(c)?String(c):\"null\";case\"boolean\":case\"null\":return String(c);case\"object\":if(!c)return\"null\";a+=d;f=[];if(Object.prototype.toString.apply(c)===\"[object Array]\"){k=c.length;for(i=0;i<k;i+=1)f[i]=e(i,c)||\"null\";h=f.length===0?\"[]\":a?\"[\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"]\":\"[\"+f.join(\",\")+\"]\";a=l;return h}if(b&&typeof b===\"object\"){k=b.length;for(i=0;i<k;i+=1){j=b[i];if(typeof j===\"string\"){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}}}else for(j in c)if(Object.hasOwnProperty.call(c,j)){h=e(j,c);h&&f.push(g(j)+(a?\": \":\":\")+h)}h=f.length===0?\"{}\":a?\"{\\n\"+a+f.join(\",\\n\"+a)+\"\\n\"+l+\"}\":\"{\"+f.join(\",\")+\"}\";a=l;return h}}if(typeof JSON.stringify!==\"function\")JSON.stringify=function(h,c,f){var g;a=\"\";d=\"\";if(typeof f===\"number\")for(g=0;g<f;g+=1)d+=\" \";else if(typeof f===\"string\")d=f;b=c;if(c&&typeof c!==\"function\"&&(typeof c!==\"object\"||typeof c.length!==\"number\"))throw new Error(\"JSON.stringify\");return e(\"\",{\"\":h})};if(typeof JSON.parse!==\"function\")JSON.parse=function(a,c){var b;function d(f,g){var b,e,a=f[g];if(a&&typeof a===\"object\")for(b in a)if(Object.hasOwnProperty.call(a,b)){e=d(a,b);if(e!==undefined)a[b]=e;else delete a[b]}return c.call(f,g,a)}a=String(a);h.lastIndex=0;if(h.test(a))a=a.replace(h,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)});if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){b=eval(\"(\"+a+\")\");return typeof c===\"function\"?d({\"\":b},\"\"):b}throw new SyntaxError(\"JSON.parse\");}})();
</script>
<hr />






<strong><em>UPDATE:</em></strong> A joint announcement has just been made by jQuery and Microsoft that the <em>jQuery Templates</em>, <em>Data Link</em> and <em>Globalization</em> plugins are now <em>'Official jQuery Plugins'</em>. In addition, a full set of documentation for the <em>jQuery Templates</em> and <em>Data Link</em> plugins is now available on the <a href=\"http://api.jquery.com/\">http://api.jquery.com/</a> site. 

See my next post: <a href=\"http://www.borismoore.com/2010/10/jquery-templates-is-now-official-jquery.html\">jQuery Templates is now an Official jQuery Plugin</a> for details.
<hr />








In my <a href=\"http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html\">last post</a>, I said I planned to start a series of posts introducing <i>jQuery Templates</i>. This is the first of that series. This post also introduces the <a href=\"#sampleViewer\">Sample Viewer</a>, which you can use to try out your own jQuery templates.

In a sense <em>jQuery Templates</em> consists of <em>three</em> plugins: <em>.tmpl(), .tmplItem() </em>and <em>.template()</em>, and each one comes in two flavors: <em>instance </em>plugin and <em>static </em>plugin.

From a basic scenario point of view, it is like this:
<ul>
<li><em>.tmpl()</em>: <em>Render</em> the template</li>
<li><em>.tmplItem()</em>: <em>Find</em> the template item</li>
<li><em>.template()</em>: <em>Compile/Store</em> the template</li>
</ul>The template itself is any HTML markup, along with any of a set of <i>template tags</i> which enable some very rich scenarios for creating data-driven UI.

The current set of tags that are supported in jQuery templates are:
<ul>
<li><em>${...}</em>: <em>Evaluate</em> fields or expression</li>
<li><em>{{each ...}}...{{/each}}</em>: <em>Iterate</em> without creating template items</li>
<li><em>{{if ...}}...{{else ...}}...{{/if}}</em>: <em>Conditional</em> sections</li>
<li><em>{{html ...}}</em>: <em>Insert markup</em> from data </li>
<li><em>{{tmpl ...}}</em>: <em>Composition</em>, as template items</li>
<li><em>{{wrap ...}}...{{/wrap}}</em>: <em>Composition</em>, plus incorporation of wrapped HTML</li>
</ul>This blog will be the first of a series in which I hope to drill into the role of each of those APIs and tags. 

For this first blog, we'll start with the simplest possible scenario. We'll use just the <em>.tmpl()</em> API, for rendering a template, and the <em>${...}</em> template tag, for inserting data values into the rendered output...

So here goes:
<h4>








Rendering a template using local data within the page</h4>Here is some data:
<pre class=\"brush: js;\">var movies = [
    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
];</pre>Here is some markup to be used as a template:
<pre class=\"brush: xml;\">&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
    &lt;/li&gt;
&lt;/script&gt;</pre>and a target element where we are going to render the result of rendering the template against our data:
<pre class=\"brush: xml;\">&lt;ul id=\"results\"&gt;&lt;/ul&gt;</pre>And here is some code to take the template, render it with the data, and append the resulting HTML as content under our target element:
<pre class=\"brush: js;\">$( \"#movieTemplate\" ).tmpl( movies )
    .appendTo( \"#results\" );</pre>In the above code, we get a jQuery wrapped set containing our template markup, and use the <em>.tmpl()</em> plugin method (to which we pass the data) to render the template. Then we chain with the <i>appendTo</i> method to append the results under our target element:
<div class=\"demo\">








<strong>Demo:</strong>
<ul id=\"results1a\"></ul></div>As you see the template got rendered once for each item in the <i>movies</i> array. Data values are inserted using the template tag <i>${...}</i>. In fact <i>${expression}</i> inserts the (HTML-encoded) result of evaluating the <i>expression</i> term, in the context of the current item.  

The template engine actually exposes the current data item as the variable <i>$data</i>, and also exposes each of the fields of the current data item as individual variables. So the most simplest use-case of <i>${...}</i> is just with a field name as expression, such as <i>${ReleaseYear}</i>. This is actually equivalent to <i>${$data.ReleaseYear}</i> and inserts the value of that field on the current data item. Pretty straightforward.

Here is the complete code of our example:

<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;

&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})
    &lt;/li&gt;
&lt;/script&gt;

&lt;ul id=\"results\"&gt;&lt;/ul&gt;

&lt;script type=\"text/javascript\"&gt;
    var movies = [
        { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
        { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
    ];

    $( \"#movieTemplate\" ).tmpl( movies )
        .appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>








Playing with the data and the template: Sample Viewer</h4>To get the feeling of how it works, here is the same demo again, but this time I have used a special Sample Viewer script which is integrated into my blog, so that if you mouse over the demo, you will see a little '+' button that you can click on. The result will be a tabbed view in which you can see the data and the template, as well as the result:
<div class=\"plusViewer edit\">








<strong>Demo with Sample Viewer</strong> (Mouse over...)
<ul id=\"results1b\"></ul></div>Try mousing over the demo above, clicking on the '+' button, and modifying the data or the template under the respective tabs. Go back to the result tab and you will see how it renders. Click on the '-' button, and you will be back with the orginal data and template...

By the way, this sample viewer is actually implemented using jQuery templates, and illustrates the kind of dynamic interactive client-side UI that can be built very easily with jQuery templates. Maybe at some point I'll reach the point of blogging about how I went about building the sample viewer. But for now, let's get back to just playing with it. For example, if you want to just change the data, and see how the template rendering works with your changes, here are some examples of changes to the data that you could explore:
<h4>








Changing the data</h4>Mouse over the demo above and expand the <i>Sample Viewer</i>. Now try copying and pasting the data examples below into the <i>Data</i> tab, and then switching back to the <i>Result</i> tab.

<em>Change values, number of elements etc.</em>
<pre class=\"code\">[
    { \"Name\": \"The BLUE Violin\", \"ReleaseYear\": \"1998\" }
]</pre><i>Conclusion:</i> It actually is data-driven :-)

<em>Remove some fields and add others:</em>
<pre class=\"code\">[
    { \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\" },
    { \"Name\": \"Eyes Wide Shut\"  },
    { \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> It ignores the missing/undefined values without error. If you put the value of those fields to null or to the empty string, the result is the same. And of course the added fields have no effect, unless you want to add <i>${Director}</i> to the template. (Try it...)

<em>Replace the array with a single object:</em>
<pre class=\"code\">{ Name: \"The Red Violin\", ReleaseYear: \"1998\" }</pre><i>Conclusion:</i> The templating engine is smart about arrays. Pass an object and it renders the template once, with the object as data item. Pass it an array and it creates a template item (a rendered template) for each of the data items in the array.

<em>Set the data to null:</em>
<pre class=\"code\">null</pre><i>Conclusion:</i> If you pass no data at all, the templating engine still renders the template once, but the current data item is null. 

We will see that there are many scenarios where you are just rendering boiler-plate, or where  the template pulls in data from other places than the data item, so passing data to the template is not always appropriate or relevant. It may be a nested template, and use data from the parent item. It may have template tags whose parameters are not simple values, but function calls, and the template is driven by the data returned by that function call. For example it might include <i>{{each myApp.getData(foo)}}</i>, or <i>${myApp.getData(foo)}</i>. 

In this blog I am staying with much simpler examples, but we will see in later blogs how passing functions to template tags is extremely common. 

<em>Include some HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style=\"color: Red;\"&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><i>Conclusion:</i> This does <i>not</i> change the formatting of the text. Instead, it shows the markup in the rendered UI. This is by design: <i>${expression}</i> HTML-encodes the value before inserting it into the DOM. If you actually want your markup to get inserted into the DOM, then use the <i>{{html ...}}</i> template tag rather than the <i>${...}</i> template tag. You can try it now: go to the <i>#movieTemplate</i> tab and replace ${Name} by {{html Name}}. Now the markup will not be escaped, and the data will actually get inserted as HTML. (We'll come back to this lower down in the blog).

One detail: the sample viewer is using <a href=\"http://www.json.org/js.html\">JSON2</a> to convert between string expressions and JavaScript objects. So the text you are editing above is actually JSON, not JavaScript literals. That's why the keys are wrapped in quotes. Try removing them, and the sample viewer will tell you that you have a syntax error! But in your script, of course, you have literals, and those quotes can be omitted (as long as you avoid JavaScript keywords!)
<h4>








Changing the template</h4>Let's try changing the template, now, rather than the data. For convenience, here is the sample viewer again. This time I set it to show the tabs from the get-go, so you don't need to mouse over and click the '+' button...

<strong><a href=\"\" name=\"sampleViewer\">Sample Viewer</a></strong>
<div class=\"plusViewer edit tabs\">








<ul id=\"results1c\"></ul></div>So try copying and pasting the template examples below into the <i>#movieTemplate</i> tab, and then switching back to the <i>Result</i> tab.

<em>Add some text:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (Released in the year ${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect!

<em>Add some markup and some formatting:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (&lt;span style=\"color: Blue;\"&gt;${ReleaseYear}&lt;span&gt;)
&lt;/li&gt;</pre><i>Conclusion:</i> It works as you would expect...

<em>Add simple JavaScript expressions:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name.toUpperCase()}&lt;/b&gt; (${parseInt(ReleaseYear) + 100})
&lt;/li&gt;</pre><i>Conclusion:</i> This works too. You can put JavaScript expressions as parameters to the tags. 

But don't go overboard! There is not a complete JavaScript parser in the context of inline expressions in the template. If you have complex code, write a function, and call the function from your template, and pass parameters if you need to: <i>${myFunction(a,b)}</i>. (More on that in a later blog...) 

<em>Add another template tag:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear}) - Director: ${Director}
&lt;/li&gt;</pre><i>Conclusion:</i> Nothing yet - there is no Director field... 

<em>Now change the data too:</em>
<pre class=\"code\">[
    { \"Name\": \"The Red Violin\", \"ReleaseYear\": \"1998\", \"Director\": \"Francois Girard\" },
    { \"Name\": \"Eyes Wide Shut\", \"ReleaseYear\": \"1999\", \"Director\": \"Stanley Kubrick\" },
    { \"Name\": \"The Inheritance\", \"ReleaseYear\": \"1976\", \"Director\": \"Mauro Bolognini\" }
]</pre><i>Conclusion:</i> Yes, it works as expected!

Finally let's make the change I mentioned in the previous section, and get a 'teaser' on one of the other template tags to be covered in later blogs: the <i>{{html ...}}</i> tag... 

<em>First, include HTML markup in the data:</em>
<pre class=\"code\">{ \"Name\": \"The &lt;strong style='color: Red;'&gt;Red&lt;/strong&gt; Violin\", \"ReleaseYear\": \"1998\" }</pre><em>Now change the template to use the {{html ...}} template tag instead of the ${...} template tag:</em>
<pre class=\"code\">&lt;li&gt;
    &lt;b&gt;{{html Name}}&lt;/b&gt; (${ReleaseYear})
&lt;/li&gt;</pre><i>Conclusion:</i> Thanks to the <i>{{html ...}}</i> tag, you can insert HTML markup into the DOM, as HTML.  

Combining some of the changes above to data and template, here is a working example that illustrates what you did, and which you can use for exploring further changes: 

<strong>Sample Viewer</strong>
<div class=\"plusViewer edit tabs\">








<ul id=\"results2\"></ul></div>And here is the complete code of our modified example:
<pre class=\"brush: js; toolbar: true;\">&lt;script src=\"http://code.jquery.com/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;
&lt;script src=\"jquery.tmpl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;

&lt;script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\"&gt;
    &lt;li&gt;
        &lt;b&gt;{{html Name}}&lt;/b&gt; 
        (&lt;span style=\"color: Blue\"&gt; ${ReleaseYear}&lt;/span&gt;) - Director: ${Director}
    &lt;/li&gt;
&lt;/script&gt;

&lt;ul id=\"results\"&gt;&lt;/ul&gt;

&lt;script type=\"text/javascript\"&gt;
    var movies = [
        { Name: \"The &lt;strong style='color: red'&gt;Red&lt;/strong&gt; Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
        { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
    ];

    $( \"#movieTemplate\" ).tmpl( movies )
        .appendTo( \"#results\" );
&lt;/script&gt;
</pre><h4>








What's next?...</h4>Of course we have only just started scratching the surface here. I hope to provide more blogs soon to continue exploring the possibilities of jQuery templates.

In the meantime, you can download the code for jQuery templates from <a href=\"http://github.com/jquery/jquery-tmpl\">http://github.com/jquery/jquery-tmpl</a>. <script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\">
<li>
    <b>${Name}</b> (${ReleaseYear})
</li>
</script><script id=\"movieTemplate2\" type=\"text/x-jquery-tmpl\">
<li>
    <b>{{html Name}}</b> (<span style=\"color: Blue;\">${ReleaseYear}</span>) - Director: ${Director}
</li>
</script><script type=\"text/javascript\">
 var movies = [
  { Name: \"The Red Violin\", ReleaseYear: \"1998\" },
  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },
  { Name: \"The Inheritance\", ReleaseYear: \"1976\" }
 ];
 
 var movies2 = [
    { Name: \"The <strong style='color: red'>Red</strong> Violin\", ReleaseYear: \"1998\", Director: \"Francois Girard\" },
    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },
    { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }
 ];
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1a\" );
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1b\" );
 $( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#results1c\" );
 $( \"#movieTemplate2\" ).tmpl( movies2 ).appendTo( \"#results2\" );
</script><img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/HzZeYM-b0VY\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/2182287749356001745/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html#comment-form") (title . "32 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2182287749356001745?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/2182287749356001745?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/HzZeYM-b0VY/introducing-jquery-templates-1-first.html") (title . "Introducing jQuery Templates 1: First Steps"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "32") (feedburner:origLink nil "http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html"))) ("From Microsoft to Open Source" "Since earlier this year, I have been working on <em>jQuery Templates</em>, as well as some other contributions to jQuery. The starting point was an initial prototype by John Resig, sometimes referred to as his <i>micro-templating</i> proposal. I hope to follow this post with a series of posts on <em>jQuery Templates</em>. <br />
<br />
But before beginning those posts I wanted to to give some background:<br />
<h4>Microsoft and jQuery</h4>At Microsoft, we had a pretty cool <a href=\"http://aspnet.codeplex.com/releases/view/34488\">client templating implementation</a> which <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a> and I created. This was part of the Microsoft AJAX Library. The client templates were integrated with live data-linking, and with a script loader.&nbsp;We also worked on some very interesting integration between all that and jQuery, so that if you were using jQuery you could get jQuery-style APIs for the MS AJAX features, and use selectors, fluent-style APIs etc.<br />
<br />
But after reaching the point of releasing Preview 6,&nbsp;and getting very close to a final release, our management team decided to make a radical change. Client-side AJAX platforms are all about performance and optimization of Web requests, and in a sense we were in a contradictory situation. - We were encouraging our developers to use both the MS AJAX platform and jQuery in their client apps, but inevitably there was some overlap and the inclusion of both platforms in their apps was not completely optimal.<br />
<br />
So the change was that from that point on we would not just provide support for using jQuery alongside our own client-side Microsoft AJAX platform. We would instead begin to offer contributions directly to jQuery.<br />
<br />
In fact while jQuery has some very cool features, there were a number of features in our AJAX platform which were not in jQuery, and indeed were pretty much ahead of the curve as far as AJAX platforms in general are concerned -&nbsp;or at least that is my view :-). Amongst those features -&nbsp;our client templates, our concept of observable JavaScript objects and arrays (which we now refer to as <em>\"data-linking\"</em>), our globalization support, and our script loader. <br />
<h4>Moving to Open Source</h4>So we began the process of completely redesigning and re-implementing some of those features as pure jQuery plugins or extensions.&nbsp;The goal was very strongly towards lean and clean JavaScript code; to follow JavaScript best-practice for coding -&nbsp;in the sense of optimal use of the JavaScript language itself; and <em>not</em> to attempt to squeeze it into a strongly-typed or object-orientated (in the C# or Java sense) paradigm -&nbsp;or in general bring to bear coding habits and patterns that come from C# and are not really 'at home' in JavaScript code.<br />
<br />
The work is taking place as a true open source effort, hosted on GitHub, and in touch with the community. I have been having a great time as a developer working in that context, and enjoying every minute of it!<br />
<br />
So far we have three projects on GitHub: <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a>, <a href=\"http://github.com/nje/jquery-datalink\">jQuery Data Linking</a>, and&nbsp;<a href=\"http://github.com/nje/jquery-glob\">jQuery Globalization</a>. We are also working on bringing our original Script Loader code into a form that might be optimal for jQuery.&nbsp;The globalization plugin was announced <a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\">here</a>, and is already seeing a lot of use. jQuery Templates has been under very active development recently, and will be the subject of some of my upcoming blogs. And jQuery Data-Linking will probably see some more intensive development in the coming weeks, and is likely to include some very interesting integration with jQuery Templates...<br />
<br />
I am looking forward to sharing more of these Open Source efforts with you over the coming weeks, starting with a <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">series of blogs</a> introducing jQuery Templates...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/MuT9YPfvOro\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/3709530129956699146/comments/default" (19622 35118) old 8 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-3709530129956699146") (published nil "2010-09-22T16:27:00.000-07:00") (updated nil "2010-10-01T18:21:50.847-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2010-10-01T18:21:50.847-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "ajax"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQueryTemplates"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "jQuery"))) (title nil "From Microsoft to Open Source") (content ((type . "html")) "Since earlier this year, I have been working on <em>jQuery Templates</em>, as well as some other contributions to jQuery. The starting point was an initial prototype by John Resig, sometimes referred to as his <i>micro-templating</i> proposal. I hope to follow this post with a series of posts on <em>jQuery Templates</em>. <br />
<br />
But before beginning those posts I wanted to to give some background:<br />
<h4>Microsoft and jQuery</h4>At Microsoft, we had a pretty cool <a href=\"http://aspnet.codeplex.com/releases/view/34488\">client templating implementation</a> which <a href=\"http://weblogs.asp.net/infinitiesloop/\">Dave Reed</a> and I created. This was part of the Microsoft AJAX Library. The client templates were integrated with live data-linking, and with a script loader.&nbsp;We also worked on some very interesting integration between all that and jQuery, so that if you were using jQuery you could get jQuery-style APIs for the MS AJAX features, and use selectors, fluent-style APIs etc.<br />
<br />
But after reaching the point of releasing Preview 6,&nbsp;and getting very close to a final release, our management team decided to make a radical change. Client-side AJAX platforms are all about performance and optimization of Web requests, and in a sense we were in a contradictory situation. - We were encouraging our developers to use both the MS AJAX platform and jQuery in their client apps, but inevitably there was some overlap and the inclusion of both platforms in their apps was not completely optimal.<br />
<br />
So the change was that from that point on we would not just provide support for using jQuery alongside our own client-side Microsoft AJAX platform. We would instead begin to offer contributions directly to jQuery.<br />
<br />
In fact while jQuery has some very cool features, there were a number of features in our AJAX platform which were not in jQuery, and indeed were pretty much ahead of the curve as far as AJAX platforms in general are concerned -&nbsp;or at least that is my view :-). Amongst those features -&nbsp;our client templates, our concept of observable JavaScript objects and arrays (which we now refer to as <em>\"data-linking\"</em>), our globalization support, and our script loader. <br />
<h4>Moving to Open Source</h4>So we began the process of completely redesigning and re-implementing some of those features as pure jQuery plugins or extensions.&nbsp;The goal was very strongly towards lean and clean JavaScript code; to follow JavaScript best-practice for coding -&nbsp;in the sense of optimal use of the JavaScript language itself; and <em>not</em> to attempt to squeeze it into a strongly-typed or object-orientated (in the C# or Java sense) paradigm -&nbsp;or in general bring to bear coding habits and patterns that come from C# and are not really 'at home' in JavaScript code.<br />
<br />
The work is taking place as a true open source effort, hosted on GitHub, and in touch with the community. I have been having a great time as a developer working in that context, and enjoying every minute of it!<br />
<br />
So far we have three projects on GitHub: <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a>, <a href=\"http://github.com/nje/jquery-datalink\">jQuery Data Linking</a>, and&nbsp;<a href=\"http://github.com/nje/jquery-glob\">jQuery Globalization</a>. We are also working on bringing our original Script Loader code into a form that might be optimal for jQuery.&nbsp;The globalization plugin was announced <a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\">here</a>, and is already seeing a lot of use. jQuery Templates has been under very active development recently, and will be the subject of some of my upcoming blogs. And jQuery Data-Linking will probably see some more intensive development in the coming weeks, and is likely to include some very interesting integration with jQuery Templates...<br />
<br />
I am looking forward to sharing more of these Open Source efforts with you over the coming weeks, starting with a <a href=\"http://www.borismoore.com/2010/09/introducing-jquery-templates-1-first.html\">series of blogs</a> introducing jQuery Templates...<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/MuT9YPfvOro\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/3709530129956699146/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html#comment-form") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/3709530129956699146?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/3709530129956699146?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/MuT9YPfvOro/from-microsoft-to-open-source.html") (title . "From Microsoft to Open Source"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "5") (feedburner:origLink nil "http://www.borismoore.com/2010/09/from-microsoft-to-open-source.html"))) ("Dancing with Data" "Well, finally, this blog will start. After so long always planning to start a blog, but never actually doing so, now, my current work on jQuery templates is reaching the point where I really can't 'hide' any longer! <br />
<br />
The immediate purpose of this blog, then, will be to share with others what I feel to be the really rich potential of building dynamic Web applications using client-side templates, and in particular, the <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a> I have been working on these past four months or so. But more broadly, I hope to share aspects of my <i>\"Dancing with Data\"</i> journey that I think may be interesting to others, or on which I would love to get feedback. <br />
<h4>
Why \"Dancing with Data\"?</h4>
I referred to my<i> \"Dancing with Data\"</i> journey, and in fact my journey through life has so often I feel drawn me into a fascination with apparent opposites. Dance and Data. Order and Chaos, Mathematics and Music, Science and Spirituality.<br />
<br />
I studied mathematics at college, went on to do research studies in theoretical physics (actually<a href=\"http://en.wikipedia.org/wiki/Twistor_Theory\"> twistor theory</a>) under <a href=\"http://en.wikipedia.org/wiki/Roger_Penrose\">Roger Penrose</a>, then, rather than submit my doctoral thesis, went off in a different direction, getting involved in working in experimental theater and voice work, with the <a href=\"http://en.wikipedia.org/wiki/Roy_Hart\">Roy Hart Theatre</a>, and soon after, moving from the UK to France with the theater company, and also playing clarinet and composing music for theater performances.<br />
<br />
Then, some time later, music took me back to mathematics, in a sense: For a music composition I was working on, I got my first music software, sampling keyboard, and so on, and from there started to teach myself programming, and began to develop my own music software tools for composition and real-time improvisation. And basically it was music that took me into the world of software development, and ultimately to becoming a professional developer.<br />
<br />
So from there, it was \"data\" too that fascinated me. Not so much data itself, but data-driven applications and UI. In a sense, life itself is data-driven, if you think about genomes and DNA sequences, for example. Yet within that 'prescriptive' concept, so much richness and 'innovation', coming, as it were, from the meeting of chaos with order, through mutations and selection, with the interplay between gene expression and environmental factors. I would almost say that life itself, in fact, is a kind of dance with data.<br />
<br />
Right at the beginning of the emergence of XML I created a client-side (in the browser) declarative stylesheet language for transforming XML data fetched from the server, into HTML. This led me to become a member of the XSLT working group on the W3C. - And later, to join Microsoft, where I was a member of the team which created InfoPath before, later, joining the ASP.NET team. And most recently, it led me to be involved in working with the open source community and with jQuery, once again exploring this interplay between data and UI, where the user too is a player, and the result is an interactive responsive application; where&nbsp;the user, too, if you like, is 'dancing with the data'.<br />
<h4>
Opposites</h4>
Opposites then, but through that opposing dialectic, the richness of the interplay. I feel as if my contribution is about bringing together these opposites. Facilitating, in some way. Using my own logical analytic capabilities, but following at the same time some kind of intuitive path, a gut feeling, and seeking the innovative richness that can occur when the goal is not just to compete, or to emulate, (or, dare I say it - in&nbsp;some cases at least - to copy), the competition - rather, the goal is to follow what seems right, what seems to make sense, what seems to be suggested by the underlying patterns, what seems to fit the user need.<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/fFMBYqcbR-E\" height=\"1\" width=\"1\"/>" "http://www.borismoore.com/feeds/1009219366886146159/comments/default" (19611 59128) old 9 nil nil ((id nil "tag:blogger.com,1999:blog-3627888979577168137.post-1009219366886146159") (published nil "2010-09-20T18:10:00.000-07:00") (updated nil "2010-09-23T16:47:04.143-07:00") (app:edited ((xmlns:app . "http://www.w3.org/2007/app")) "2010-09-23T16:47:04.143-07:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "me"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "life"))) (title nil "Dancing with Data") (content ((type . "html")) "Well, finally, this blog will start. After so long always planning to start a blog, but never actually doing so, now, my current work on jQuery templates is reaching the point where I really can't 'hide' any longer! <br />
<br />
The immediate purpose of this blog, then, will be to share with others what I feel to be the really rich potential of building dynamic Web applications using client-side templates, and in particular, the <a href=\"http://github.com/nje/jquery-tmpl\">jQuery Templates</a> I have been working on these past four months or so. But more broadly, I hope to share aspects of my <i>\"Dancing with Data\"</i> journey that I think may be interesting to others, or on which I would love to get feedback. <br />
<h4>




Why \"Dancing with Data\"?</h4>
I referred to my<i> \"Dancing with Data\"</i> journey, and in fact my journey through life has so often I feel drawn me into a fascination with apparent opposites. Dance and Data. Order and Chaos, Mathematics and Music, Science and Spirituality.<br />
<br />
I studied mathematics at college, went on to do research studies in theoretical physics (actually<a href=\"http://en.wikipedia.org/wiki/Twistor_Theory\"> twistor theory</a>) under <a href=\"http://en.wikipedia.org/wiki/Roger_Penrose\">Roger Penrose</a>, then, rather than submit my doctoral thesis, went off in a different direction, getting involved in working in experimental theater and voice work, with the <a href=\"http://en.wikipedia.org/wiki/Roy_Hart\">Roy Hart Theatre</a>, and soon after, moving from the UK to France with the theater company, and also playing clarinet and composing music for theater performances.<br />
<br />
Then, some time later, music took me back to mathematics, in a sense: For a music composition I was working on, I got my first music software, sampling keyboard, and so on, and from there started to teach myself programming, and began to develop my own music software tools for composition and real-time improvisation. And basically it was music that took me into the world of software development, and ultimately to becoming a professional developer.<br />
<br />
So from there, it was \"data\" too that fascinated me. Not so much data itself, but data-driven applications and UI. In a sense, life itself is data-driven, if you think about genomes and DNA sequences, for example. Yet within that 'prescriptive' concept, so much richness and 'innovation', coming, as it were, from the meeting of chaos with order, through mutations and selection, with the interplay between gene expression and environmental factors. I would almost say that life itself, in fact, is a kind of dance with data.<br />
<br />
Right at the beginning of the emergence of XML I created a client-side (in the browser) declarative stylesheet language for transforming XML data fetched from the server, into HTML. This led me to become a member of the XSLT working group on the W3C. - And later, to join Microsoft, where I was a member of the team which created InfoPath before, later, joining the ASP.NET team. And most recently, it led me to be involved in working with the open source community and with jQuery, once again exploring this interplay between data and UI, where the user too is a player, and the result is an interactive responsive application; where&nbsp;the user, too, if you like, is 'dancing with the data'.<br />
<h4>




Opposites</h4>
Opposites then, but through that opposing dialectic, the richness of the interplay. I feel as if my contribution is about bringing together these opposites. Facilitating, in some way. Using my own logical analytic capabilities, but following at the same time some kind of intuitive path, a gut feeling, and seeking the innovative richness that can occur when the goal is not just to compete, or to emulate, (or, dare I say it - in&nbsp;some cases at least - to copy), the competition - rather, the goal is to follow what seems right, what seems to make sense, what seems to be suggested by the underlying patterns, what seems to fit the user need.<img src=\"http://feeds.feedburner.com/~r/DancingWithData/~4/fFMBYqcbR-E\" height=\"1\" width=\"1\"/>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://www.borismoore.com/feeds/1009219366886146159/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://www.borismoore.com/2010/09/dancing-with-data.html#comment-form") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1009219366886146159?v=2"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3627888979577168137/posts/default/1009219366886146159?v=2"))) (link ((rel . "alternate") (type . "text/html") (href . "http://feedproxy.google.com/~r/DancingWithData/~3/fFMBYqcbR-E/dancing-with-data.html") (title . "Dancing with Data"))) (author nil (name nil "Boris Moore") (uri nil "http://www.blogger.com/profile/17923416771395046921") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "32") (height . "32") (src . "http://2.bp.blogspot.com/-QljgokJKScs/Tq9i9TL7NHI/AAAAAAAAAF4/77tjecdod94/s1600/assets.github.com%25252Fimages%25252Fgravatars%25252Fgravatar-140.png")))) (thr:total nil "0") (feedburner:origLink nil "http://www.borismoore.com/2010/09/dancing-with-data.html"))))