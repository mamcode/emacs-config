;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (20852 17400 532894) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2013-04-14T03:01:36+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp") (link ((href . "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/"))) (id nil "http://keramida.wordpress.com/?p=2231") (updated nil "2013-04-13T08:43:20+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
   119 BACKUP/.emacs
    84 BACKUP/elisp/keramida-w3m.el
    90 BACKUP/elisp/keramida-keys.el
   156 BACKUP/elisp/keramida-irc.el
  5449 BACKUP/elisp/erlang.el
   892 BACKUP/elisp/fill-column-indicator.el
   344 BACKUP/elisp/keramida-erc.el
    87 BACKUP/elisp/keramida-chrome.el
    89 BACKUP/elisp/keramida-autoload.el
   141 BACKUP/elisp/keramida-ui.el
    42 BACKUP/elisp/keramida-slime.el
  1082 BACKUP/elisp/ace-jump-mode.el
     2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
   907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
    26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
   502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
    37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
   808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
   111 BACKUP/elisp/scala-mode2/scala-mode2.el
   121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
  1103 BACKUP/elisp/php-mode.el
   142 BACKUP/elisp/themes/cobalt-theme.el
   665 BACKUP/elisp/themes/zenburn-theme.el
   142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
   115 BACKUP/elisp/themes/tomorrow-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
   339 BACKUP/elisp/cmake-mode.el
    95 BACKUP/elisp/keramida-cc-extra.el
  1341 BACKUP/elisp/lua-mode.el
  2324 BACKUP/elisp/markdown-mode.el
   184 BACKUP/elisp/rcirc-notify.el
   167 BACKUP/elisp/keramida-defaults.el
   203 BACKUP/elisp/keramida-hooks.el
    43 BACKUP/elisp/keramida-lang.el
   435 BACKUP/elisp/edit-server.el
   709 BACKUP/elisp/slang-mode.el
    66 BACKUP/elisp/keramida-eshell.el
 19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
  (let ((file-forms nil))
    ;; Keep reading Lisp expressions, until we hit EOF,
    ;; and just add one entry for each toplevel form
    ;; to `file-forms'.
    (condition-case err
        (with-temp-buffer
          (insert-file file-name)
          (goto-char (point-min))
          (while (&lt; (point) (point-max))
            (let* ((expr (read (current-buffer)))
                   (form (first expr)))
              (setq file-forms (cons form file-forms)))))
      (end-of-file nil))
    (reverse file-forms)))

(defun file-forms-alist (file-name)
  (let ((forms-table (make-hash-table :test #'equal)))
    ;; Build a hash that maps form-name =&gt; count for all the
    ;; top-level forms of the `file-name' file.
    (dolist (form (file-forms-list file-name))
      (let ((form-name (format \"%s\" form)))
        (puthash form-name (1+ (gethash form-name forms-table 0))
                 forms-table)))
    ;; Convert the hash table to an alist of the form:
    ;;    ((form-name . count) (form-name-2 . count-2) ...)
    (let ((forms-alist nil))
      (maphash (lambda (form-name form-count)
                 (setq forms-alist (cons (cons form-name form-count)
                                         forms-alist)))
               forms-table)
      forms-alist)))

(progn
  (insert \"\\n\")
  (insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
  (let ((total-forms 0))
    (dolist (fc (sort (file-forms-alist \"~/.emacs\")
                      (lambda (left right)
                        (&gt; (cdr left) (cdr right)))))
      (insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
      (setq total-forms (+ total-forms (cdr fc))))
    (insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
   32 setq-default
   24 eval-after-load
   14 set-face-attribute
   14 global-set-key
    5 autoload
    4 require
    4 setq
    4 put
    3 defun
    2 when
    1 add-hook
    1 let
    1 set-display-table-slot
    1 fset
    1 tool-bar-mode
    1 scroll-bar-mode
    1 menu-bar-mode
    1 ido-mode
    1 global-hl-line-mode
    1 show-paren-mode
    1 iswitchb-mode
    1 global-font-lock-mode
    1 cua-mode
    1 column-number-mode
    1 add-to-list
    1 prefer-coding-system
  122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com"))) (entry nil (title ((type . "html")) "Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors") (link ((href . "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/"))) (id nil "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors") (updated nil "2013-04-12T19:58:00+00:00") (content ((type . "html")) "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>") (author nil (name nil "Brian Zwahr") (uri nil "http://echosa.github.com/")) (source nil (title ((type . "html")) "Category: emacs | Dev and Such") (link ((rel . "self") (href . "http://echosa.github.io/blog/categories/emacs/atom.xml"))) (id nil "http://echosa.github.com/"))) (entry nil (title ((type . "html")) "Bryan Murdock: List Foreign Keys in Your Postgresql Database") (link ((href . "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-1385815532727505725") (updated nil "2013-04-12T15:21:39+00:00") (content ((type . "html")) "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid 
  AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html")) "Raimon Grau: Running a shell command on current file") (link ((href . "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-6579520597337336421") (updated nil "2013-04-12T13:47:30+00:00") (content ((type . "html")) "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Irreal: Window Configuration and Management") (link ((href . "http://irreal.org/blog/?p=1866"))) (id nil "http://irreal.org/blog/?p=1866") (updated nil "2013-04-12T10:33:33+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Xah Lee has a couple of <a href=\"http://ergoemacs.org/emacs/emacs_winner_mode.html\">nice</a> <a href=\"http://ergoemacs.org/misc/emacs_one_max_window_vs_multi_smaller_window.html\">posts</a> on managing window configurations. One posts deals with having a single (large) frame and dividing it into several windows. The other deals with the opposite case of having several frames with one or two windows in each. I tend to prefer a single large frame (although I sometimes pop up another temporarily) while Lee likes several frames.</p>
<p>No matter, between the two posts he’s got you covered. The posts will be useful mostly for n00bs but he does mention <code>winner-mode</code> and <code>windmove</code>, packages that I only recently became aware of and started using, so there may be something there for you even if you’re an old hand.</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which everything is ephemeral") (link ((href . "http://technomancy.us/166"))) (id nil "tag:technomancy.us,2007:in%20which%20everything%20is%20ephemeral") (updated nil "2013-04-12T08:56:45+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a> 
  <a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
  that I'm not sure I can add much to it beyond anecdotes. From my
  own experience I've been a remote worker for all but a year and a
  half of my career and have loved it. The amount of time wasted by
  cars commuting is sobering, and the ability to start the day after
  simply crossing my back yard to the
  <a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
  lab</a> is not something I'd give up lightly. Especially with
  warmer weather coming up in Seattle the draw
  of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
  outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
  strong indeed.</p>

<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />

<p>But the thing about remote work is that it can be really
  difficult to do effectively. At my last job we were dedicated from
  the outset to making the fully-remote model work, and we were able
  to assemble a team that functioned fantastically well while
  drawing from talent all over the country. But in order to make
  this work we had to set things up so that no one operated in
  isolation. We had our daily stand-ups, but more important was
  spending the bulk of the time paired with another hacker over SSH
  and VoIP. And even when not paired, there was the understanding
  that you could easily grab someone to get a real-time review of
  whatever you were writing.</p>

<p>In order to facilitate this, we would usually set up a shared
  user on each laptop (or sometimes on an unused server sitting
  under a desk somewhere) and do the necessary port forwarding
  wrangling and public key management to ensure others could SSH in
  and join our <tt>tmux</tt> sessions. Given that it was something
  we relied on every day it wasn't particularly onerous to set things
  up, and over time the tools got a bit better.
  (<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
  a common repository for the team's pubkeys, etc.)</p>

<p>These days things are different—I'm at a company that
  embraces a remote/local mix of teams rather than being fully
  remote. While I've got co-workers who are happy to discuss and
  review code remotely, I can't assume everyone has spent the time
  to to facilitate remote collaboration if it's not an everyday tool
  for them. And when you're looking for another set of eyes on a
  problem, you need frictionless tools; otherwise you might not even
  bother asking for help. So I put
  together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>

<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
  projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
  fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
  has since unfortunately fallen into disrepair. (There's a great
  video on their splash page explaining things if you've got a
  couple minutes.) Basically you give it the name of a project you
  want to hack on and who you want to hack on it with, and it can
  preconfigure the host by checking out a copy, adding SSH public keys
  for all invited users, and running all the necessary setup scripts
  to get dependencies and user settings installed. Then everyone
  just SSHes into the machine and joins a shared tmux session, and
  it's all yours.</p>

<p>I had access to the private alpha of pair.io, but since
  billing hadn't been implemented yet I always felt a bit guilty
  whenever I launched a machine to work on since it would just rack
  up the hours in the author's Amazon account.</p>

<p>I'd been thinking what it would take to implement that kind of
  thing myself but had been dissuaded by the idea of writing a
  billing system. Whenever you're dealing with money on behalf of
  the user it can hardly be considered a for-fun project. But then I
  realized that can be neatly sidestepped simply by prompting for
  the user's AWS credentials while launching the instances. It turns
  out keeping those around in an encrypted cookie in the browser
  makes it possible to perform further operations on the user's
  behalf without getting into the harrowing business of storing
  secrets. It also means it can be done completely as free software,
  and it's not tied to myself at all—if I lose interest and
  wander off anyone else can pick it up and deploy on their own.</p>

<p>So I've gotten it to the point where I'm pretty happy with it. At
  just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
  it comes in handy streamlining things at work, but it's open for
  any remote collaborators who may find it useful in any kind
  of pairing contexts. If you run into any issues trying it out or
  have suggestions, please head over to
  the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
  issue tracker</a> and let me know.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs Conference 2013 videos") (link ((href . "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/"))) (id nil "http://sachachua.com/blog/?p=24677") (updated nil "2013-04-11T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p> 
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Irreal: An Elisp Challenge") (link ((href . "http://irreal.org/blog/?p=1865"))) (id nil "http://irreal.org/blog/?p=1865") (updated nil "2013-04-11T11:03:02+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here’s a simple Elisp challenge suggested by a problem from by <a href=\"http://programmingpraxis.com/2013/04/09/cyclic-equality/\">ProgrammingPraxis</a>. We call one string a cycle of another if one string can be transformed into the other by a rotation of the characters. Note that this means</p>
<ol>
<li>They have the same number of characters.</li>
<li>They have the same characters.</li>
<li>The characters are in the same order when considered as a cycle.</li>
</ol>
<p>Thus, “abc” and “cab” are cycles of each other because if “abc” is rotated right by 1 (or left by 2) it equals “cab.” Notice that “abc” and “acb” are not cycles of each other even though they meet conditions 1 and 2.</p>
<p>The challenge is to write an Elisp function, <code>cyclep</code>, that tests whether two strings are cycles of each other.</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs Conference 2013 Sketchnotes (also, PDF!)") (link ((href . "http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/"))) (id nil "http://sachachua.com/blog/?p=24660") (updated nil "2013-04-08T12:00:06+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>I cleaned them up a little and packaged them as a PDF for your viewing convenience:<br />
<a href=\"http://j.mp/emacsconf2013sketches\" title=\"http://j.mp/emacsconf2013sketches\">http://j.mp/emacsconf2013sketches</a></p>
<p>Here they are individually, too! Click on an image to view the full-sized version, and feel free to share them under the Creative Commons Attribution Licence. Enjoy!</p>

<div class=\"ngg-galleryoverview\" id=\"ngg-gallery-10-24660\">

	
	<div class=\"slideshowlink\">
		<a class=\"slideshowlink\" href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/?show=slide\">
			[Show as slideshow]		</a>
	</div>

	
	
		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-105\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - XWidgets - Joakim Verona.png\" title=\"XWidgets - Joakim Verona\">
								<img alt=\"20130330 Emacs Conf 2013 - XWidgets - Joakim Verona\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - XWidgets - Joakim Verona.png\" title=\"20130330 Emacs Conf 2013 - XWidgets - Joakim Verona\" width=\"180\" />
							</a>
			<span>XWidgets - Joakim Verona</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-99\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Emacswiki - Nic Ferrier.png\" title=\"Emacswiki - Nic Ferrier\">
								<img alt=\"20130330 Emacs Conf 2013 - Emacswiki - Nic Ferrier\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Emacswiki - Nic Ferrier.png\" title=\"20130330 Emacs Conf 2013 - Emacswiki - Nic Ferrier\" width=\"180\" />
							</a>
			<span>Emacswiki - Nic Ferrier</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-95\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Arxana - Joe Corneli.png\" title=\"Arxana - Joe Corneli\">
								<img alt=\"20130330 Emacs Conf 2013 - Arxana - Joe Corneli\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Arxana - Joe Corneli.png\" title=\"20130330 Emacs Conf 2013 - Arxana - Joe Corneli\" width=\"180\" />
							</a>
			<span>Arxana - Joe Corneli</span>
		</div>
	</div>
			<br style=\"clear: both;\" />
	 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-98\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Emacs Live - Sam Aaron.png\" title=\"Emacs Live - Sam Aaron\">
								<img alt=\"20130330 Emacs Conf 2013 - Emacs Live - Sam Aaron\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Emacs Live - Sam Aaron.png\" title=\"20130330 Emacs Conf 2013 - Emacs Live - Sam Aaron\" width=\"180\" />
							</a>
			<span>Emacs Live - Sam Aaron</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-96\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - El-get - Dimitri Fontaine.png\" title=\"El-get - Dimitri Fontaine\">
								<img alt=\"20130330 Emacs Conf 2013 - El-get - Dimitri Fontaine\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - El-get - Dimitri Fontaine.png\" title=\"20130330 Emacs Conf 2013 - El-get - Dimitri Fontaine\" width=\"180\" />
							</a>
			<span>El-get - Dimitri Fontaine</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-100\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - From Marmalade to Emacs - Michael Olson.png\" title=\"From Marmalade to Emacs - Michael Olson\">
								<img alt=\"20130330 Emacs Conf 2013 - From Marmalade to Emacs - Michael Olson\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - From Marmalade to Emacs - Michael Olson.png\" title=\"20130330 Emacs Conf 2013 - From Marmalade to Emacs - Michael Olson\" width=\"180\" />
							</a>
			<span>From Marmalade to Emacs - Michael Olson</span>
		</div>
	</div>
			<br style=\"clear: both;\" />
	 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-97\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Emacs Devel - John Wiegley.png\" title=\"Emacs Devel - John Wiegley\">
								<img alt=\"20130330 Emacs Conf 2013 - Emacs Devel - John Wiegley\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Emacs Devel - John Wiegley.png\" title=\"20130330 Emacs Conf 2013 - Emacs Devel - John Wiegley\" width=\"180\" />
							</a>
			<span>Emacs Devel - John Wiegley</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-102\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine.png\" title=\"Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine\">
								<img alt=\"20130330 Emacs Conf 2013 - Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine.png\" title=\"20130330 Emacs Conf 2013 - Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine\" width=\"180\" />
							</a>
			<span>Package Management - Nic Ferrier, Steve Purcell, Dimitri Fontaine</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-104\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Slime - Luke Gorrie.png\" title=\"Slime - Luke Gorrie\">
								<img alt=\"20130330 Emacs Conf 2013 - Slime - Luke Gorrie\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Slime - Luke Gorrie.png\" title=\"20130330 Emacs Conf 2013 - Slime - Luke Gorrie\" width=\"180\" />
							</a>
			<span>Slime - Luke Gorrie</span>
		</div>
	</div>
			<br style=\"clear: both;\" />
	 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-103\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Project Grok - Steve Yegge.png\" title=\"Project Grok - Steve Yegge\">
								<img alt=\"20130330 Emacs Conf 2013 - Project Grok - Steve Yegge\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Project Grok - Steve Yegge.png\" title=\"20130330 Emacs Conf 2013 - Project Grok - Steve Yegge\" width=\"180\" />
							</a>
			<span>Project Grok - Steve Yegge</span>
		</div>
	</div>
		 		
	<div class=\"ngg-gallery-thumbnail-box\" id=\"ngg-image-101\" style=\"width: 33%;\">
		<div class=\"ngg-gallery-thumbnail\">
			<a href=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/20130330 Emacs Conf 2013 - Lightning Talks.png\" title=\"Lightning Talks\">
								<img alt=\"20130330 Emacs Conf 2013 - Lightning Talks\" height=\"135\" src=\"http://sachachua.com/blog/wp-content/gallery/emacs-conference-2013/thumbs/thumbs_20130330 Emacs Conf 2013 - Lightning Talks.png\" title=\"20130330 Emacs Conf 2013 - Lightning Talks\" width=\"180\" />
							</a>
			<span>Lightning Talks</span>
		</div>
	</div>
		 	 	
	
 	<div class=\"ngg-clear\"></div> 	
</div>


<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">Emacs Conference 2013 Sketchnotes (also, PDF!)</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html")) "Ben Simon: Gotch of the Day: fcsh fails to execute") (link ((href . "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-8621941475180837146") (updated nil "2013-04-05T12:19:00+00:00") (content ((type . "html")) "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>

<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>

<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>

<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>

<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>

<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>

<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>

<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f"))) (entry nil (title ((type . "html")) "Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti") (link ((href . "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-1571512245931938946") (updated nil "2013-04-04T09:30:00+00:00") (content ((type . "html")) "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>

<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>

 

<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>

<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>

<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>

<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>

<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>

<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>

<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>

<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f"))) (entry nil (title ((type . "html")) "Julien Danjou: Hy, Lisp in Python") (link ((href . "http://julien.danjou.info/blog/2013/lisp-python-hy"))) (id nil "http://julien.danjou.info/blog/2013/lisp-python-hy") (updated nil "2013-04-03T22:01:20+00:00") (content ((type . "html")) "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>


<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>

<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>

<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses") (link ((href . "http://technomancy.us/165"))) (id nil "tag:technomancy.us,2007:in%20which%20we%20cater%20to%20those%20with%20an%20allergic%20reaction%20to%20parentheses") (updated nil "2013-04-01T20:42:59+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
  of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
  been talking about how parentheses are such a big barrier to
  adoption of Clojure these days. Apparently they're pretty
  intimidating when you're used to a language with a lot of curly
  braces and things. While I can't do anything about Clojure itself,
  I realized we could make some changes to Leiningen that would
  allow newcomers to return to the comfort of XML. My latest plugin
  is
  called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
  and it lets you write this:</p>

<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>

<p>...instead of this bewildering, unfamiliar invocation:</p>

<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
  <span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
  <span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
            <span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
  <span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
                 [slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>

<p>I know it probably won't be used by anyone who has spent much
  time with Clojure, but for newcomers hopefully this will remove
  one of the big blockers for enterprise developers trying out
  Clojure.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Verifying A GPG Signed File") (link ((href . "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html"))) (id nil "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html") (updated nil "2013-04-01T00:00:00+00:00") (content ((type . "html")) "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>

<p>This means you need to import the public key A0B0F199.</p>

<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>

<p>Now that you have received the public key, you can verify the file.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>

<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Meta_eX, mid flow") (link ((href . "http://www.flickr.com/photos/dotemacs/8604802867/"))) (id nil "tag:flickr.com,2004:/photo/8604802867") (updated nil "2013-03-31T09:09:22+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>

<p>Emacs Conf 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Meta_eX") (link ((href . "http://www.flickr.com/photos/dotemacs/8605905866/"))) (id nil "tag:flickr.com,2004:/photo/8605905866") (updated nil "2013-03-31T09:08:57+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>

<p>Emacs Conf, 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "John Sullivan: Vegan in Amsterdam?") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html"))) (id nil "http://johnsu01.livejournal.com/291720.html") (updated nil "2013-03-30T13:20:49+00:00") (content ((type . "html")) "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD") (link ((href . "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html"))) (id nil "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html") (updated nil "2013-03-28T00:00:00+00:00") (content ((type . "html")) "<p>You need to run exim as root. So edit Local/Makefile thus:</p>

<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>

<p>In your configuration file set:</p>

<pre class=\"example\">exim_user = root
exim_group = mail
</pre>

<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html"))) (entry nil (title ((type . "html")) "Julien Danjou: Announcing Climate, the OpenStack capacity leasing project") (link ((href . "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing"))) (id nil "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing") (updated nil "2013-03-25T17:49:23+00:00") (content ((type . "html")) "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
    <img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>

<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
    <img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>

<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml"))) (entry nil (title ((type . "html")) "Raimon Grau: Keyboardless programming") (link ((href . "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-8361928214155159241") (updated nil "2013-03-22T18:49:58+00:00") (content ((type . "html")) "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux") (link ((href . "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/"))) (id nil "http://keramida.wordpress.com/?p=2177") (updated nil "2013-03-22T17:26:25+00:00") (content ((type . "html") (xml:lang . "en")) "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
  echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
  sed -e 's/ /,/g'                                         \\
  ) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com"))) (entry nil (title ((type . "html")) "Emacs Life: Built-in table editor - The Org Manual") (link ((href . "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053.post-7863989595468572826") (updated nil "2013-03-22T16:37:12+00:00") (content ((type . "html")) "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />") (author nil (name nil "Steven Ness") (email nil "noreply@blogger.com") (uri nil "http://emacslife.blogspot.com/")) (source nil (title ((type . "html")) "emacs life") (link ((rel . "self") (href . "http://feeds.feedburner.com/emacslife"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053"))) (entry nil (title ((type . "html")) "Emacs-fu: editing with root-privileges -- once more") (link ((href . "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") (updated nil "2013-03-17T18:13:37+00:00") (content ((type . "html")) "<div class=\"outline-text-2\" id=\"text-1\">

<p>  
  We've already discussed editing root-owned files here a few times; it's one
  of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
  the job… the only way to overcome that seems to be to make it <i>really</i>
  easy to do the same from within my running emacs:
</p>



<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
  <span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
  (interactive)
  (<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
    (<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
      (<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
    (find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>


<p>  
  We could take it one step further still – overload the normal
  <code>(ido-)find-file</code> with a version that checks the permissions first, and if
  needed, use the above function to open it. But maybe that is <i>too</i> easy; we
  should be careful with root-owned files after all.
</p></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html")) "Rubén Berenguel: Extensibility in the Acme text editor") (link ((href . "http://www.mostlymaths.net/2013/03/extensibility-programming-acme-text-editor.html"))) (id nil "tag:blogger.com,1999:blog-13497321.post-5711027858515289357") (updated nil "2013-03-16T12:13:36+00:00") (content ((type . "html")) "<span style=\"text-align: justify;\">Text editors. You hate them or love them. Praise them with religious zeal, and attack them with the same power. I've been an emacs user for the last 8 years, getting as deep as I could without checking the source. And the past few months I have started using evil-mode in emacs, to get some taste of vim in my daily editing (mostly text objects.)</span><br /><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There's still a third contestant in editor-land, for me. It is Acme, the odd editor from Plan9 from Outer Space, the even-more-odd operating system from Bell Labs. There's no need to install Plan9 and fight against your current hardware. If you are in any kind of Unix derivative (Mac OS, Linux) you can install Plan9 from User Space, a port of most of Plan9 to work in user space (as you may guess.) Plan9 is a whole different thing from other Unix systems, and Acme is an incredibly different beast from any other editor you know.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I can start with a screenshot of it:</div><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s1600/Screen+shot+2013-03-09+at+12.01.54+AM.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"242\" src=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s400/Screen+shot+2013-03-09+at+12.01.54+AM.png\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">This is how this post looks like. You can see an adict window by the side</td></tr></tbody></table><div style=\"text-align: justify;\">This is Acme. I hope you like this shade of yellow and this shade of blue. There's no way to change it without getting into the source code and recompiling. It may be sound odd, but I kind of like it. It's refreshing. In emacs and vim it is very easy to get a beautiful colour scheme (I use solarized-dark everywhere I can,) but this means you can choose. And choosing means a decision, with pros, cons and whatever. Just screw it and pick blue and yellow.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Once you are used to it, you have to face something \"worse.\" If you come from emacs or vim this will sound just horrible. Wait for it. Everything is done with the mouse. Yes, you read that well. No keyboard shortcuts (well, there are a few, I'll get into these in a short while.) Mouse clicking, moving and chording. The likes. I know this will sound stupid, a waste of time, prone to carpal tunnel syndrome. Let me go on for a while.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim users alike like to bash any other editor in the grounds of speed. I can refactor faster than you can, is almost the motto. Watch how fast I type, thus how fast I change code. I'm one of these, I usually don't even have to think when I'm doing \"something\" in emacs or vim and changing stuff. But then again, how often I'm changing stuff?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim make easy changing what's there. Multiple-marks, text objects, quick jumps. All this is there just to make changing stuff fast. Agree? Ok, go on. If you don't, no problem. Go on anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Now the revelation: most of the time I'm writing, I'm creating new stuff, not rewriting or moving old stuff. Shocking? Watch your own coding/writing habits. Yes, I change what's in text strings (ci\", in vim) and is incredibly fast. In Acme, you can double-click after the first quotation mark (or just before the last) to select everything inside a pair of delimiters (a pity it is not smart enough to understand dollar-delimiters as used by LaTeX.) But the point is not that speed. What are you changing this string for? Did you wait to think about it or you just changed it, compiled it, checked it and went back to square one?</div><h2>Pause: the file servers</h2><div style=\"text-align: justify;\">Acme and Plan9 follow a special philosophy: in some sense, everything is a file. And most programs (I could say all, but I'm not that into Plan9 to be sure) act as file servers. Acme is just one of these: everything you can see in an Acme session is a file. For example, this text I'm writing (you saw it in the previous screenshot) has window ID 10. So...</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/      <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is the directory associated to this text</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/addr<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with an address position for text insertions</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/body<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the contents of the editing window (can't overwrite)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/ctl<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) that allows you to send commands to the window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/data<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data of the editing window (can overwrite)<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span></span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/errors<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with data spat by commands executed by this window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/event<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) where you can read/write the editing session</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/tag<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file holding the contents of the tag (the menu above)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/xdata<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data (addr bound) of the editing window</span><br /></pre><br /><div style=\"text-align: justify;\">What does this mean? It means I can write code in any language that can manipulate this text. Read this out loud: I script something, and make it work with the text I'm editing. Think about indenting, linting, type-checking, done against the working copy, not the real file. With output to a special buffer associated to the file. Extending the editor is just a matter of writing a program.</div><h2>Back into Acme</h2><div style=\"text-align: justify;\">Back into Acme. In Acme there's no GUI: text is the user interface. TUI. Every window is composed of two pieces: the text in the window (its \"body\") and a tag above it (in blue.) If you want to copy something, select it and middle-click on Snarf. Then put your cursor where you want to paste and middle-click on Paste. Done. Of course, Snarf and Paste can be anywhere. In the tag menu, in the text you are editing or even in another document. They are just words. Words that do the work. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">But the same works with shell commands. I can type date and middle-click it, to get the current date in a new buffer. Same goes with ls. Or even |md5sum to calculate the checksum of some text. Or append something to a window. For example, there's an easy way to make small queries to Wikipedia via the command line (see http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns) I wrote a script to do it, sitting in my path, so I can now type here &lt;wikiCLI.sh Acme with the cursor a few lines below this... and middle click.</div><br />Result:<br /><blockquote class=\"tr_bq\">\"Acme (\\; , the peak, zenith, prime) denotes the best of something. Acme or ACME may also refer to: Acme Corporation, a fictional company in the cartoon world of Looney Tunes, ACME Detective Agency, a fictional detective agency from the Carmen Sandiego seri\" \"es of computer games and television shows, Acme (album), the sixth album by the Jon Spencer Blues Explosion, Acme Novelty... http://en.wikipedia.org/wiki/Acme\"</blockquote><h2>On button clicking</h2><div style=\"text-align: justify;\">I use a Macbook (almost 5 years old already, and still kicking.) And as you may guess, it only has one button. So, how do I manage to use middle and right clicking with ease? Well, easy. Or almost. Pressing alt while clicking simulates middle click, command while clicking simulates right clicking (in Acme, not in general.) Easy, since alt is in the middle and command just right to it. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Problem is, chording is most awesome with a real 3-button mouse. Why? I'd rather search for wikiCLI.sh Acme (text editor) to get:</div><br /><blockquote class=\"tr_bq\">;; Truncated, retrying in TCP mode.<br />\"Acme is a text editor and graphical shell from the Plan 9 from Bell Labs operating system, designed and implemented by Rob Pike. It can use the sam command language. The design of the interface was influenced by Oberon. It is different from other editing \" \"environments in that it acts as a 9P server. A distinctive element of the user interface is mouse chording... http://en.wikipedia.org/wiki/Acme_(text_editor)\"</blockquote><br /><div style=\"text-align: justify;\">Doing so is a little more troublesome: select \"Acme (text editor)\" and select the command with the second button (to execute) finally click: clicking sends the last selection as argument 1 to the program. Doing so with a Mac trackpad is impossible: there's no way to simulate a left-click while middle-clicking. I also find there's a glitch here: there's no way to redirect the output of the command. It's either overwriting the selection of the argument, or goes to the +Errors window.</div><h2>Selections, regexes and other furry animals</h2><div style=\"text-align: justify;\">How can I select everything? :0,$ and right-click. Done. Want to replace all instances of acme for Acme? Middle click this: Edit ,s,acme,Acme,g The sam syntax is easy but... odd. The first , is to select everything, s to replace acme for Acme, g for global. Easy? Not much, but Acme is just different. And works. Edit is the command to execute an editing command, by the way.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">You can also do regex searches. Like :/interface/ or :/click[i|.]/. And you can get fancy, by doing filename:&lt;search-or-position&gt;. For example, acmescripting:/interface/ in another window would open acmescripting in the first instance of interface. And acmescripting:20 opens it, selecting line 20. As you can see, filename is implied to be current file in case of doubt. Also, this kind of referencing works nice with most compilers and linters.</div><h2>Keyboard shortcuts</h2>There are a few keyboard shortcuts, even if Acme is mouse-centric. Press Esc, and all text written since the last click is selected. In addition to this, we have the other standards:<br /><br />C-U ‚Äì&gt; Delete from cursor to start of line.<br />C-W ‚Äì&gt; Delete word before the cursor.<br />C-H ‚Äì&gt; Delete character before the cursor.<br />C-A ‚Äì&gt; Move cursor to start of the line.<br />C-E ‚Äì&gt; Move cursor to end of the line.<br /><br />Nothing more, nothing less. Minimal, isn't it?<br /><h2>Scripting power</h2><div style=\"text-align: justify;\">Finally, I want to show some scripting power of acme. I introduced the concept of the filesystem a few paragraphs ago. Now, let's see how it can be used. Let's say for example I'm an avid C programmer, and like to have code neatly indented. Well, an option is to write a script that uses the indent command line program to indent the text in the window. How? Now comes a trivial example, not written in the best way possible</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#9indent</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | indent -st | 9p write acme/$winid/data</span><br /></pre><br />First is to check which is the ID of the window. When invoking a command, its environment has it in a variable, aptly named winid. To overwrite the contents of the file, we set the addr to the whole file with the selector 1,$. We do so by piping to 9p with the command write. 9p is the middleman, allowing us to read and write files in 9P servers, like the ones acme and other Plan9 programs offer. Finally we get the body, indent it (-st is the command to use stdin in indent) and pipe it to data. Done! This indents a well-formed C file as expected.<br /><br />Add this file to your path and add 9indent to your tag. Ready to indent by middle-clicking.<br /><br />A slightly more complex example is to generate the output of a Markdown file. The code is as follows:<br /><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">format=$(9p read acme/$winid/tag)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Tag is \" $format</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Format in tag\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">case $format in</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"latex\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"latex ouput selected\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"latex\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"groff-mm\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"groff-mm output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"groff-mm\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"odf\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"odf ouput selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"odf\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"html\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"html output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    * )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>echo \"Unrecognized format, defaulting to html\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">esac</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | peg-markdown --to=$format | 9p write acme/new/body</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Wrote the html-markdowned version to a new buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">last=$(9p ls acme | sort -g | tail -n 1)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Get last created buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"clean\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"0,0\" | 9p write acme/$last/addr        </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"dot=addr\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"show\" | 9p write acme/$last/ctl    </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Moved to beginning\"</span><br /></pre><br /><div style=\"text-align: justify;\">This is slightly more complex, at least on the shell side. It checks the tag for one of the accepted formats for peg-markdown and then creates the formatted output in a new window, by writing to acme/new/body. Then I want the cursor to be at the beginning of this file, not at the end (as is the default.) It was slightly tricky, but the best way was to sort in numerical order and get the last-created window (that's this tail -n 1) then to set the address at 0,0 and set the dot (selection) at address by writing at the control file. Then the command show makes the window show the selected position: 0,0. Done! Intersped among all this is a \"clean\" command, to make this new window to close.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Here you can see a video of these scripts in a sample use (and you'll see how I miss a middle click - execute -  for a right-click - open)<br /><br /></div><div style=\"text-align: justify;\"><div style=\"text-align: center;\"><br /></div></div><div style=\"text-align: justify;\"><br /></div><h2>Dirty, Clean, Put</h2><div style=\"text-align: justify;\">A window can be dirty or clean. It is clean when the contents and the disk file are the same. It is dirty when it is being edited. The best way to know if it is dirty is if you see \"Put\" in your tag menu, just beside the vertical bar. By middle-clicking Put (or Putall in the main tag) you save this file and mark it as clean. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Also, making a window clean makes closing it quicker (middle click in Del.) Dirty windows need to be Put, or you have to Del again. </div><h2>That's all, folks (for now)</h2><div style=\"text-align: justify;\">I have yet to introduce the plumber, a mechanism that allows you to open arbitrary files (using rules) from within acme. For example, I can open pdf files by right-clicking on them (i.e. some.pdf) but instead of using page (the Plan9 image viewer) I use MacOS Preview. I was forced to do so, since page can't handle all the fonts in a LaTeX generated PDF, so for me it's useless. I'll probably write how I configured the plumber in my next Acme installment.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">In some sense, the plumber is like a system-wide, app-deep \"open\" mechanism. In Mac OS, you can \"open\" almost anything from the command line. If you open an URL, your default browser opens it, if you open an image, Preview handles it. Plumbing is like \"open 3.0\" but it is hard to manage :/<br /><br />Below you can see another video with a simpler scripting: browsing reddit from the command line, inside acme. The Python code snippet that gets Reddit data is available in this gist: <a href=\"https://gist.github.com/rberenguel/5130837\">reddi.py</a></div><br /><div style=\"text-align: center;\"></div><div class=\"blogger-post-footer\"></div>") (author nil (name nil "Rubén Berenguel") (email nil "noreply@blogger.com") (uri nil "http://www.mostlymaths.net/search/label/emacs")) (source nil (title ((type . "html")) "Mostly Maths") (subtitle ((type . "html")) "Programming for backyard gardeners, cooking for linux users, drawing for mathematicians. WTF?") (link ((rel . "self") (href . "http://www.blogger.com/feeds/13497321/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-13497321"))) (entry nil (title ((type . "html")) "Bryan Murdock: Free Verilog Simulators") (link ((href . "http://bryan-murdock.blogspot.com/2013/03/free-verilog-simulators.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-761717284478724751") (updated nil "2013-03-15T22:10:34+00:00") (content ((type . "html")) "At <a href=\"http://dvcon.org/2013_home\">DVCon 2013</a> I asked <a href=\"http://www.coolverification.com/\">JL Gray</a>'s panel if we would ever have Free tools, like the software world.  None of panelists seemed to think so, one of the panelists, a Mentor employee, scoffed, \"you get what you pay for with free tools.\"  Never mind that their (and Cadence's and Synopsys's) products are very likely developed with tools that contain millions of lines of Free software.<br />
<br />
So, to work towards answering my own question, I spent a little time and looked for Free/Open Source verilog simulators.  Here's what I found:<br />
<br />
<a href=\"https://sites.google.com/site/iverilog/\">Icarus Verilog</a><br />
<br />
<a href=\"http://sourceforge.net/projects/gplcver/\">GPL Cver</a><br />
<br />
<a href=\"http://sourceforge.net/projects/pvsim/\">PVSim Verilog Simulator</a><br />
<br />
<a href=\"http://sourceforge.net/projects/veriwell/\">VeriWell Verilog Simulator</a><br />
<br />
I have personally used Icarus and Cver before, but not very extensively.  They were usable and seemed pretty complete, for Verilog.  None of the above claim any support of SystemVerilog except for Icarus.  The Icarus developer at one point expressed abhorrence at SystemVerilog but it seems support for some parts of the language have been added.<br />
<br />
PVSim and VeriWell were new to me.  I'll give them a try, hopefully soon, and post more information.<br />
<br />
Another one that should be mentioned is <a href=\"http://www.veripool.org/wiki/verilator\">Verilator</a>.  I have downloaded and played with this one too.  It only supports synthesizable Verilog, so have fun writting a testbench.  I think the intent is for you to write your testbench in C++, so if you like that idea than this could be a good one to try too.<br />
<br />
Did I miss any?<br />
<br />
<br />
<br />") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Alex Bennée: On the death of Google Reader") (link ((href . "http://www.bennee.com/~alex/blog/2013/03/14/on-the-death-of-google-reader/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2652") (updated nil "2013-03-14T22:17:09+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can probably tell the sort of on-line company I keep from the deluge of noise on the social networks regarding Google’s decision to shut down Reader. However we shouldn’t be that surprised. In fact some companies that source content from Reader <a href=\"http://blog.feedly.com/2013/03/14/google-reader/\">have anticipated the need to collect content themselves</a>.</p>
<p>I of course will have to make a decision at some point. However I’ll not do it today like a lot of Reader users have. The rush to try out alternatives has over-whelmed some <a href=\"https://twitter.com/samuelclay\">open source based projects</a> who were quietly growing organically. I don’t envy those that have to suddenly gear up their back-end systems because an Internet behemoth gave us 2593 hours notice to sort out a replacement.</p>
<p>I’m mulling over the difference between self-hosting and having someone else do it. I’m not overly worried about going for convenience if I know I can get my data back if I need to. In fact the knowledge that you can theoretically self-host might be enough. To be fair to Google their <a href=\"http://www.dataliberation.org/\">Data Liberation</a> team made exporting all my Reader data easy.</p>
<p>Before I make a choice I need to decide what my priorities are. Currently I subscribe to 250+ RSS feeds. Obviously I don’t read every single post but I make extensive use of tags to quickly process through stuff I do need to see when I need to see it. Aside from news, blog posts, funny cat pictures I also subscribe to other data feeds like bug trackers, code repositories, and other data sources. I of course want access to all of this data at any point on one of a number of devices. This makes a web hosted solution pretty much a must. There is no point having the data on my desktop when I’m somewhere else. From my point of view I want it to be open source compatible because if the company hosting now decides it no longer wants to I’ll only have to move the data and not break my work-flow.</p>
<p>It would also be very useful if it had a public API so others can interact with the data. I don’t need the solution to be all provided by one company. It’s perfectly fine to have multiple 3rd parties sorting out the Android integration. I might even look to doing something to integrate it with my favourite editor (the name of which even my non-geek readers probably know by now). So far my experiment with moving all of IRC and IM into Emacs seems to be working well and should be a subject of another post.</p>
<p>Are you a Reader user? What are your criteria for it’s eventual replacement? Is RSS just a dying protocol or is the need to aggregate and sift through data becoming more important?</p>
<p>There may well be a much better way of solving this problem around the corner. I certainly am open to persuasion. But don’t take away my current preferred solution until I’m convinced I’m ready to switch <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html")) "Aaron Hawley: M-x in Emacs 24.3 is now in Lisp") (link ((href . "http://aaronhawley.livejournal.com/30636.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:30636") (updated nil "2013-03-12T14:14:18+00:00") (content ((type . "html")) "It didn't make the NEWS file for Emacs 24.3, but Emacs now ships with an `<kbd>M-x</kbd>' (`<code>execute-extended-command</code>') that is written in Lisp.  It is no longer written in C.  This should make it easy for users to extend and do new things with this command (execute command name at point, display prefix arguments numerically, ...) by easily redefining it.  Although, it was possible to \"advise\" the C implementation before given Emacs good advising system with `<code>defadvice</code>'.<br /><br />I had talked about <a href=\"http://aaronhawley.livejournal.com/26901.html\" rel=\"nofollow\">Coding Emacs's M-x in Lisp</a> on this blog over 3 years ago.  It was accepted in Emacs after I finally got around to <a href=\"http://lists.gnu.org/archive/html/gnu-emacs-sources/2012-03/msg00003.html\" rel=\"nofollow\">posting the code to gnu-emacs-sources</a> last year.<br /><br />Thanks to Stefan Monnier, one of the lead maintainers, for doing most of the leg work of merging these bits into Emacs.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley"))) (entry nil (title ((type . "html")) "Got Emacs?: Emacs 24.3 Released") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/5KXNxHZ-KL8/emacs-243-released.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-5045358953675749259") (updated nil "2013-03-11T17:30:20+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\">
<a href=\"http://lists.gnu.org/archive/html/info-gnu-emacs/2013-03/msg00001.html\" target=\"_blank\">Emacs 24.3 is finally out</a>. Binaries can be got from the usual locations. If the Windows binaries are not out yet at your favourite mirror, wait a few days.  </div>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=5KXNxHZ-KL8:-e_yE30rwIE:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=5KXNxHZ-KL8:-e_yE30rwIE:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/GotEmacs?a=5KXNxHZ-KL8:-e_yE30rwIE:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/GotEmacs?i=5KXNxHZ-KL8:-e_yE30rwIE:gIN9vFwOqvQ\" /></a>
</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/5KXNxHZ-KL8\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Mickey Petersen: What’s New in Emacs 24.3") (link ((href . "http://www.masteringemacs.org/articles/2013/03/11/whats-new-emacs-24-3/"))) (id nil "http://www.masteringemacs.org/?p=687") (updated nil "2013-03-11T13:31:54+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Emacs version 24.3 is now released to the public. This release, unlike 24.2, is chock full of goodies. I’ve taken the liberty of annotating things that’re relevant to me — and hopefully you, too, dear reader — but I’ve limited my commentary to things I’m familiar with. Always keen to hear what you think about the changes in the comments.</p>
<p>You can retrieve Emacs 24.3 from one of these locations:</p>
<p><strong>Automatic mirror</strong><br />
<em>Note: As of 11 AM on 2013-03-11 I had issues with some mirrors not yet having the new version available.</em><br />
<a href=\"http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.xz\">http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.xz</a><br />
<a href=\"http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.gz\">http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.gz</a></p>
<h1>What’s New in Emacs 24.3</h1>
<h2>Installation Changes in Emacs 24.3</h2>
<blockquote><p>The default X toolkit is now Gtk+ version 3.<br />
If you don’t pass <code>--with-x-toolkit</code> to configure, or if you use<br />
<code>--with-x-toolkit=gtk</code> or <code>--with-x-toolkit=yes</code>, configure will try<br />
to build with Gtk+ version 3, and if that fails, try Gtk+ version 2.<br />
You can explicitly require a specific version by passing<br />
<code>--with-x-toolkit=gtk2</code> or <code>--with-x-toolkit=gtk3</code> to configure.
</p></blockquote>
<p>Although I always use Emacs in a window manager, and actively recommend that people who can do as well, this change is unlikely to affect me much at all. I don’t use scrollbars, toolbars or menubars.</p>
<blockquote><p>New configure option <code>--enable-link-time-optimization</code>, to utilize<br />
an appropriate feature provided by GCC since version 4.5.0.
</p></blockquote>
<p><br /></p>
<blockquote><p>New configure option <code>--without-all</code> to disable most of the optional<br />
features (image support, etc.) that are normally enabled by default.
</p></blockquote>
<p>For the luddites.</p>
<blockquote><p>New configure option <code>--enable-gcc-warnings</code> (for developing/debugging<br />
Emacs).  If building with GCC, this enables compile-time checks that<br />
warn/give errors about possibly-questionable C code.  On a recent GNU<br />
system there should be no warnings; on older and on non-GNU systems<br />
the results may be useful to developers.
</p></blockquote>
<blockquote><p>The configure option <code>--enable-use-lisp-union-type</code> has been<br />
renamed to <code>--enable-check-lisp-object-type</code>, as the resulting<br />
Lisp_Object type no longer uses a union to implement the compile time<br />
check that this option enables.
</p></blockquote>
<blockquote><p>The configure option <code>--disable-maintainer-mode</code> has been removed,<br />
as it was confusingly-named and rarely useful.
</p></blockquote>
<blockquote><p>The configure options <code>--program-prefix</code>, <code>--program-suffix</code>, and<br />
<code>--program-transform-name</code> apply to more than just the installed<br />
binaries.  Now they also affect the man pages, icons, and the<br />
etc/emacs.desktop file; but not the info pages, since this would break<br />
links between the various manuals.
</p></blockquote>
<blockquote><p>You can use <code>NO_BIN_LINK=t make install</code> to prevent the installation<br />
overwriting “emacs” in the installation bin/ directory with a link<br />
to “emacs-VERSION”.
</p></blockquote>
<blockquote><p>Emacs uses libtinfo in preference to libncurses, if available.
</p></blockquote>
<blockquote><p>On FreeBSD and NetBSD, configure no longer adds /usr/local/lib and<br />
/usr/pkg/lib to the linker search path.  You must add them yourself if<br />
you want them.
</p></blockquote>
<blockquote><p>The standalone scripts <code>rcs-checkin</code> and <code>vcdiff</code> have been removed<br />
(from the bin and libexec directories, respectively).  The former is<br />
no longer relevant, the latter is replaced by lisp (in vc-sccs.el).
</p></blockquote>
<h2>Startup Changes in Emacs 24.3</h2>
<blockquote><p>Emacs no longer searches for <code>leim-list.el</code> files beneath the standard<br />
lisp/ directory.  There should not be any there anyway.  If you have<br />
been adding them there, put them somewhere else; e.g., site-lisp.
</p></blockquote>
<blockquote><p>The <code>--no-site-lisp</code> command line option now works for Nextstep builds.
</p></blockquote>
<h2>Changes in Emacs 24.3</h2>
<h3>Help</h3>
<blockquote><p><code>C-h f</code> (<code>describe-function</code>) can now perform autoloading.<br />
When this command is called for an autoloaded function whose docstring<br />
contains a key substitution construct, that function’s library is<br />
automatically loaded, so that the documentation can be shown<br />
correctly.  To disable this, set <code>help-enable-auto-load</code> to nil.
</p></blockquote>
<p>That’s a potentially useful change, though I cannot offhand recall any instances where I’ve been bitten by this. This is not going to guard against unloaded libraries if you are <em>not</em> looking up autoloaded commands. In other words, if you’re looking up an obscure function or variable and the library isn’t loaded, this won’t help at all.</p>
<blockquote><p><code>C-h f</code> now reports previously-autoloaded functions as “autoloaded”,<br />
even after their associated libraries have been loaded (and the<br />
autoloads have been redefined as functions).
</p></blockquote>
<p>I would fill this under “Nice to know”.</p>
<h3>ImageMagick</h3>
<blockquote><p>Images displayed via ImageMagick now support transparency and the<br />
:background image specification property.
</p></blockquote>
<blockquote><p>When available, ImageMagick support is automatically enabled.<br />
It is no longer necessary to call <code>imagemagick-register-types</code><br />
explicitly to install ImageMagick image types; that function is called<br />
automatically at startup, or when customizing an imagemagick- option.
</p></blockquote>
<p>Most excellent. This should help encourage the use of Imagemagick now that it’s loaded by default.</p>
<blockquote><p>Setting <code>imagemagick-types-inhibit</code> to t now disables the use of<br />
ImageMagick to view images.  (You must call <code>imagemagick-register-types</code><br />
afterwards if you do not use customize to change this.)
</p></blockquote>
<p>… And this is how you disable it</p>
<blockquote><p>The new variable <code>imagemagick-enabled-types</code> also affects which<br />
ImageMagick types are treated as images.  The function<br />
<code>imagemagick-filter-types</code> returns the list of types that will be<br />
treated as images.
</p></blockquote>
<h3>Minibuffer</h3>
<blockquote><p>In minibuffer filename prompts, <code>C-M-f</code> and <code>C-M-b</code> now move to the<br />
next and previous path separator, respectively.
</p></blockquote>
<p>With the caveat, I suppose, that this is not likely to work if you use iswitchb or IDO.</p>
<blockquote><p><code>minibuffer-electric-default-mode</code> can shorten “(default …)” to “[...]”<br />
in minibuffer prompts.  Just set <code>minibuffer-eldef-shorten-default</code><br />
non-nil before enabling the mode.
</p></blockquote>
<h3>Mode line</h3>
<blockquote><p>New option <code>mode-line-default-help-echo</code> specifies the help text<br />
(shown in a tooltip or in the echo area) for any part of the mode line<br />
that does not have its own specialized help text.
</p></blockquote>
<blockquote><p>You can now click mouse-3 in the coding system indicator to invoke<br />
<code>set-buffer-file-coding-system</code>.
</p></blockquote>
<h3>Server and client</h3>
<blockquote><p>emacsclient now obeys string values for <code>initial-buffer-choice</code>,<br />
if it is told to open a new frame without specifying any file to visit<br />
or expression to evaluate.
</p></blockquote>
<blockquote><p>New option <code>server-auth-key</code> specifies a shared server key.
</p></blockquote>
<blockquote><p>Emacs now generates backtraces on fatal errors.<br />
On encountering a fatal error, Emacs now outputs a textual description<br />
of the fatal signal, and a short backtrace on platforms like glibc<br />
that support backtraces.
</p></blockquote>
<h3>Other</h3>
<blockquote><p><code>C-x C-q</code> is now bound to the new minor mode <code>read-only-mode</code>.<br />
This minor mode replaces <code>toggle-read-only</code>, which is now obsolete.
</p></blockquote>
<p>Interesting that they’ve moved it to a new minor mode. I imagine this change was effected to reduce the number of “magic states” a buffer could be in. As a mode, it also means you can customize it further like, say, adding hooks so you can gray out the text if it’s read only.</p>
<blockquote><p>Most <code>y-or-n</code> prompts now allow you to scroll the selected window.<br />
Typing <code>C-v</code> or <code>M-v</code> at a y-or-n prompt scrolls forward or backward<br />
respectively, without exiting from the prompt.
</p></blockquote>
<p>Very nice and welcome change.</p>
<blockquote><p>In the Package Menu, newly-available packages are listed as “new”,<br />
and sorted above the other “available” packages by default.
</p></blockquote>
<blockquote><p>If your Emacs was built from a bzr checkout, the new variable<br />
<code>emacs-bzr-version</code> contains information about the bzr revision used.
</p></blockquote>
<blockquote><p>New option <code>create-lockfiles</code> specifies usage of lockfiles.<br />
It defaults to t.  Changing it to nil inhibits the creation of lock<br />
files (use this with caution).
</p></blockquote>
<blockquote><p>New option <code>enable-remote-dir-locals</code>, if non-nil, allows directory-local<br />
variables on remote hosts.
</p></blockquote>
<p>This is useful if you use dir-local variables remotely, but there’s an obvious security risk if you enable it.</p>
<blockquote><p>The entry for PCL-CVS has been removed from the Tools menu.<br />
The PCL-CVS commands are still available via the keyboard.
</p></blockquote>
<blockquote><p>Using “unibyte: t” in Lisp source files is obsolete.<br />
Use “coding: raw-text” instead.
</p></blockquote>
<blockquote><p>In the buffer made by <code>M-x report-emacs-bug</code>, the <code>C-c m</code> binding<br />
has been changed to <code>C-c M-i</code> (<code>report-emacs-bug-insert-to-mailer</code>).<br />
The previous binding, introduced in Emacs 24.1, was a mistake, because<br />
<code>C-c LETTER</code> bindings are reserved for user customizations.
</p></blockquote>
<h3>Internationalization</h3>
<blockquote><p>New language environment: Persian.
</p></blockquote>
<blockquote><p>New input method <code>vietnamese-vni</code>.
</p></blockquote>
<h3>Nextstep (GNUstep / Mac OS X) port</h3>
<blockquote><p>Support for fullscreen and the frame parameter fullscreen.
</p></blockquote>
<p>A much longed-for feature.</p>
<blockquote><p>A file dialog is used for open/save operations initiated from the<br />
menu/toolbar.
</p></blockquote>
<h2>Editing Changes in Emacs 24.3</h2>
<h3>Search and Replace</h3>
<blockquote><p>Non-regexp Isearch now performs “lax” space matching.<br />
Each sequence of spaces in the supplied search string may match any<br />
sequence of one or more whitespace characters, as specified by the<br />
variable <code>search-whitespace-regexp</code>.  (This variable is also used by a<br />
similar existing feature for regexp Isearch.)
</p></blockquote>
<p>This is great as you can now find matches even though whitespacing may not be spot on.</p>
<blockquote><p>New Isearch command <code>M-s SPC</code> toggles lax space matching.<br />
This applies to both ordinary and regexp Isearch.
</p></blockquote>
<p>Handy if you don’t want fuzzy space matching.</p>
<blockquote><p>New option <code>replace-lax-whitespace</code>.<br />
If non-nil, <code>query-replace</code> uses flexible whitespace matching too.<br />
The default is nil.
</p></blockquote>
<blockquote><p>Global <code>M-s _</code> starts a symbol (identifier) incremental search,<br />
and <code>M-s _</code> in Isearch toggles symbol search mode.<br />
<code>M-s c</code> in Isearch toggles search case-sensitivity.
</p></blockquote>
<p>Very useful if you’re coding. It’s equivalent to wrapping an <code>isearch-forward-regexp</code> regexp query in <code>\\_&lt;</code> and <code>\\_&gt;</code>. Keep in mind that the definition of a symbol varies according to your major mode (and sometimes minor!). It’s usually set to rather sensible defaults in most programming major modes.</p>
<h2>Navigation commands</h2>
<blockquote><p>New binding <code>M-g c</code> for <code>goto-char</code>.
</p></blockquote>
<p>The word “char” here is rather misleading: it means the absolute position, as an integer, from the beginning of the buffer.</p>
<blockquote><p>New binding <code>M-g TAB</code> for <code>move-to-column</code>.
</p></blockquote>
<blockquote><p><code>M-g TAB</code> (<code>move-to-column</code>) prompts for a column number if called<br />
interactively with no prefix arg.  Previously, it moved to column 1.
</p></blockquote>
<blockquote><p>New option <code>yank-handled-properties</code> allows processing of text<br />
properties on yanked text, in ways that are more general than just<br />
removing them (as is done by <code>yank-excluded-properties</code>).
</p></blockquote>
<p>Useful if you want to strip out or alter properties on text when it’s yanked. This is unlikely to be of interest to anybody except module developers.</p>
<blockquote><p>New option <code>delete-trailing-lines</code> specifies whether<br />
M-x delete-trailing-whitespace should delete trailing lines at the end<br />
of the buffer.  It defaults to t.
</p></blockquote>
<p>A nice and useful addition, but be wary as it defaults to true.</p>
<blockquote><p><code>C-u M-=</code> now counts lines/words/characters in the entire buffer.
</p></blockquote>
<blockquote><p><code>C-x 8 RET</code> is now bound to <code>insert-char</code>, which is now a command.<br />
<code>ucs-insert</code> is now an obsolete alias for <code>insert-char</code>.
</p></blockquote>
<blockquote><p>The <code>z</code> key no longer has a binding in most special modes.<br />
It used to be bound to <code>kill-this-buffer</code>, but <code>z</code> is too easy to<br />
accidentally type.
</p></blockquote>
<p>Rejoice all who have accidentally killed your buffers.</p>
<blockquote><p>New command <code>C-x r M-w</code> (<code>copy-rectangle-as-kill</code>).<br />
It copies the region-rectangle as the last rectangle kill.
</p></blockquote>
<p>Very nice. This basically makes works exactly like <code>M-w</code> does except it operates on a rect. No more killing then yanking if you want to copy a rect.</p>
<h2>Registers</h2>
<blockquote><p><code>C-x r +</code> is now overloaded to invoke <code>append-to-register</code>.
</p></blockquote>
<p>This small change has rather wide ramifications for those of you who use registers in macros. You can now collect text and append it to the end of a register instead of shunting it to a different buffer. Groundbreaking? Not quite, but very useful indeed.</p>
<blockquote><p>New option <code>register-separator</code> specifies the register containing<br />
the text to put between collected texts for use with<br />
M-x append-to-register and M-x prepend-to-register.
</p></blockquote>
<p>Combined with the above, this enables you to collate appended texts with a separator symbol.</p>
<h2>Changes in Specialized Modes and Packages in Emacs 24.3</h2>
<h3>Common Lisp emulation (CL)</h3>
<blockquote><p>CL’s main entry is now (require ‘cl-lib).<br />
<code>cl-lib</code> is like the old <code>cl</code> except that it uses the namespace cleanly;<br />
i.e., all its definitions have the “cl-” prefix (and internal definitions<br />
use the “cl–” prefix).</p>
<p>If <code>cl</code> provided a feature under the name <code>foo</code>, then <code>cl-lib</code><br />
provides it under the name <code>cl-foo</code> instead; with the exceptions of the<br />
few <code>cl</code> definitions that had to use <code>foo*</code> to avoid conflicts with<br />
pre-existing Elisp entities.  These have been renamed to <code>cl-foo</code><br />
rather than <code>cl-foo*</code>.</p>
<p>The old <code>cl</code> is now deprecated and is mainly just a bunch of aliases that<br />
provide the old, non-prefixed names.  Some exceptions are listed below:
</p></blockquote>
<p>This is a good change but I doubt we will ever truly be rid of <code>cl</code>, not for a long tie anyway.</p>
<blockquote><p><code>cl-flet</code> is not like <code>flet</code> (which is deprecated).<br />
Instead it obeys the behavior of Common-Lisp’s <code>flet</code>.<br />
In particular, in cl-flet function definitions are lexically scoped,<br />
whereas in flet the scoping is dynamic.
</p></blockquote>
<blockquote><p><code>cl-labels</code> is slightly different from <code>labels</code>.<br />
The difference is that it relies on the <code>lexical-binding</code> machinery<br />
(as opposed to the <code>lexical-let</code> machinery used previously) to capture<br />
definitions in closures, so such closures will only work if <code>lexical-binding</code><br />
is in use.
</p></blockquote>
<blockquote><p><code>cl-letf</code> is not exactly like <code>letf</code>.<br />
The only difference is in details that relate to some deprecated usage<br />
of <code>symbol-function</code> in place forms.
</p></blockquote>
<blockquote><p><code>progv</code> was rewritten to use the <code>let</code> machinery.<br />
A side effect is that variables without corresponding values are bound<br />
to nil rather than being made unbound.
</p></blockquote>
<blockquote><p>The following methods of extending <code>setf</code> are obsolete<br />
(use features from gv.el instead):<br />
<code>define-modify-macro</code> (use <code>gv-letplace</code>)<br />
<code>defsetf</code> (use <code>gv-define-simple-setter</code> or <code>gv-define-setter</code>)<br />
<code>define-setf-expander</code> (use <code>gv-define-setter</code> or <code>gv-define-expander</code>)<br />
<code>get-setf-method</code> no longer exists (see “Incompatible Lisp Changes”)
</p></blockquote>
<h2>Diff mode</h2>
<blockquote><p>Changes are now highlighted using the same color scheme as in<br />
modern VCSes.  Deletions are displayed in red (new faces<br />
<code>diff-refine-removed</code> and <code>smerge-refined-removed</code>, and new definition<br />
of <code>diff-removed</code>), insertions in green (new faces <code>diff-refine-added</code><br />
and <code>smerge-refined-added</code>, and new definition of <code>diff-added</code>).
</p></blockquote>
<p>More standardization. Good.</p>
<blockquote><p>The variable <code>diff-use-changed-face</code> defines whether to use the<br />
face <code>diff-changed</code>, or <code>diff-removed</code> and <code>diff-added</code> to highlight<br />
changes in context diffs.
</p></blockquote>
<blockquote><p>The new command <code>diff-delete-trailing-whitespace</code> removes trailing<br />
whitespace introduced by a diff.
</p></blockquote>
<blockquote><p>Ediff now uses the same color scheme as Diff mode.
</p></blockquote>
<h2>Python mode</h2>
<blockquote><p>A new version of python.el, which provides several new features, including:<br />
per-buffer shells, better indentation, Python 3 support, and improved<br />
shell-interaction compatible with iPython (and virtually any other<br />
text based shell).
</p></blockquote>
<p>I blogged about a new python mode a long time ago and it seems it’s made it into trunk. That’s probably good news for most Python users, but as I haven’t yet explored the new python.el mode yet, I will cover this in much greater detail in another post.</p>
<blockquote><p>
Some user options have been replaced/renamed, including (old -&gt; new):</p>
<p>python-indent -&gt; python-indent-offset</p>
<p>python-guess-indent -&gt; python-indent-guess-indent-offset</p>
<p>python-pdbtrack-do-tracking-p -&gt; python-pdbtrack-activate</p>
<p>python-use-skeletons -&gt; python-skeleton-autoinsert</p>
<p>Some user options have been removed, including:</p>
<p><code>python-indent-string-contents</code>: Strings are never indented.</p>
<p><code>python-honour-comment-indentation</code>:<br />
Comments are always considered as indentation markers.</p>
<p><code>python-continuation-offset</code>: Indentation is automatically<br />
calculated in a pep8 compliant way depending on the context.</p>
<p><code>python-shell-prompt-alist</code>, <code>python-shell-continuation-prompt-alist</code>:<br />
Have no direct mapping as the shell interaction is completely different.</p>
<p><code>python-python-command</code>, <code>python-jython-command</code>:<br />
Replaced by <code>python-shell-interpreter</code>.</p>
<p><code>inferior-python-filter-regexp</code>, <code>python-remove-cwd-from-path</code>,<br />
<code>python-pdbtrack-minor-mode-string</code>, <code>python-source-modes</code>:<br />
No longer relevant.</p>
<p>Some commands have been replaced (old -&gt; new):<br />
python-insert-class -&gt; python-skeleton-class<br />
python-insert-def -&gt; python-skeleton-def<br />
python-insert-for -&gt; python-skeleton-for<br />
python-insert-if -&gt; python-skeleton-if<br />
python-insert-try/except -&gt; python-skeleton-try<br />
python-insert-try/finally -&gt; python-skeleton-try<br />
python-insert-while -&gt; python-skeleton-while<br />
python-find-function -&gt; python-nav-jump-to-defun<br />
python-next-statement -&gt; python-nav-forward-sentence<br />
python-previous-statement -&gt; python-nav-backward-sentence<br />
python-beginning-of-defun-function -&gt; python-nav-beginning-of-defun<br />
python-end-of-defun-function -&gt; python-nav-end-of-defun<br />
python-send-buffer -&gt; python-shell-send-buffer<br />
python-send-defun -&gt; python-shell-send-defun<br />
python-send-region -&gt; python-shell-send-region<br />
python-send-region-and-go -&gt; emulate with python-shell-send-region<br />
and python-shell-switch-to-shell<br />
python-send-string -&gt; python-shell-send-string<br />
python-switch-to-python -&gt; python-shell-switch-to-shell<br />
python-describe-symbol -&gt; python-eldoc-at-point
</p></blockquote>
<p>Needless to say, the changes here are likely to break a lot of my custom Python code I’ve written over the years. If you’re relying on customizations to Python or modes that interact with it, I would probably ensure you can fix or live with broken modules until they’re fixed.</p>
<h2>D-Bus</h2>
<blockquote><p>New variables <code>dbus-compiled-version</code> and <code>dbus-runtime-version</code>.
</p></blockquote>
<blockquote><p>The D-Bus object manager interface is implemented.
</p></blockquote>
<blockquote><p>Variables of type <img alt=\":(\" class=\"wp-smiley\" src=\"http://www.masteringemacs.org/wp-includes/images/smilies/icon_sad.gif\" /> u)int32 and <img alt=\":(\" class=\"wp-smiley\" src=\"http://www.masteringemacs.org/wp-includes/images/smilies/icon_sad.gif\" /> u)int64 accept floating points,<br />
if their value does not fit into Emacs’s integer range.
</p></blockquote>
<blockquote><p>The function <code>dbus-call-method</code> is now non-blocking.<br />
It can be interrupted by <code>C-g</code>.  <code>dbus-call-method-non-blocking</code> is obsolete.
</p></blockquote>
<blockquote><p>Signals can also be sent as unicast messages.
</p></blockquote>
<blockquote><p>The argument list of <code>dbus-register-signal</code> has been extended,<br />
according to the new match rule types of D-Bus.
</p></blockquote>
<blockquote><p><code>dbus-init-bus</code> supports private connections.
</p></blockquote>
<blockquote><p>There is a new function <code>dbus-setenv</code>.
</p></blockquote>
<blockquote><p><code>desktop-path</code> no longer includes the “.” directory.<br />
Desktop files are now located in ~/.emacs.d by default.
</p></blockquote>
<h2>Dired</h2>
<blockquote><p><code>dired-do-async-shell-command</code> executes each file sequentially<br />
if the command ends in <code>;</code> (when operating on multiple files).<br />
Otherwise, it executes the command on each file in parallel.
</p></blockquote>
<p>Very useful and good for people working with commands on many files.</p>
<blockquote><p>Typing <code>M-n</code> in the minibuffer of <code>dired-do-chmod</code>, <code>dired-do-chgrp</code>,<br />
<code>dired-do-chown</code>, and <code>dired-do-touch</code> yanks the attributes of the<br />
file at point.
</p></blockquote>
<p>Hah! This is superb. I really like this change. Now you’re probably thinking the command, <code>M-n</code>, is arbitrary, but not so: in minibuffer prompts that command would go to the last used element in the minibuffer history; by re-using that command here, it achieves the same effect. </p>
<blockquote><p>When the region is active, <code>m</code> (<code>dired-mark</code>), <code>u</code> (<code>dired-unmark</code>),<br />
<code>DEL</code> (<code>dired-unmark-backward</code>), and <code>d</code> (<code>dired-flag-file-deletion</code>)<br />
mark/unmark/flag all files in the active region.
</p></blockquote>
<p>Can i hear a hallelujah? this is a most welcome change and one that should’ve been in dired since day one.</p>
<blockquote><p>The minibuffer default for <code>=</code> (<code>dired-diff</code>) has changed.<br />
it is now the backup file for the file at point, if one exists.<br />
in transient mark mode the default is the file at the active mark.
</p></blockquote>
<p>great idea but for most serious files you’re probably using <code>c-x v =</code>, the vcs diff command.</p>
<blockquote><p><code>M-=</code> is no longer bound to <code>dired-backup-diff</code> in Dired buffers.<br />
The global binding for <code>M-=</code>, <code>count-words-region</code> is in effect.
</p></blockquote>
<h2>ERC</h2>
<blockquote><p>New module “notifications”, which can send a notification when you<br />
receive a private message or your nickname is mentioned.
</p></blockquote>
<blockquote><p>ERC will look up server/channel names via auth-source and use any<br />
channel keys found.
</p></blockquote>
<blockquote><p>New option <code>erc-lurker-hide-list</code>, similar to <code>erc-hide-list</code>, but<br />
only applies to messages sent by lurkers.
</p></blockquote>
<h2>reStructuredText mode</h2>
<blockquote><p>Keybindings (see <code>C-c C-h</code>), TAB indentation, filling and auto-filling,<br />
fontification, comment handling, and customization have all been revised<br />
and improved.
</p></blockquote>
<p>That’s good. rST mode always did seem a bit… underdeveloped.</p>
<blockquote><p>Support for <code>imenu</code> and <code>which-function-mode</code>.
</p></blockquote>
<p>Great!</p>
<blockquote><p>The reStructuredText syntax is more closely covered.<br />
Sphinx support has been improved.
</p></blockquote>
<p>Sphinx support is very good news for Python docs writers and other fans of Sphinx.</p>
<blockquote><p><code>rst-insert-list</code> inserts new list or continues existing lists.
</p></blockquote>
<blockquote><p>A negative prefix argument always works for <code>rst-adjust</code>.
</p></blockquote>
<blockquote><p>The window configuration is reset after displaying a TOC.
</p></blockquote>
<blockquote><p>The constant <code>rst-version</code> describes the rst.el package version.
</p></blockquote>
<h2>Ruby mode</h2>
<blockquote><p>Support for percent literals and recognition of regular expressions<br />
in method calls without parentheses with more methods, including Cucumber<br />
steps definitions.
</p></blockquote>
<blockquote><p>Improved syntax highlighting and indentation.
</p></blockquote>
<blockquote><p>New command <code>ruby-toggle-block</code>, bound to <code>C-c {</code>.
</p></blockquote>
<blockquote><p>Some non-standard keybindings/commands have been removed:
</p></blockquote>
<blockquote><p><code>ruby-electric-brace</code>; use <code>electric-indent-mode</code> instead.
</p></blockquote>
<blockquote><p><code>ruby-mark-defun</code>; use <code>mark-defun</code>.
</p></blockquote>
<blockquote><p><code>ruby-beginning-of-defun</code> and <code>ruby-end-of-defun</code> are replaced by<br />
appropriate settings for the variables <code>beginning-of-defun-function</code><br />
and <code>end-of-defun-function</code>.
</p></blockquote>
<p>These three changes are all part of a larger drive in Emacs to remove major mode-specific functions that’re better served with the built-in Emacs equivalents.</p>
<blockquote><p>Non-standard keybindings for <code>backward-kill-word</code>, <code>comment-region</code>,<br />
<code>reindent-then-newline-and-indent</code> and <code>newline</code> have been removed.
</p></blockquote>
<h2>Shell Script mode</h2>
<blockquote><p>Pairing of parens/quotes uses <code>electric-pair-mode</code> instead of skeleton-pair.
</p></blockquote>
<p>More duplicate cruft removed and standardized.</p>
<blockquote><p><code>sh-electric-here-document-mode</code> now controls auto-insertion of here-docs.
</p></blockquote>
<blockquote><p><code>sh-use-smie</code> lets you choose a new indentation and navigation code.
</p></blockquote>
<h2>VHDL mode</h2>
<blockquote><p>The free software compiler GHDL is supported (and now the default).
</p></blockquote>
<blockquote><p>Support for the VHDL-AMS packages has been added/updated.
</p></blockquote>
<blockquote><p>Updated to the 2002 revision of the VHDL standard.
</p></blockquote>
<blockquote><p>Accepts \\r and \\f as whitespace.
</p></blockquote>
<h2>Apropos</h2>
<blockquote><p>The faces used by Apropos are now directly customizable.<br />
These faces are named <code>apropos-symbol</code>, <code>apropos-keybinding</code>, and so on;<br />
see the <code>apropos</code> Custom group for details.
</p></blockquote>
<blockquote><p>The old options whose values specified faces to use have been removed<br />
(i.e. <code>apropos-symbol-face</code>, <code>apropos-keybinding-face</code>, etc.).
</p></blockquote>
<h2>Buffer Menu</h2>
<blockquote><p>This package has been rewritten to use Tabulated List mode.
</p></blockquote>
<blockquote><p>Option <code>Buffer-menu-buffer+size-width</code> is now obsolete.<br />
Use <code>Buffer-menu-name-width</code> and <code>Buffer-menu-size-width</code> instead.
</p></blockquote>
<h2>Calendar</h2>
<blockquote><p>You can customize the header text that appears above each calendar month.<br />
See the variable <code>calendar-month-header</code>.
</p></blockquote>
<blockquote><p>New LaTeX calendar style, produced by <code>cal-tex-cursor-week2-summary</code>.
</p></blockquote>
<blockquote><p>The calendars produced by cal-html include holidays.<br />
Customize <code>cal-html-holidays</code> to change this.
</p></blockquote>
<h2>CEDET</h2>
<blockquote><p>The major modes from the parser generators “Bovine” and “Wisent”<br />
are now properly integrated in Emacs.  The file suffixes “.by” and “.wy”<br />
are in <code>auto-mode-alist</code>, and the corresponding manuals are included.
</p></blockquote>
<h3>EDE</h3>
<blockquote><p>Menu support for the “Configuration” feature.  This allows users to<br />
choose the active configuration (such as debug or install) from the menu.
</p></blockquote>
<blockquote><p>New command <code>ede-set</code> to interactively set project-local variables.
</p></blockquote>
<blockquote><p>Support for compiling, debugging, and running in “generic” projects.
</p></blockquote>
<blockquote><p>Autoconf editing support for M4 macros with complex arguments.
</p></blockquote>
<blockquote><p>Compilation support for the “linux” project type.
</p></blockquote>
<blockquote><p>“simple” projects have been removed; use “generic” projects instead.
</p></blockquote>
<h3>Semantic</h3>
<blockquote><p>Support for parsing #include statements inside a namespace in C/C++.
</p></blockquote>
<blockquote><p>Improved support for ‘extern “C”‘ declarations in C/C++.
</p></blockquote>
<blockquote><p>The ability to ignore more common special C/C++ preprocessor symbols,<br />
such as ‘__nonnull’ and ‘__asm’.  Add ‘__cplusplus’ macro when parsing C++.<br />
If available, include cdefs.h as an additional source of preprocessor symbols.
</p></blockquote>
<blockquote><p>Improved C/C++ function pointer parsing.
</p></blockquote>
<blockquote><p>In Python, support for converting imports to include file names.
</p></blockquote>
<blockquote><p>Ability to dynamically determine the Python load path.
</p></blockquote>
<blockquote><p>Support for the Python ‘WITH’ and ‘AT’ keywords.
</p></blockquote>
<blockquote><p>Improved tooltip completion.
</p></blockquote>
<h3>SRecode</h3>
<blockquote><p>The SRecode manual is now included.
</p></blockquote>
<blockquote><p>Tag generation supports constructor/destructor settings and system<br />
include differentiation.
</p></blockquote>
<blockquote><p>Addition of ‘Framework’ support: Frameworks are specified when a<br />
particular kind of library (such as Android) is needed in a common language<br />
mode (like Java).
</p></blockquote>
<blockquote><p>Support for nested templates and let variables override based on priority.
</p></blockquote>
<blockquote><p>Support for merging tables from multiple related modes, such as<br />
default -&gt; c++ -&gt; arduino.
</p></blockquote>
<h2>Compile</h2>
<blockquote><p>Compile has a new option <code>compilation-always-kill</code>.
</p></blockquote>
<h2>Customize</h2>
<blockquote><p><code>custom-reset-button-menu</code> now defaults to t.
</p></blockquote>
<blockquote><p>Non-option variables are never matched in <code>customize-apropos</code> and<br />
<code>customize-apropos-options</code> (i.e., the prefix argument does nothing for<br />
these commands now).
</p></blockquote>
<h2>Term</h2>
<blockquote><p>The variables <code>term-default-fg-color</code> and <code>term-default-bg-color</code><br />
are now deprecated in favor of the customizable face <code>term</code>.
</p></blockquote>
<p>A pre-<em>customization</em> anachronism removed at last. Make sure you migrate your term color settings!</p>
<blockquote><p>You can customize how to display ANSI terminal colors and styles<br />
by customizing the corresponding <code>term-color-COLOR</code>,<br />
<code>term-color-underline</code> and <code>term-color-bold</code> faces.
</p></blockquote>
<p>If, like me, you customized <code>ansi-color-names-vector</code> to change the default term colours I suggest you switch to using the faces now. The good news here is you can, should desire to, change more than <em>just</em> the colours for each ANSI Color: there’s nothing stopping you from forcing a different font for certain colours.</p>
<h2>Tramp</h2>
<blockquote><p>The syntax has been extended in order to allow ad-hoc proxy definitions.
</p></blockquote>
<p>This is a great change and a most needed one if you want to <code>su</code> to a different user once you’ve connected to a another host and you can’t be bothered figuring out how TRAMP proxies work. <del>Typically I can’t find any information about the new syntax anywhere… I’ll have to dig into the source code and write a post about it later.</del> Despite my best attempts it seems I completely missed the new chapter, here <code>(info \"(tramp)Ad-hoc multi-hops\")</code>.</p>
<blockquote><p>Remote processes are now also supported on remote MS-Windows hosts.
</p></blockquote>
<h2>URL</h2>
<blockquote><p>Structs made by <code>url-generic-parse-url</code> have nil <code>attributes</code> slot.<br />
Previously, this slot stored semicolon-separated attribute-value pairs<br />
appended to some imap URLs, but this is not compatible with RFC 3986.<br />
So now the <code>filename</code> slot stores the entire path and query components,<br />
and the <code>attributes</code> slot is always nil.
</p></blockquote>
<blockquote><p>New function <code>url-encode-url</code> for encoding a URI string.<br />
The <code>url-retrieve</code> function now uses this to encode its URL argument,<br />
in case that is not properly encoded.
</p></blockquote>
<blockquote><p>notifications.el supports now version 1.2 of the Notifications API.<br />
The function <code>notifications-get-capabilities</code> returns the supported<br />
server properties.
</p></blockquote>
<h2>More misc changes</h2>
<blockquote><p>Flymake uses fringe bitmaps to indicate errors and warnings.<br />
See <code>flymake-fringe-indicator-position</code>, <code>flymake-error-bitmap</code> and<br />
<code>flymake-warning-bitmap</code>.
</p></blockquote>
<blockquote><p>The FFAP option <code>ffap-url-unwrap-remote</code> can now be a list of strings,<br />
specifying URL types that should be converted to remote file names at<br />
the FFAP prompt.  The default is now ‘(“ftp”).
</p></blockquote>
<blockquote><p>New Ibuffer <code>derived-mode</code> filter, bound to <code>/ M</code>.<br />
The old binding for <code>/ M</code> (filter by used-mode) is now bound to <code>/ m</code>.
</p></blockquote>
<blockquote><p>New option <code>mouse-avoidance-banish-position</code> specifies where the<br />
<code>banish</code> mouse avoidance setting moves the mouse.
</p></blockquote>
<blockquote><p>In Perl mode, new option <code>perl-indent-parens-as-block</code> causes non-block<br />
closing brackets to be aligned with the line of the opening bracket.
</p></blockquote>
<blockquote><p>In Proced mode, new command <code>proced-renice</code> renices marked processes.
</p></blockquote>
<blockquote><p>New option <code>async-shell-command-buffer</code> specifies the buffer to use<br />
for a new asynchronous <code>shell-command</code> when the default output buffer<br />
<code>*Async Shell Command*</code> is already in use.
</p></blockquote>
<p>Handy if you don’t want your shell output buffer overwritten when you run more than one asynchronous command. </p>
<blockquote><p>SQL mode has a new option <code>sql-db2-escape-newlines</code>.<br />
If non-nil, newlines sent to the command interpreter will be escaped<br />
by a backslash.  The default does not escape the newlines and assumes<br />
that the sql statement will be terminated by a semicolon.
</p></blockquote>
<blockquote><p>New command <code>tabulated-list-sort</code>, bound to <code>S</code> in Tabulated List mode<br />
(and modes that derive from it), sorts the column at point, or the Nth<br />
column if a numeric prefix argument is given.
</p></blockquote>
<p>Its use should be pretty straight forward but I find that mode a bit buggy. Probably better if you stick to using the one in org mode.</p>
<blockquote><p><code>which-func-modes</code> now defaults to t, so Which Function mode, when<br />
enabled, applies to all applicable major modes.
</p></blockquote>
<p>A nice change as Which Function mode worked in more buffers than the <code>which-func-modes</code> gave it credit for.</p>
<blockquote><p><code>winner-mode-hook</code> now runs when the mode is disabled, as well as when<br />
it is enabled.
</p></blockquote>
<blockquote><p>Follow mode no longer works by using advice.<br />
The option <code>follow-intercept-processes</code> has been removed.
</p></blockquote>
<blockquote><p><code>javascript-generic-mode</code> is now an obsolete alias for <code>js-mode</code>.
</p></blockquote>
<blockquote><p>
Hooks renamed to avoid obsolete “-hooks” suffix:<br />
semantic-lex-reset-hooks -&gt; semantic-lex-reset-functions<br />
semantic-change-hooks -&gt; semantic-change-functions<br />
semantic-edits-new-change-hooks -&gt; semantic-edits-new-change-functions<br />
semantic-edits-delete-change-hooks -&gt; semantic-edits-delete-change-functions<br />
semantic-edits-reparse-change-hooks -&gt; semantic-edits-reparse-change-functions<br />
semanticdb-save-database-hooks -&gt; semanticdb-save-database-functions<br />
c-prepare-bug-report-hooks -&gt; c-prepare-bug-report-hook<br />
rcirc-sentinel-hooks -&gt; rcirc-sentinel-functions<br />
rcirc-receive-message-hooks -&gt; rcirc-receive-message-functions<br />
rcirc-activity-hooks -&gt; rcirc-activity-functions<br />
rcirc-print-hooks -&gt; rcirc-print-functions<br />
dbus-event-error-hooks -&gt; dbus-event-error-functions<br />
eieio-pre-method-execution-hooks -&gt; eieio-pre-method-execution-functions<br />
checkdoc-style-hooks -&gt; checkdoc-style-functions<br />
checkdoc-comment-style-hooks -&gt; checkdoc-comment-style-functions<br />
archive-extract-hooks -&gt; archive-extract-hook<br />
filesets-cache-fill-content-hooks -&gt; filesets-cache-fill-content-hook<br />
hfy-post-html-hooks -&gt; hfy-post-html-hook<br />
nndiary-request-create-group-hooks -&gt; nndiary-request-create-group-functions<br />
nndiary-request-update-info-hooks -&gt; nndiary-request-update-info-functions<br />
nndiary-request-accept-article-hooks -&gt; nndiary-request-accept-article-functions<br />
gnus-subscribe-newsgroup-hooks -&gt; gnus-subscribe-newsgroup-functions
</p></blockquote>
<h2>Obsolete packages</h2>
<blockquote><p>assoc.el<br />
In most cases, assoc+member+push+delq work just as well.<br />
And in any case it’s just a terrible package: ugly semantics, terrible<br />
inefficiency, and not namespace-clean.<br />
*** bruce.el<br />
*** cust-print.el<br />
*** ledit.el<br />
*** mailpost.el<br />
*** mouse-sel.el<br />
*** patcomp.el
</p></blockquote>
<h2>Incompatible Lisp Changes in Emacs 24.3</h2>
<blockquote><p>Docstrings starting with <code>*</code> no longer indicate user options.<br />
Only variables defined using <code>defcustom</code> are considered user options.<br />
The function <code>user-variable-p</code> is now an obsolete alias for<br />
<code>custom-variable-p</code>.
</p></blockquote>
<blockquote><p>The return values of <code>defalias</code>, <code>defun</code> and <code>defmacro</code> have changed,<br />
and are now undefined.  For backwards compatibility, <code>defun</code> and<br />
<code>defmacro</code> currently return the name of the newly defined<br />
function/macro, but this should not be relied upon.
</p></blockquote>
<blockquote><p><code>random</code> by default now returns a different random sequence in<br />
every Emacs run.  Use <code>(random S)</code>, where S is a string, to set the<br />
random seed to a value based on S, in order to get a repeatable<br />
sequence in later calls.
</p></blockquote>
<blockquote><p>If the NEWTEXT arg to <code>replace-match</code> contains a substring “\\?”,<br />
that substring is inserted literally even if the LITERAL arg is<br />
non-nil, instead of causing an error to be signaled.
</p></blockquote>
<blockquote><p><code>select-window</code> now always makes the window’s buffer current.<br />
It does so even if the window was selected before.
</p></blockquote>
<blockquote><p>The function <code>x-select-font</code> can return a font spec, instead of a<br />
font name as a string.  Whether it returns a font spec or a font name<br />
depends on the graphical library.
</p></blockquote>
<blockquote><p><code>face-spec-set</code> no longer sets frame-specific attributes when the<br />
third argument is a frame (that usage was obsolete since Emacs 22.2).
</p></blockquote>
<blockquote><p><code>set-buffer-multibyte</code> now signals an error in narrowed buffers.
</p></blockquote>
<blockquote><p>The CL package’s <code>get-setf-method</code> function no longer exists.<br />
Generalized variables are now part of core Emacs Lisp, and implemented<br />
differently to the way cl.el used to do it.  It is not possible to<br />
define a compatible replacement for <code>get-setf-method</code>.  See the file<br />
gv.el for internal details of the new implementation.
</p></blockquote>
<blockquote><p>The arguments of <code>dbus-register-signal</code> are no longer just strings,<br />
but keywords or keyword-string pairs.  The old argument list will<br />
still be supported for Emacs 24.x.
</p></blockquote>
<blockquote><p>Miscellaneous name changes<br />
Some Lisp symbols have been renamed to correct their spelling,<br />
or to be more consistent with standard Emacs terminology.
</p></blockquote>
<blockquote><p>Renamed functions<br />
hangul-input-method-inactivate -&gt; hangul-input-method-deactivate<br />
inactivate-input-method -&gt; deactivate-input-method<br />
quail-inactivate -&gt; quail-deactivate<br />
robin-inactivate -&gt; robin-deactivate<br />
viper-inactivate-input-method -&gt; viper-deactivate-input-method<br />
viper-inactivate-input-method-action -&gt;<br />
     viper-deactivate-input-method-action<br />
ucs-input-inactivate -&gt; ucs-input-deactivate
</p></blockquote>
<blockquote><p>Renamed hooks<br />
The old hooks are still supported for backward compatibility, but they<br />
are deprecated and will be removed eventually.<br />
input-method-inactivate-hook -&gt; input-method-deactivate-hook<br />
robin-inactivate-hook -&gt; robin-deactivate-hook<br />
quail-inactivate-hook -&gt; quail-deactivate-hook
</p></blockquote>
<blockquote><p>Renamed variables<br />
follow-deactive-menu -&gt; follow-inactive-menu<br />
inactivate-current-input-method-function -&gt;<br />
     deactivate-current-input-method-function
</p></blockquote>
<blockquote><p>Some obsolete functions, variables, and faces have been removed:<br />
<code>last-input-char</code>, <code>last-command-char</code>, <code>unread-command-char</code><br />
<code>facemenu-unlisted-faces</code><br />
<code>rmail-decode-mime-charset</code><br />
<code>iswitchb-read-buffer</code><br />
<code>sc-version</code>, <code>sc-submit-bug-report</code><br />
<code>set-char-table-default</code><br />
<code>string-to-sequence</code> (use <code>string-to-list</code> or <code>string-to-vector</code>)<br />
<code>compile-internal</code><br />
<code>modeline</code><br />
<code>mode-line-inverse-video</code><br />
<code>follow-mode-off-hook</code><br />
<code>cvs-commit-buffer-require-final-newline</code><br />
(use <code>log-edit-require-final-newline</code> instead)<br />
<code>cvs-changelog-full-paragraphs</code><br />
(use <code>log-edit-changelog-full-paragraphs</code> instead)<br />
<code>cvs-diff-ignore-marks</code>, <code>cvs-diff-buffer-name</code><br />
<code>vc-ignore-vc-files</code> (use <code>vc-handled-backends</code> instead)<br />
<code>vc-master-templates</code> (use <code>vc-handled-backends</code> instead)<br />
<code>vc-checkout-carefully</code>
</p></blockquote>
<h2>Lisp Changes in Emacs 24.3</h2>
<blockquote><p>CL-style generalized variables are now in core Elisp.<br />
<code>setf</code> is autoloaded; <code>push</code> and <code>pop</code> accept generalized variables.<br />
You can define your own generalized variables using <code>gv-define-simple-setter</code>,<br />
<code>gv-define-setter</code>, etc.
</p></blockquote>
<blockquote><p>Emacs tries to macroexpand interpreted (non-compiled) files during load.<br />
This can significantly speed up execution of non-byte-compiled code,<br />
but can also bump into previously unnoticed cyclic dependencies.<br />
These are generally harmless: they will simply cause the macro calls<br />
to be left for later expansion (as before), but will result in a<br />
warning (“Eager macro-expansion skipped due to cycle”) describing the cycle.<br />
You may wish to restructure your code so this does not happen.
</p></blockquote>
<blockquote><p>New sampling-based Elisp profiler.<br />
Try M-x profiler-start, do some work, and then call M-x profiler-report.<br />
When finished, use M-x profiler-stop.  The sampling rate can be based on<br />
CPU time or memory allocations.
</p></blockquote>
<blockquote><p><code>defun</code> also accepts a (declare DECLS) form, like <code>defmacro</code>.<br />
The interpretation of the DECLS is determined by <code>defun-declarations-alist</code>.
</p></blockquote>
<blockquote><p>New macros <code>setq-local</code> and <code>defvar-local</code>.
</p></blockquote>
<blockquote><p>Face underlining can now use a wave.
</p></blockquote>
<p>Now you can finally make misspelled words in <code>ispell-minor-mode</code> look like Microsoft Word with squiggly underlines!</p>
<blockquote><p><code>read-regexp</code> has a new argument HISTORY; the first argument PROMPT<br />
of <code>read-regexp</code> accepts a string ending with a colon and space, and its<br />
second argument DEFAULTS can be a list of strings accessible via <code>M-n</code><br />
in the minibuffer ahead of other hard-coded useful regexp-related values.<br />
More commands use <code>read-regexp</code> now to read their regexp arguments.
</p></blockquote>
<p>Very useful change for those of us who use readers and often find ourselves reinventing the history wheel.</p>
<blockquote><p>Completion
</p></blockquote>
<blockquote><p>New function <code>completion-table-with-quoting</code> to handle completion<br />
in the presence of quoting, such as file completion in shell buffers.
</p></blockquote>
<blockquote><p>New function <code>completion-table-subvert</code> to use an existing completion<br />
table, but with a different prefix.
</p></blockquote>
<h2>Debugger</h2>
<blockquote><p>New error type and new function <code>user-error</code>.<br />
These do not trigger the debugger.
</p></blockquote>
<blockquote><p>New option <code>debugger-bury-or-kill</code>, saying what to do with the<br />
debugger buffer when exiting debug.
</p></blockquote>
<blockquote><p>Set <code>debug-on-message</code> to enter the debugger when a certain<br />
message is displayed in the echo area.  This can be useful when trying<br />
to work out which code is doing something.
</p></blockquote>
<blockquote><p>New var <code>inhibit-debugger</code>, automatically set to prevent accidental<br />
recursive invocations.
</p></blockquote>
<h2>Window handling</h2>
<blockquote><p>New command <code>fit-frame-to-buffer</code> adjusts the frame height to<br />
fit the contents.
</p></blockquote>
<blockquote><p>The command <code>fit-window-to-buffer</code> can adjust the frame height<br />
if the new option <code>fit-frame-to-buffer</code> is non-nil.
</p></blockquote>
<blockquote><p>New macro <code>with-temp-buffer-window</code>, similar to<br />
<code>with-output-to-temp-buffer</code>.
</p></blockquote>
<p>This is a useful command if you want to generate output with <code>prin1</code>, etc. or print output from an external command in a separate window. I’m personally very happy to see this macro make an appearance.</p>
<blockquote><p><code>temp-buffer-resize-mode</code> no longer resizes windows that have been<br />
reused.
</p></blockquote>
<blockquote><p>New option <code>switch-to-buffer-preserve-window-point</code> to restore a<br />
window’s point when switching buffers.
</p></blockquote>
<blockquote><p>New display action alist entries <code>window-height</code> and <code>window-width</code><br />
specify the size of new windows created by <code>display-buffer</code>.
</p></blockquote>
<blockquote><p>New display action alist entry <code>pop-up-frame-parameters</code>, if<br />
non-nil, specifies frame parameters to give any newly-created frame.
</p></blockquote>
<blockquote><p>New display action alist entry <code>inhibit-switch-frame</code>, if non-nil,<br />
tells display action functions to avoid changing which frame is<br />
selected.
</p></blockquote>
<blockquote><p>New display action alist entry <code>previous-window</code>, if non-nil,<br />
specifies window to reuse in <code>display-buffer-in-previous-window</code>.
</p></blockquote>
<blockquote><p>New display action functions <code>display-buffer-below-selected</code>,<br />
and <code>display-buffer-in-previous-window</code>.
</p></blockquote>
<blockquote><p>The functions <code>get-lru-window</code>, <code>get-mru-window</code> and <code>get-largest-window</code><br />
now accept a third argument to avoid choosing the selected window.
</p></blockquote>
<blockquote><p>Additional values recognized for option <code>window-combination-limit</code>.
</p></blockquote>
<blockquote><p>The following variables are obsolete, as they can be replaced by<br />
appropriate entries in the <code>display-buffer-alist</code> function introduced<br />
in Emacs 24.1:<br />
<code>dired-shrink-to-fit</code><br />
<code>display-buffer-reuse-frames</code><br />
<code>display-buffer-function</code><br />
<code>special-display-buffer-names</code><br />
<code>special-display-frame-alist</code><br />
<code>special-display-function</code><br />
<code>special-display-regexps</code>
</p></blockquote>
<h2>Time</h2>
<blockquote><p><code>current-time-string</code> no longer requires that its argument’s year<br />
must be in the range 1000..9999.  It now works with any year supported<br />
by the underlying C implementation.
</p></blockquote>
<blockquote><p><code>current-time</code> now returns extended-format time stamps<br />
(HIGH LOW USEC PSEC), where the new PSEC slot specifies picoseconds.<br />
PSEC is typically a multiple of 1000 on current machines.  Other<br />
functions that use this format, such as <code>file-attributes</code> and<br />
<code>format-time-string</code>, have been changed accordingly.  Old-format time<br />
stamps are still accepted.
</p></blockquote>
<blockquote><p>The format of timers in <code>timer-list</code> and <code>timer-idle-list</code> is now<br />
[TRIGGERED-P HI-SECS LO-SECS USECS REPEAT-DELAY FUNCTION ARGS IDLE-DELAY PSECS].<br />
The PSECS slot is new, and uses picosecond resolution.  It can be<br />
accessed via the new <code>timer--psecs</code> accessor.
</p></blockquote>
<blockquote><p>Last-modified time stamps in undo lists now are of the form<br />
(t HI-SECS LO-SECS USECS PSECS) instead of (t HI-SECS . LO-SECS).
</p></blockquote>
<h2>(Old MacDonald had a farm) EIEIO</h2>
<blockquote><p>Improved security when handling persistent objects:
</p></blockquote>
<blockquote><p><code>eieio-persistent-read</code> now features optional arguments for specifying<br />
the class to load, as well as a flag stating whether subclasses are allowed;<br />
if provided, other classes will be rejected by the reader.  For<br />
compatibility with existing code, if the class is omitted only a<br />
warning is issued.
</p></blockquote>
<blockquote><p>New specialized reader for pulling in classes and signaling errors<br />
without evaluation of suspicious code.
</p></blockquote>
<blockquote><p>All slots that contain objects must have a :type.  Slots with lists<br />
of objects must use a new type predicate for a list of an object type.
</p></blockquote>
<blockquote><p>Support for <code>find-function</code> and similar utilities, through the addition<br />
of filename support to generated symbols.
</p></blockquote>
<h2>Even more misc stuff</h2>
<blockquote><p>Floating point functions now always return special values like NaN,<br />
instead of signaling errors, if given invalid args; e.g., (log -1.0).<br />
Previously, they returned NaNs on some platforms but signaled errors<br />
on others.  The affected functions are acos, asin, tan, exp, expt,<br />
log, log10, sqrt, and mod.
</p></blockquote>
<blockquote><p>New fringe bitmap <code>exclamation-mark</code>.
</p></blockquote>
<p>Seems like flymake’s using it for errors. Neat.</p>
<blockquote><p>Miscellaneous changes to special forms and macros
</p></blockquote>
<blockquote><p><code>defun</code> and <code>defmacro</code> are now macros rather than special forms.
</p></blockquote>
<p>If you ever wanted to know how a function is created in Emacs, now you can look at the lisp code in <code>byte-run.el</code>. Ditto for <code>defmacro</code>.</p>
<blockquote><p><code>kbd</code> is now a function rather than a macro.
</p></blockquote>
<h2>Miscellaneous new functions</h2>
<blockquote><p><code>set-temporary-overlay-map</code> sets up a temporary keymap that<br />
takes precedence over most other maps for a short while (normally one key).
</p></blockquote>
<blockquote><p><code>autoloadp</code> tests if its argument is an autoloaded object.
</p></blockquote>
<blockquote><p><code>autoload-do-load</code> performs the autoloading operation.
</p></blockquote>
<blockquote><p><code>buffer-narrowed-p</code> tests if the buffer is narrowed.
</p></blockquote>
<blockquote><p><code>file-name-base</code> returns a file name sans directory and extension.
</p></blockquote>
<blockquote><p><code>function-get</code> fetches a function property, following aliases.
</p></blockquote>
<blockquote><p><code>posnp</code> tests if an object is a <code>posn</code>.
</p></blockquote>
<blockquote><p><code>system-users</code> returns the user names on the system.
</p></blockquote>
<blockquote><p><code>system-groups</code> returns the group names on the system.
</p></blockquote>
<blockquote><p><code>tty-top-frame</code> returns the topmost frame of a text terminal.
</p></blockquote>
<h2>The following functions and variables are obsolete:</h2>
<blockquote><p>
<code>automount-dir-prefix</code> (use <code>directory-abbrev-alist</code>)<br />
<code>buffer-has-markers-at</code><br />
<code>macro-declaration-function</code> (use <code>macro-declarations-alist</code>)<br />
<code>window-system-version</code> (provides no useful information)<br />
<code>dired-pop-to-buffer</code> (use <code>dired-mark-pop-up</code>)<br />
<code>query-replace-interactive</code><br />
<code>font-list-limit</code> (has had no effect since Emacs &lt; 23)
</p></blockquote>
<h2>Changes in Emacs 24.3 on Non-Free Operating Systems</h2>
<blockquote><p>Cygwin builds can use the native MS Windows user interface.<br />
Pass <code>--with-w32</code> to configure.  The default remains the X11 interface.
</p></blockquote>
<blockquote><p>Two new functions are available in Cygwin builds:<br />
<code>cygwin-convert-file-name-from-windows</code> and<br />
<code>cygwin-convert-file-name-to-windows</code>.  These functions allow Lisp<br />
code to access the Cygwin file-name mapping machinery to convert<br />
between Cygwin and Windows-native file and directory names.
</p></blockquote>
<blockquote><p>When invoked with the -nw switch to run on the Windows text-mode terminal,<br />
Emacs now supports <code>mouse-highlight</code>, help-echo (in the echo area), and<br />
<code>mouse-autoselect-window</code>.
</p></blockquote>
<blockquote><p>On MS Windows Vista and later Emacs now supports symbolic links.
</p></blockquote>
<blockquote><p>On MS Windows, you can pass <code>--without-libxml2</code> to configure.bat to omit<br />
support for libxml2, even if its presence is detected.
</p></blockquote>
<blockquote><p>On Mac OS X, the Nextstep port requires OS X 10.4 or later.
</p></blockquote>
<blockquote><p>On Mac OS X, configure no longer automatically adds the Fink “/sw”<br />
directories to the search path.  You must add them yourself if you want them.
</p></blockquote>
<h1>The End!</h1>
<p>Phew. That was a lot of changes and I’ve barely explained 10% of them. Let me know if I glossed over some cool new stuff.</p>
<p><a class=\"a2a_button_google_plusone addtoany_special_service\"></a><a class=\"a2a_button_twitter_tweet addtoany_special_service\"></a><a class=\"a2a_dd a2a_target addtoany_share_save\" href=\"http://www.addtoany.com/share_save#url=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2013%2F03%2F11%2Fwhats-new-emacs-24-3%2F&amp;title=What%E2%80%99s%20New%20in%20Emacs%2024.3\" id=\"wpa2a_4\">Share</a></p>") (author nil (name nil "mickey") (uri nil "http://www.masteringemacs.org")) (source nil (title ((type . "html")) "Mastering Emacs") (subtitle ((type . "html")) "a blog about mastering the world's best text editor") (link ((rel . "self") (href . "http://www.masteringemacs.org/feed/"))) (id nil "http://www.masteringemacs.org"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Bryan Bell: Enabling WebCL Highlighting in Emacs") (link ((href . "http://bloggingmath.wordpress.com/2013/03/10/enabling-webcl-highlighting-in-emacs/"))) (id nil "http://bloggingmath.wordpress.com/?p=861") (updated nil "2013-03-10T01:29:02+00:00") (content ((type . "html") (xml:lang . "en")) "<p>When editing WebCL OpenCL kernels in Emacs I like to have the OpenCL kernel code highlighted as C code. This is easy to achieve using the multi-mode.el package. </p>
<p>The steps on Ubuntu (or any other modern Linux with <b>Emacs 24</b>) are</p>
<ol>
<li> Enable the <a href=\"http://marmalade-repo.org/\" rel=\"nofollow\">http://marmalade-repo.org/</a> elpa package archive by adding the below to your .emacs file and restarting Emacs
<pre>    (require 'package)
    (add-to-list 'package-archives 
    '(\"marmalade\" .
      \"http://marmalade-repo.org/packages/\"))
    (package-initialize)
</pre>
</li>
<li> Install multi-web-mode by using “M-x package-list-packages” and scrolling down to “multi-web-mode”.</li>
<li> Add the below to the bottom of your .emacs file and restart Emacs
<pre>    (require 'multi-web-mode)
    (setq mweb-default-major-mode 'html-mode)
    (setq mweb-tags '((php-mode \"&lt;\\\\?php\\\\|&lt;\\\\? \\\\|\")
                      (js-mode \"]*&gt;\" \"\")
                      (css-mode \"]*&gt;\" \"\")
	              (c-mode \"]* +type=\\\"text/x-opencl\\\"[^&gt;]*&gt;\" \"\")))
    (setq mweb-filename-extensions '(\"php\" \"htm\" \"html\" \"ctp\" \"phtml\" \"php4\" \"php5\"))
    (multi-web-global-mode 1)
</pre>
<p>   The important part is the “c-mode” section that will enable C highlighting for OpenCL kernels in html files.
</p></li>
<li> Start coding! </li>
</ol>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/bloggingmath.wordpress.com/861/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/bloggingmath.wordpress.com/861/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=bloggingmath.wordpress.com&amp;blog=354208&amp;post=861&amp;subd=bloggingmath&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Bryan Bell") (uri nil "http://bloggingmath.wordpress.com")) (source nil (title ((type . "html")) "Math and More » emacs") (subtitle ((type . "html")) "Problem solving at its best") (link ((rel . "self") (href . "http://bloggingmath.wordpress.com/tag/emacs/feed/"))) (id nil "http://bloggingmath.wordpress.com"))))) ("Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp" "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
119 BACKUP/.emacs
84 BACKUP/elisp/keramida-w3m.el
90 BACKUP/elisp/keramida-keys.el
156 BACKUP/elisp/keramida-irc.el
5449 BACKUP/elisp/erlang.el
892 BACKUP/elisp/fill-column-indicator.el
344 BACKUP/elisp/keramida-erc.el
87 BACKUP/elisp/keramida-chrome.el
89 BACKUP/elisp/keramida-autoload.el
141 BACKUP/elisp/keramida-ui.el
42 BACKUP/elisp/keramida-slime.el
1082 BACKUP/elisp/ace-jump-mode.el
2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
111 BACKUP/elisp/scala-mode2/scala-mode2.el
121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
1103 BACKUP/elisp/php-mode.el
142 BACKUP/elisp/themes/cobalt-theme.el
665 BACKUP/elisp/themes/zenburn-theme.el
142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
115 BACKUP/elisp/themes/tomorrow-theme.el
80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
339 BACKUP/elisp/cmake-mode.el
95 BACKUP/elisp/keramida-cc-extra.el
1341 BACKUP/elisp/lua-mode.el
2324 BACKUP/elisp/markdown-mode.el
184 BACKUP/elisp/rcirc-notify.el
167 BACKUP/elisp/keramida-defaults.el
203 BACKUP/elisp/keramida-hooks.el
43 BACKUP/elisp/keramida-lang.el
435 BACKUP/elisp/edit-server.el
709 BACKUP/elisp/slang-mode.el
66 BACKUP/elisp/keramida-eshell.el
19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
(let ((file-forms nil))
;; Keep reading Lisp expressions, until we hit EOF,
;; and just add one entry for each toplevel form
;; to `file-forms'.
(condition-case err
(with-temp-buffer
(insert-file file-name)
(goto-char (point-min))
(while (&lt; (point) (point-max))
(let* ((expr (read (current-buffer)))
(form (first expr)))
(setq file-forms (cons form file-forms)))))
(end-of-file nil))
(reverse file-forms)))
(defun file-forms-alist (file-name)
(let ((forms-table (make-hash-table :test #'equal)))
;; Build a hash that maps form-name =&gt; count for all the
;; top-level forms of the `file-name' file.
(dolist (form (file-forms-list file-name))
(let ((form-name (format \"%s\" form)))
(puthash form-name (1+ (gethash form-name forms-table 0))
forms-table)))
;; Convert the hash table to an alist of the form:
;;    ((form-name . count) (form-name-2 . count-2) ...)
(let ((forms-alist nil))
(maphash (lambda (form-name form-count)
(setq forms-alist (cons (cons form-name form-count)
forms-alist)))
forms-table)
forms-alist)))
(progn
(insert \"\\n\")
(insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
(let ((total-forms 0))
(dolist (fc (sort (file-forms-alist \"~/.emacs\")
(lambda (left right)
(&gt; (cdr left) (cdr right)))))
(insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
(setq total-forms (+ total-forms (cdr fc))))
(insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
32 setq-default
24 eval-after-load
14 set-face-attribute
14 global-set-key
5 autoload
4 require
4 setq
4 put
3 defun
2 when
1 add-hook
1 let
1 set-display-table-slot
1 fset
1 tool-bar-mode
1 scroll-bar-mode
1 menu-bar-mode
1 ido-mode
1 global-hl-line-mode
1 show-paren-mode
1 iswitchb-mode
1 global-font-lock-mode
1 cua-mode
1 column-number-mode
1 add-to-list
1 prefer-coding-system
122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />" "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/" (20841 6824) old 11 nil nil ((title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp") (link ((href . "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/"))) (id nil "http://keramida.wordpress.com/?p=2231") (updated nil "2013-04-13T08:43:20+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
   119 BACKUP/.emacs
    84 BACKUP/elisp/keramida-w3m.el
    90 BACKUP/elisp/keramida-keys.el
   156 BACKUP/elisp/keramida-irc.el
  5449 BACKUP/elisp/erlang.el
   892 BACKUP/elisp/fill-column-indicator.el
   344 BACKUP/elisp/keramida-erc.el
    87 BACKUP/elisp/keramida-chrome.el
    89 BACKUP/elisp/keramida-autoload.el
   141 BACKUP/elisp/keramida-ui.el
    42 BACKUP/elisp/keramida-slime.el
  1082 BACKUP/elisp/ace-jump-mode.el
     2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
   907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
    26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
   502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
    37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
   808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
   111 BACKUP/elisp/scala-mode2/scala-mode2.el
   121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
  1103 BACKUP/elisp/php-mode.el
   142 BACKUP/elisp/themes/cobalt-theme.el
   665 BACKUP/elisp/themes/zenburn-theme.el
   142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
   115 BACKUP/elisp/themes/tomorrow-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
   339 BACKUP/elisp/cmake-mode.el
    95 BACKUP/elisp/keramida-cc-extra.el
  1341 BACKUP/elisp/lua-mode.el
  2324 BACKUP/elisp/markdown-mode.el
   184 BACKUP/elisp/rcirc-notify.el
   167 BACKUP/elisp/keramida-defaults.el
   203 BACKUP/elisp/keramida-hooks.el
    43 BACKUP/elisp/keramida-lang.el
   435 BACKUP/elisp/edit-server.el
   709 BACKUP/elisp/slang-mode.el
    66 BACKUP/elisp/keramida-eshell.el
 19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
  (let ((file-forms nil))
    ;; Keep reading Lisp expressions, until we hit EOF,
    ;; and just add one entry for each toplevel form
    ;; to `file-forms'.
    (condition-case err
        (with-temp-buffer
          (insert-file file-name)
          (goto-char (point-min))
          (while (&lt; (point) (point-max))
            (let* ((expr (read (current-buffer)))
                   (form (first expr)))
              (setq file-forms (cons form file-forms)))))
      (end-of-file nil))
    (reverse file-forms)))

(defun file-forms-alist (file-name)
  (let ((forms-table (make-hash-table :test #'equal)))
    ;; Build a hash that maps form-name =&gt; count for all the
    ;; top-level forms of the `file-name' file.
    (dolist (form (file-forms-list file-name))
      (let ((form-name (format \"%s\" form)))
        (puthash form-name (1+ (gethash form-name forms-table 0))
                 forms-table)))
    ;; Convert the hash table to an alist of the form:
    ;;    ((form-name . count) (form-name-2 . count-2) ...)
    (let ((forms-alist nil))
      (maphash (lambda (form-name form-count)
                 (setq forms-alist (cons (cons form-name form-count)
                                         forms-alist)))
               forms-table)
      forms-alist)))

(progn
  (insert \"\\n\")
  (insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
  (let ((total-forms 0))
    (dolist (fc (sort (file-forms-alist \"~/.emacs\")
                      (lambda (left right)
                        (&gt; (cdr left) (cdr right)))))
      (insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
      (setq total-forms (+ total-forms (cdr fc))))
    (insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
   32 setq-default
   24 eval-after-load
   14 set-face-attribute
   14 global-set-key
    5 autoload
    4 require
    4 setq
    4 put
    3 defun
    2 when
    1 add-hook
    1 let
    1 set-display-table-slot
    1 fset
    1 tool-bar-mode
    1 scroll-bar-mode
    1 menu-bar-mode
    1 ido-mode
    1 global-hl-line-mode
    1 show-paren-mode
    1 iswitchb-mode
    1 global-font-lock-mode
    1 cua-mode
    1 column-number-mode
    1 add-to-list
    1 prefer-coding-system
  122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com")))) ("Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors" "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>" "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/" (20840 26440) old 12 nil nil ((title ((type . "html")) "Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors") (link ((href . "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/"))) (id nil "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors") (updated nil "2013-04-12T19:58:00+00:00") (content ((type . "html")) "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>") (author nil (name nil "Brian Zwahr") (uri nil "http://echosa.github.com/")) (source nil (title ((type . "html")) "Category: emacs | Dev and Such") (link ((rel . "self") (href . "http://echosa.github.io/blog/categories/emacs/atom.xml"))) (id nil "http://echosa.github.com/")))) ("Bryan Murdock: List Foreign Keys in Your Postgresql Database" "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
(select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
from (select conrelid,confrelid,conkey,confkey,
generate_series(1,array_upper(conkey,1)) as i
from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
(select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
from (select conrelid,confrelid,conkey,confkey,
generate_series(1,array_upper(conkey,1)) as i
from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
a.attnum = conkey and a.attrelid = conrelid
AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>" "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html" (20840 9859) old 13 nil nil ((title ((type . "html")) "Bryan Murdock: List Foreign Keys in Your Postgresql Database") (link ((href . "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-1385815532727505725") (updated nil "2013-04-12T15:21:39+00:00") (content ((type . "html")) "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid 
  AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Raimon Grau: Running a shell command on current file" "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>" "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html" (20840 4210) old 14 nil nil ((title ((type . "html")) "Raimon Grau: Running a shell command on current file") (link ((href . "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-6579520597337336421") (updated nil "2013-04-12T13:47:30+00:00") (content ((type . "html")) "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Phil Hagelberg: in which everything is ephemeral" "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a>
<a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
that I'm not sure I can add much to it beyond anecdotes. From my
own experience I've been a remote worker for all but a year and a
half of my career and have loved it. The amount of time wasted by
cars commuting is sobering, and the ability to start the day after
simply crossing my back yard to the
<a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
lab</a> is not something I'd give up lightly. Especially with
warmer weather coming up in Seattle the draw
of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
strong indeed.</p>
<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />
<p>But the thing about remote work is that it can be really
difficult to do effectively. At my last job we were dedicated from
the outset to making the fully-remote model work, and we were able
to assemble a team that functioned fantastically well while
drawing from talent all over the country. But in order to make
this work we had to set things up so that no one operated in
isolation. We had our daily stand-ups, but more important was
spending the bulk of the time paired with another hacker over SSH
and VoIP. And even when not paired, there was the understanding
that you could easily grab someone to get a real-time review of
whatever you were writing.</p>
<p>In order to facilitate this, we would usually set up a shared
user on each laptop (or sometimes on an unused server sitting
under a desk somewhere) and do the necessary port forwarding
wrangling and public key management to ensure others could SSH in
and join our <tt>tmux</tt> sessions. Given that it was something
we relied on every day it wasn't particularly onerous to set things
up, and over time the tools got a bit better.
(<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
a common repository for the team's pubkeys, etc.)</p>
<p>These days things are different—I'm at a company that
embraces a remote/local mix of teams rather than being fully
remote. While I've got co-workers who are happy to discuss and
review code remotely, I can't assume everyone has spent the time
to to facilitate remote collaboration if it's not an everyday tool
for them. And when you're looking for another set of eyes on a
problem, you need frictionless tools; otherwise you might not even
bother asking for help. So I put
together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>
<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
has since unfortunately fallen into disrepair. (There's a great
video on their splash page explaining things if you've got a
couple minutes.) Basically you give it the name of a project you
want to hack on and who you want to hack on it with, and it can
preconfigure the host by checking out a copy, adding SSH public keys
for all invited users, and running all the necessary setup scripts
to get dependencies and user settings installed. Then everyone
just SSHes into the machine and joins a shared tmux session, and
it's all yours.</p>
<p>I had access to the private alpha of pair.io, but since
billing hadn't been implemented yet I always felt a bit guilty
whenever I launched a machine to work on since it would just rack
up the hours in the author's Amazon account.</p>
<p>I'd been thinking what it would take to implement that kind of
thing myself but had been dissuaded by the idea of writing a
billing system. Whenever you're dealing with money on behalf of
the user it can hardly be considered a for-fun project. But then I
realized that can be neatly sidestepped simply by prompting for
the user's AWS credentials while launching the instances. It turns
out keeping those around in an encrypted cookie in the browser
makes it possible to perform further operations on the user's
behalf without getting into the harrowing business of storing
secrets. It also means it can be done completely as free software,
and it's not tied to myself at all—if I lose interest and
wander off anyone else can pick it up and deploy on their own.</p>
<p>So I've gotten it to the point where I'm pretty happy with it. At
just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
it comes in handy streamlining things at work, but it's open for
any remote collaborators who may find it useful in any kind
of pairing contexts. If you run into any issues trying it out or
have suggestions, please head over to
the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
issue tracker</a> and let me know.</p>" "http://technomancy.us/166" (20839 52301) old 15 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which everything is ephemeral") (link ((href . "http://technomancy.us/166"))) (id nil "tag:technomancy.us,2007:in%20which%20everything%20is%20ephemeral") (updated nil "2013-04-12T08:56:45+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a> 
  <a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
  that I'm not sure I can add much to it beyond anecdotes. From my
  own experience I've been a remote worker for all but a year and a
  half of my career and have loved it. The amount of time wasted by
  cars commuting is sobering, and the ability to start the day after
  simply crossing my back yard to the
  <a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
  lab</a> is not something I'd give up lightly. Especially with
  warmer weather coming up in Seattle the draw
  of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
  outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
  strong indeed.</p>

<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />

<p>But the thing about remote work is that it can be really
  difficult to do effectively. At my last job we were dedicated from
  the outset to making the fully-remote model work, and we were able
  to assemble a team that functioned fantastically well while
  drawing from talent all over the country. But in order to make
  this work we had to set things up so that no one operated in
  isolation. We had our daily stand-ups, but more important was
  spending the bulk of the time paired with another hacker over SSH
  and VoIP. And even when not paired, there was the understanding
  that you could easily grab someone to get a real-time review of
  whatever you were writing.</p>

<p>In order to facilitate this, we would usually set up a shared
  user on each laptop (or sometimes on an unused server sitting
  under a desk somewhere) and do the necessary port forwarding
  wrangling and public key management to ensure others could SSH in
  and join our <tt>tmux</tt> sessions. Given that it was something
  we relied on every day it wasn't particularly onerous to set things
  up, and over time the tools got a bit better.
  (<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
  a common repository for the team's pubkeys, etc.)</p>

<p>These days things are different—I'm at a company that
  embraces a remote/local mix of teams rather than being fully
  remote. While I've got co-workers who are happy to discuss and
  review code remotely, I can't assume everyone has spent the time
  to to facilitate remote collaboration if it's not an everyday tool
  for them. And when you're looking for another set of eyes on a
  problem, you need frictionless tools; otherwise you might not even
  bother asking for help. So I put
  together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>

<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
  projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
  fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
  has since unfortunately fallen into disrepair. (There's a great
  video on their splash page explaining things if you've got a
  couple minutes.) Basically you give it the name of a project you
  want to hack on and who you want to hack on it with, and it can
  preconfigure the host by checking out a copy, adding SSH public keys
  for all invited users, and running all the necessary setup scripts
  to get dependencies and user settings installed. Then everyone
  just SSHes into the machine and joins a shared tmux session, and
  it's all yours.</p>

<p>I had access to the private alpha of pair.io, but since
  billing hadn't been implemented yet I always felt a bit guilty
  whenever I launched a machine to work on since it would just rack
  up the hours in the author's Amazon account.</p>

<p>I'd been thinking what it would take to implement that kind of
  thing myself but had been dissuaded by the idea of writing a
  billing system. Whenever you're dealing with money on behalf of
  the user it can hardly be considered a for-fun project. But then I
  realized that can be neatly sidestepped simply by prompting for
  the user's AWS credentials while launching the instances. It turns
  out keeping those around in an encrypted cookie in the browser
  makes it possible to perform further operations on the user's
  behalf without getting into the harrowing business of storing
  secrets. It also means it can be done completely as free software,
  and it's not tied to myself at all—if I lose interest and
  wander off anyone else can pick it up and deploy on their own.</p>

<p>So I've gotten it to the point where I'm pretty happy with it. At
  just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
  it comes in handy streamlining things at work, but it's open for
  any remote collaborators who may find it useful in any kind
  of pairing contexts. If you run into any issues trying it out or
  have suggestions, please head over to
  the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
  issue tracker</a> and let me know.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("sachachua: Emacs Conference 2013 videos" "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p>
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/" (20838 42432) old 16 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs Conference 2013 videos") (link ((href . "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/"))) (id nil "http://sachachua.com/blog/?p=24677") (updated nil "2013-04-11T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p> 
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Ben Simon: Gotch of the Day: fcsh fails to execute" "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>
<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>
<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>
<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>
<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>
<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>
<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>
<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>" "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html" (20830 49460) old 17 nil nil ((title ((type . "html")) "Ben Simon: Gotch of the Day: fcsh fails to execute") (link ((href . "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-8621941475180837146") (updated nil "2013-04-05T12:19:00+00:00") (content ((type . "html")) "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>

<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>

<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>

<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>

<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>

<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>

<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>

<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")))) ("Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti" "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>
<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>
<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>
<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>
<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>
<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>
<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>
<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>
<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>
<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>" "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html" (20829 18456) old 18 nil nil ((title ((type . "html")) "Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti") (link ((href . "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-1571512245931938946") (updated nil "2013-04-04T09:30:00+00:00") (content ((type . "html")) "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>

<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>

 

<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>

<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>

<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>

<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>

<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>

<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>

<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>

<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")))) ("Julien Danjou: Hy, Lisp in Python" "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>
<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>
<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>
<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>" "http://julien.danjou.info/blog/2013/lisp-python-hy" (20828 42672) old 19 nil nil ((title ((type . "html")) "Julien Danjou: Hy, Lisp in Python") (link ((href . "http://julien.danjou.info/blog/2013/lisp-python-hy"))) (id nil "http://julien.danjou.info/blog/2013/lisp-python-hy") (updated nil "2013-04-03T22:01:20+00:00") (content ((type . "html")) "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>


<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>

<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>

<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses" "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
been talking about how parentheses are such a big barrier to
adoption of Clojure these days. Apparently they're pretty
intimidating when you're used to a language with a lot of curly
braces and things. While I can't do anything about Clojure itself,
I realized we could make some changes to Leiningen that would
allow newcomers to return to the comfort of XML. My latest plugin
is
called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
and it lets you write this:</p>
<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>
<p>...instead of this bewildering, unfamiliar invocation:</p>
<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
<span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
<span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
<span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
<span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
[slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>
<p>I know it probably won't be used by anyone who has spent much
time with Clojure, but for newcomers hopefully this will remove
one of the big blockers for enterprise developers trying out
Clojure.</p>" "http://technomancy.us/165" (20825 61779) old 20 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses") (link ((href . "http://technomancy.us/165"))) (id nil "tag:technomancy.us,2007:in%20which%20we%20cater%20to%20those%20with%20an%20allergic%20reaction%20to%20parentheses") (updated nil "2013-04-01T20:42:59+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
  of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
  been talking about how parentheses are such a big barrier to
  adoption of Clojure these days. Apparently they're pretty
  intimidating when you're used to a language with a lot of curly
  braces and things. While I can't do anything about Clojure itself,
  I realized we could make some changes to Leiningen that would
  allow newcomers to return to the comfort of XML. My latest plugin
  is
  called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
  and it lets you write this:</p>

<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>

<p>...instead of this bewildering, unfamiliar invocation:</p>

<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
  <span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
  <span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
            <span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
  <span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
                 [slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>

<p>I know it probably won't be used by anyone who has spent much
  time with Clojure, but for newcomers hopefully this will remove
  one of the big blockers for enterprise developers trying out
  Clojure.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("Ivan Kanis: Verifying A GPG Signed File" "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>
<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>
<p>This means you need to import the public key A0B0F199.</p>
<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>
<p>Now that you have received the public key, you can verify the file.</p>
<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>
<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>" "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html" (20824 52736) old 21 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Verifying A GPG Signed File") (link ((href . "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html"))) (id nil "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html") (updated nil "2013-04-01T00:00:00+00:00") (content ((type . "html")) "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>

<p>This means you need to import the public key A0B0F199.</p>

<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>

<p>Now that you have received the public key, you can verify the file.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>

<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Flickr tag 'emacs': Meta_eX, mid flow" "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>
<p>Emacs Conf 30th March 2013</p>" "http://www.flickr.com/photos/dotemacs/8604802867/" (20823 64834) old 22 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Meta_eX, mid flow") (link ((href . "http://www.flickr.com/photos/dotemacs/8604802867/"))) (id nil "tag:flickr.com,2004:/photo/8604802867") (updated nil "2013-03-31T09:09:22+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>

<p>Emacs Conf 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Flickr tag 'emacs': Meta_eX" "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>
<p>Emacs Conf, 30th March 2013</p>" "http://www.flickr.com/photos/dotemacs/8605905866/" (20823 64809) old 23 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Meta_eX") (link ((href . "http://www.flickr.com/photos/dotemacs/8605905866/"))) (id nil "tag:flickr.com,2004:/photo/8605905866") (updated nil "2013-03-31T09:08:57+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>

<p>Emacs Conf, 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("John Sullivan: Vegan in Amsterdam?" "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />" "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html" (20822 59057) old 24 nil nil ((title ((type . "html")) "John Sullivan: Vegan in Amsterdam?") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html"))) (id nil "http://johnsu01.livejournal.com/291720.html") (updated nil "2013-03-30T13:20:49+00:00") (content ((type . "html")) "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")))) ("Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD" "<p>You need to run exim as root. So edit Local/Makefile thus:</p>
<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>
<p>In your configuration file set:</p>
<pre class=\"example\">exim_user = root
exim_group = mail
</pre>
<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>" "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html" (20819 34816) old 25 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD") (link ((href . "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html"))) (id nil "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html") (updated nil "2013-03-28T00:00:00+00:00") (content ((type . "html")) "<p>You need to run exim as root. So edit Local/Makefile thus:</p>

<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>

<p>In your configuration file set:</p>

<pre class=\"example\">exim_user = root
exim_group = mail
</pre>

<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Julien Danjou: Announcing Climate, the OpenStack capacity leasing project" "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
<img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>
<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
<img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>
<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>" "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing" (20816 36387) old 26 nil nil ((title ((type . "html")) "Julien Danjou: Announcing Climate, the OpenStack capacity leasing project") (link ((href . "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing"))) (id nil "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing") (updated nil "2013-03-25T17:49:23+00:00") (content ((type . "html")) "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
    <img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>

<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
    <img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>

<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Raimon Grau: Keyboardless programming" "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />" "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html" (20812 42966) old 27 nil nil ((title ((type . "html")) "Raimon Grau: Keyboardless programming") (link ((href . "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-8361928214155159241") (updated nil "2013-03-22T18:49:58+00:00") (content ((type . "html")) "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux" "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
sed -e 's/ /,/g'                                         \\
) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />" "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/" (20812 37953) old 28 nil nil ((title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux") (link ((href . "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/"))) (id nil "http://keramida.wordpress.com/?p=2177") (updated nil "2013-03-22T17:26:25+00:00") (content ((type . "html") (xml:lang . "en")) "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
  echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
  sed -e 's/ /,/g'                                         \\
  ) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com")))) ("Emacs Life: Built-in table editor - The Org Manual" "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />" "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html" (20812 35000) old 29 nil nil ((title ((type . "html")) "Emacs Life: Built-in table editor - The Org Manual") (link ((href . "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053.post-7863989595468572826") (updated nil "2013-03-22T16:37:12+00:00") (content ((type . "html")) "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />") (author nil (name nil "Steven Ness") (email nil "noreply@blogger.com") (uri nil "http://emacslife.blogspot.com/")) (source nil (title ((type . "html")) "emacs life") (link ((rel . "self") (href . "http://feeds.feedburner.com/emacslife"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053")))) ("Emacs-fu: editing with root-privileges -- once more" "<div class=\"outline-text-2\" id=\"text-1\">
<p>
We've already discussed editing root-owned files here a few times; it's one
of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
the job… the only way to overcome that seems to be to make it <i>really</i>
easy to do the same from within my running emacs:
</p>
<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
<span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
(interactive)
(<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
(<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
(<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
(find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>
<p>
We could take it one step further still – overload the normal
<code>(ido-)find-file</code> with a version that checks the permissions first, and if
needed, use the above function to open it. But maybe that is <i>too</i> easy; we
should be careful with root-owned files after all.
</p></div>" "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html" (20806 2001) old 30 nil nil ((title ((type . "html")) "Emacs-fu: editing with root-privileges -- once more") (link ((href . "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") (updated nil "2013-03-17T18:13:37+00:00") (content ((type . "html")) "<div class=\"outline-text-2\" id=\"text-1\">

<p>  
  We've already discussed editing root-owned files here a few times; it's one
  of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
  the job… the only way to overcome that seems to be to make it <i>really</i>
  easy to do the same from within my running emacs:
</p>



<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
  <span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
  (interactive)
  (<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
    (<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
      (<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
    (find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>


<p>  
  We could take it one step further still – overload the normal
  <code>(ido-)find-file</code> with a version that checks the permissions first, and if
  needed, use the above function to open it. But maybe that is <i>too</i> easy; we
  should be careful with root-owned files after all.
</p></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Bozhidar Batsov: RuboCop" "<p>After I launched the
<a href=\"https://github.com/bbatsov/ruby-style-guide\">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>
<p>Today this tool is a reality - meet
<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href=\"https://github.com/bbatsov/rubocop-emacs\">rubocop.el</a> and
<a href=\"https://github.com/lunaryorn/flycheck\">flycheck</a>).</p>
<p>I’d love to see more Ruby hackers check out RuboCop!</p>
<p>I’d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop’s development and I sincerely hope many
Ruby hackers will find it useful!</p>" "http://bbatsov.github.com/articles/2013/04/15/rubocop/" (20844 3336) old 8 nil nil ((title ((type . "html")) "Bozhidar Batsov: RuboCop") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/rubocop/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/rubocop") (updated nil "2013-04-15T14:22:00+00:00") (content ((type . "html")) "<p>After I launched the
<a href=\"https://github.com/bbatsov/ruby-style-guide\">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>

<p>Today this tool is a reality - meet
<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href=\"https://github.com/bbatsov/rubocop-emacs\">rubocop.el</a> and
<a href=\"https://github.com/lunaryorn/flycheck\">flycheck</a>).</p>

<p>I’d love to see more Ruby hackers check out RuboCop!</p>

<p>I’d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop’s development and I sincerely hope many
Ruby hackers will find it useful!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("Bozhidar Batsov: Emacs Redux" "<p>I’ve recently launched a new blog dedicated to Emacs -
<a href=\"http://emacsredux.com/\">Emacs Redux</a>.</p>
<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>
<p>I hope you’ll like it!</p>" "http://bbatsov.github.com/articles/2013/04/15/emacs-redux/" (20844 2616) old 9 nil nil ((title ((type . "html")) "Bozhidar Batsov: Emacs Redux") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/emacs-redux/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/emacs-redux") (updated nil "2013-04-15T14:10:00+00:00") (content ((type . "html")) "<p>I’ve recently launched a new blog dedicated to Emacs -
<a href=\"http://emacsredux.com/\">Emacs Redux</a>.</p>

<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>

<p>I hope you’ll like it!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("sachachua: How to present using Org-mode in Emacs" "<p>You can do pretty much everything in Emacs, so why not give presentations too? <a href=\"http://orgmode.org\">Org-mode</a> is an extensible outliner and Swiss Army knife for the Emacs text editor. Because it’s a great way to organize information, people have written a number of packages for presenting information from Org.  </p>
<p> Here are some options for preparing and giving presentations using Org-mode, along with some guidance on what to use when. It may be a good idea to browse through the examples and create a small test presentation using the systems that catch your eye. If you choose your system before drafting your presentation, that can save you a lot of time, since the approaches differ in terms of the code you’ll need to add to your Org file. </p>
<div class=\"outline-3\" id=\"outline-container-1\">
<h3 id=\"sec-1\">Presenting outside Emacs</h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>Do you need to distribute your presentation to non-Emacs users, or do you want to minimize the risk of getting your Emacs configuration confused? You can export your presentation to a number of formats. </p>
<p> <b>Export to Beamer (LaTeX) and generate a PDF</b>: Use this if you need to distribute your presentation as a PDF. You will need to install LaTeX, which could be a bit heavy-weight. Beamer is a slide package for LaTeX, and Org can export an outline to LaTeX code. Check out <a href=\"http://orgmode.org/worg/exporters/beamer/tutorial.html\">Writing Beamer presentations in Org-mode</a> for sample screenshots and a tutorial. </p>
<p> <b>Export to HTML and use S5</b>: Light-weight browser-based slideshows are becoming more popular. They can be distributed as ZIPs or .tar.gz, or uploaded to web servers. See the section in the Org tutorials for <a href=\"http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3\">Non-Beamer Presentations: S5</a>. Here are some <a href=\"http://eschulte.github.io/org-S5/\">sample presentations</a>. </p>
<p></p></div>
<p></p></div>
<div class=\"outline-3\" id=\"outline-container-2\">
<h3 id=\"sec-2\">Presenting within Emacs</h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p> Presenting within Emacs allows you to edit your presentation, execute code, or do all sorts of other interesting things. And it doesn’t have to be plain text – Org allows you to include inline images. (Microsoft Windows users may need to install additional libraries – <a href=\"http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files\">see StackOverflow for tips</a>.) </p>
<p> There are several ways to present from Org-mode. They tend to differ on: </p>
<ul>
<li>the markup you need to add to your slides </li>
<li>the keyboard shortcuts to help you navigate between slides </li>
</ul>
<p>so you can choose the one you feel the most comfortable with. </p>
<p> <a href=\"https://github.com/rlister/org-present\">Org-present</a> is simple and defines very few keyboard shortcuts: left for previous slide, right for next slide, C-c C-= or C-c C– to adjust text size, and C-q to quit. This makes it easy to edit your presentation as you go along. You’ll need to edit your ~/.emacs file to include some code. See the documentation in org-present.el for details. </p>
<p> <a href=\"https://github.com/eschulte/epresent\">EPresent</a> is a bit more complex. It supports converting LaTeX into images, so you can embed pretty equations. The epresent keybindings include “n” for next and “p” for previous, so don’t use this if you’re planning to edit your presentation on the fly. </p>
<p> <a href=\"https://github.com/nicferrier/org-presie\">Org-presie</a> takes a different approach by showing the outline instead of focusing on just one slide. When you press SPC, the previous headline’s content is hidden, and the next one’s content is expanded. It’s good for always giving people a sense of where they are in your presentation. </p>
<p> And then sometimes you may want to write your own. For my presentation at Emacs Conference 2013, I wanted to be able to: </p>
<ul>
<li>allow me to indicate various headings as slides so that I can organize an outline of slides (why should they all have to be top-level?), </li>
<li>for each slide
<ul>
<li>automatically execute pre-written Emacs Lisp code (for animations and demonstrations!), OR </li>
<li>display images that fit the full height or width of the window, OR </li>
<li>display text if I don’t specify code or images </li>
</ul>
</li>
<li>and have globally-set keyboard shortcuts so that I can go forward, backward, or re-do a slide no matter where I am in Emacs (and with AutoHotkey, even when I’m in a non-Emacs window) </li>
</ul>
<p> You can find my code at <a href=\"https://gist.github.com/sachac/5278905\">https://gist.github.com/sachac/5278905</a> </p>
<p> Emacs and Org-mode are wonderfully customizable, so you can probably build something that works just the way you want to work. Enjoy! </p>
</div></div>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/\">How to present using Org-mode in Emacs</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/" (20843 60352) old 10 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: How to present using Org-mode in Emacs") (link ((href . "http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/"))) (id nil "http://sachachua.com/blog/?p=24686") (updated nil "2013-04-15T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can do pretty much everything in Emacs, so why not give presentations too? <a href=\"http://orgmode.org\">Org-mode</a> is an extensible outliner and Swiss Army knife for the Emacs text editor. Because it’s a great way to organize information, people have written a number of packages for presenting information from Org.  </p>
<p> Here are some options for preparing and giving presentations using Org-mode, along with some guidance on what to use when. It may be a good idea to browse through the examples and create a small test presentation using the systems that catch your eye. If you choose your system before drafting your presentation, that can save you a lot of time, since the approaches differ in terms of the code you’ll need to add to your Org file. </p>
<div class=\"outline-3\" id=\"outline-container-1\">
<h3 id=\"sec-1\">Presenting outside Emacs</h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>Do you need to distribute your presentation to non-Emacs users, or do you want to minimize the risk of getting your Emacs configuration confused? You can export your presentation to a number of formats. </p>
<p> <b>Export to Beamer (LaTeX) and generate a PDF</b>: Use this if you need to distribute your presentation as a PDF. You will need to install LaTeX, which could be a bit heavy-weight. Beamer is a slide package for LaTeX, and Org can export an outline to LaTeX code. Check out <a href=\"http://orgmode.org/worg/exporters/beamer/tutorial.html\">Writing Beamer presentations in Org-mode</a> for sample screenshots and a tutorial. </p>
<p> <b>Export to HTML and use S5</b>: Light-weight browser-based slideshows are becoming more popular. They can be distributed as ZIPs or .tar.gz, or uploaded to web servers. See the section in the Org tutorials for <a href=\"http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3\">Non-Beamer Presentations: S5</a>. Here are some <a href=\"http://eschulte.github.io/org-S5/\">sample presentations</a>. </p>
<p></p></div>
<p></p></div>
<div class=\"outline-3\" id=\"outline-container-2\">
<h3 id=\"sec-2\">Presenting within Emacs</h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p> Presenting within Emacs allows you to edit your presentation, execute code, or do all sorts of other interesting things. And it doesn’t have to be plain text – Org allows you to include inline images. (Microsoft Windows users may need to install additional libraries – <a href=\"http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files\">see StackOverflow for tips</a>.) </p>
<p> There are several ways to present from Org-mode. They tend to differ on: </p>
<ul>
<li>the markup you need to add to your slides </li>
<li>the keyboard shortcuts to help you navigate between slides </li>
</ul>
<p>so you can choose the one you feel the most comfortable with. </p>
<p> <a href=\"https://github.com/rlister/org-present\">Org-present</a> is simple and defines very few keyboard shortcuts: left for previous slide, right for next slide, C-c C-= or C-c C– to adjust text size, and C-q to quit. This makes it easy to edit your presentation as you go along. You’ll need to edit your ~/.emacs file to include some code. See the documentation in org-present.el for details. </p>
<p> <a href=\"https://github.com/eschulte/epresent\">EPresent</a> is a bit more complex. It supports converting LaTeX into images, so you can embed pretty equations. The epresent keybindings include “n” for next and “p” for previous, so don’t use this if you’re planning to edit your presentation on the fly. </p>
<p> <a href=\"https://github.com/nicferrier/org-presie\">Org-presie</a> takes a different approach by showing the outline instead of focusing on just one slide. When you press SPC, the previous headline’s content is hidden, and the next one’s content is expanded. It’s good for always giving people a sense of where they are in your presentation. </p>
<p> And then sometimes you may want to write your own. For my presentation at Emacs Conference 2013, I wanted to be able to: </p>
<ul>
<li>allow me to indicate various headings as slides so that I can organize an outline of slides (why should they all have to be top-level?), </li>
<li>for each slide
<ul>
<li>automatically execute pre-written Emacs Lisp code (for animations and demonstrations!), OR </li>
<li>display images that fit the full height or width of the window, OR </li>
<li>display text if I don’t specify code or images </li>
</ul>
</li>
<li>and have globally-set keyboard shortcuts so that I can go forward, backward, or re-do a slide no matter where I am in Emacs (and with AutoHotkey, even when I’m in a non-Emacs window) </li>
</ul>
<p> You can find my code at <a href=\"https://gist.github.com/sachac/5278905\">https://gist.github.com/sachac/5278905</a> </p>
<p> Emacs and Org-mode are wonderfully customizable, so you can probably build something that works just the way you want to work. Enjoy! </p>
</div></div>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/\">How to present using Org-mode in Emacs</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Aaron Hawley: Update to big Emacs reference card" "For the first time in over 2 years, I finally got around to updating my <a href=\"http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley\" rel=\"nofollow\">giant Emacs reference card</a>.  There are now more than 1500 commands up from 1000.  It should also be consistent with the latest version of <a href=\"http://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a>.<br /><br />I transform the Wiki markup from a simple text markup using some \"quick and dirty\" Emacs Lisp.  Besides being easier to work on than Wiki markup, the source format is also printable.  The HTML version is almost 60 pages.  Using <a href=\"http://www.gnu.org/software/a2ps/\" rel=\"nofollow\">a2ps</a> on the text format it prints on 15 pieces of paper.<br /><br />It's a lot of work, but it's a good way for me to learn more about Emacs.  Hopefully, others will find it useful, too.  I suggest printing only a few sections that you would like to improve on.<br /><br />Since it is released under a bunch of free licenses, including version 2 or later of the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU GPL</a> and version 1.2 or later of the <a href=\"http://www.gnu.org/licenses/fdl.html\" rel=\"nofollow\">GNU FDL</a>, people are free to share and modify it." "http://aaronhawley.livejournal.com/28618.html" (20845 48216) old 7 nil nil ((title ((type . "html")) "Aaron Hawley: Update to big Emacs reference card") (link ((href . "http://aaronhawley.livejournal.com/28618.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:28618") (updated nil "2013-04-16T21:02:16+00:00") (content ((type . "html")) "For the first time in over 2 years, I finally got around to updating my <a href=\"http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley\" rel=\"nofollow\">giant Emacs reference card</a>.  There are now more than 1500 commands up from 1000.  It should also be consistent with the latest version of <a href=\"http://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a>.<br /><br />I transform the Wiki markup from a simple text markup using some \"quick and dirty\" Emacs Lisp.  Besides being easier to work on than Wiki markup, the source format is also printable.  The HTML version is almost 60 pages.  Using <a href=\"http://www.gnu.org/software/a2ps/\" rel=\"nofollow\">a2ps</a> on the text format it prints on 15 pieces of paper.<br /><br />It's a lot of work, but it's a good way for me to learn more about Emacs.  Hopefully, others will find it useful, too.  I suggest printing only a few sections that you would like to improve on.<br /><br />Since it is released under a bunch of free licenses, including version 2 or later of the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU GPL</a> and version 1.2 or later of the <a href=\"http://www.gnu.org/licenses/fdl.html\" rel=\"nofollow\">GNU FDL</a>, people are free to share and modify it.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))) ("Aaron Hawley: My tweets" "<ul> <li> <a href=\"http://twitter.com/raganwald/status/324194908107857920\" rel=\"nofollow\"><em>Tue, 16:15</em></a>: RT @<a href=\"http://twitter.com/raganwald\" rel=\"nofollow\">raganwald</a>: \"_____ is a Monad\" is the new \"Lisp did that in 1974.\" </li> </ul>" "http://aaronhawley.livejournal.com/31205.html" (20846 51074) old 6 nil nil ((title ((type . "html")) "Aaron Hawley: My tweets") (link ((href . "http://aaronhawley.livejournal.com/31205.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:31205") (updated nil "2013-04-17T16:02:10+00:00") (content ((type . "html")) "<ul> <li> <a href=\"http://twitter.com/raganwald/status/324194908107857920\" rel=\"nofollow\"><em>Tue, 16:15</em></a>: RT @<a href=\"http://twitter.com/raganwald\" rel=\"nofollow\">raganwald</a>: \"_____ is a Monad\" is the new \"Lisp did that in 1974.\" </li> </ul>") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))) ("Irreal: Tags with Emacs" "<p>One of the oldest and most general code navigation tools is tags. The idea is that you generate a tags database for your code base and then use it to tell your editor where to find the definition of a variable, function, class, or whatever. I used to use tags when I was a Vim user but haven’t bothered since I moved to Emacs. Mostly that’s because I don’t deal with large code bases anymore so I don’t have the need. Of course, that means I never bothered to learn how to work with them in Emacs.</p>
<p>Marius Mårnes Mathiesen has written an excellent post on <a href=\"http://zmalltalker.com/emacs/tags.html\">using tags with Emacs</a>. He covers all the basics, including how to generate the tags database and keep it up to date. If you deal with large code bases and don’t already have a tool that works for you, take a look at his post. Tags may be just what you need. Even if you already have a solution, it’s worth taking a look to see if tags will suit you better.</p>" "http://irreal.org/blog/?p=1868" (20849 9016) old 4 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Irreal: Tags with Emacs") (link ((href . "http://irreal.org/blog/?p=1868"))) (id nil "http://irreal.org/blog/?p=1868") (updated nil "2013-04-19T10:58:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>One of the oldest and most general code navigation tools is tags. The idea is that you generate a tags database for your code base and then use it to tell your editor where to find the definition of a variable, function, class, or whatever. I used to use tags when I was a Vim user but haven’t bothered since I moved to Emacs. Mostly that’s because I don’t deal with large code bases anymore so I don’t have the need. Of course, that means I never bothered to learn how to work with them in Emacs.</p>
<p>Marius Mårnes Mathiesen has written an excellent post on <a href=\"http://zmalltalker.com/emacs/tags.html\">using tags with Emacs</a>. He covers all the basics, including how to generate the tags database and keep it up to date. If you deal with large code bases and don’t already have a tool that works for you, take a look at his post. Tags may be just what you need. Even if you already have a solution, it’s worth taking a look to see if tags will suit you better.</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("What the .emacs.d!?: project-defuns.el-01" "<p>Where do you put your project specific settings?</p>
<hr />
<pre class=\"code-snippet\">(<span class=\"keyword\">defmacro</span> <span class=\"function-name\">project-specifics</span> (name <span class=\"type\">&amp;rest</span> body)
(<span class=\"keyword\">declare</span> (indent 1))
`(<span class=\"keyword\">progn</span>
(add-hook 'find-file-hook
(<span class=\"keyword\">lambda</span> ()
(<span class=\"keyword\">when</span> (string-match-p ,name (buffer-file-name))
,@body)))
(add-hook 'dired-after-readin-hook
(<span class=\"keyword\">lambda</span> ()
(<span class=\"keyword\">when</span> (string-match-p ,name (dired-current-directory))
,@body)))))
(project-specifics <span class=\"string\">\"projects/zombietdd\"</span>
(set (make-local-variable 'slime-js-target-url) <span class=\"string\">\"http://localhost:3000/\"</span>)
(ffip-local-patterns <span class=\"string\">\"*.js\"</span> <span class=\"string\">\"*.jade\"</span> <span class=\"string\">\"*.css\"</span> <span class=\"string\">\"*.json\"</span> <span class=\"string\">\"*.md\"</span>))</pre>
<hr />
<p>
I created this macro to help me set up local vars. So in the
example, any files in <code>projects/zombietdd</code> will see
these slime-js-target-url and the find-file-in-projects patterns.
</p>
<p>
I keep these in a projects-folder to keep track of all the different
settings for my projects.
</p>" "http://whattheemacsd.com//project-defuns.el-01.html" (20849 5743) old 5 nil nil ((title ((type . "html")) "What the .emacs.d!?: project-defuns.el-01") (link ((href . "http://whattheemacsd.com//project-defuns.el-01.html"))) (id nil "urn:whattheemacsd-com:feed:post:project-defuns.el-01") (updated nil "2013-04-19T10:03:27+00:00") (content ((type . "html")) "<p>Where do you put your project specific settings?</p>

<hr />

<pre class=\"code-snippet\">(<span class=\"keyword\">defmacro</span> <span class=\"function-name\">project-specifics</span> (name <span class=\"type\">&amp;rest</span> body)
  (<span class=\"keyword\">declare</span> (indent 1))
  `(<span class=\"keyword\">progn</span>
     (add-hook 'find-file-hook
               (<span class=\"keyword\">lambda</span> ()
                 (<span class=\"keyword\">when</span> (string-match-p ,name (buffer-file-name))
                   ,@body)))
     (add-hook 'dired-after-readin-hook
               (<span class=\"keyword\">lambda</span> ()
                 (<span class=\"keyword\">when</span> (string-match-p ,name (dired-current-directory))
                   ,@body)))))

(project-specifics <span class=\"string\">\"projects/zombietdd\"</span>
  (set (make-local-variable 'slime-js-target-url) <span class=\"string\">\"http://localhost:3000/\"</span>)
  (ffip-local-patterns <span class=\"string\">\"*.js\"</span> <span class=\"string\">\"*.jade\"</span> <span class=\"string\">\"*.css\"</span> <span class=\"string\">\"*.json\"</span> <span class=\"string\">\"*.md\"</span>))</pre>

<hr />

<p>
  I created this macro to help me set up local vars. So in the
  example, any files in <code>projects/zombietdd</code> will see
  these slime-js-target-url and the find-file-in-projects patterns.
</p>

<p>
  I keep these in a projects-folder to keep track of all the different
  settings for my projects.
</p>") (author nil (name nil "Magnar Sveen") (uri nil)) (source nil (title ((type . "html")) "What the .emacs.d!?") (link ((rel . "self") (href . "http://whattheemacsd.com/atom.xml"))) (id nil "urn:whattheemacsd-com:feed")))) ("Bryan Murdock: No More Ads, Send Tips with Bitcoin" "Summary: ads are gone, send me bitcoin to say thanks instead.<br />
<br />
I have always kept notes for myself to remind myself how to do various things.  I have also kept a journal since a very young age where I often include opinions and thoughts on various matters.  At some point, years ago, I got the idea that I should post some of the notes and thoughts in case they would help someone else.  That requires a lot more work than just typing stuff quickly into a text file, though, so I needed a little more motivation.  I mean, sharing and helping others is great motivation, but when I read about Adsense from Google, and how Google could show people links to products and services related to my posts, and I could make a few bucks if people thought those links were useful and clicked on them, and how it could help out the people providing those products and services as well, it felt like this great intertwined synergy of helping people out and possibly even gaining some monetary reward as well.  And it sort of worked.  I put some effort into this blog and my Adsense account started slowly accumulating some credits.<br />
<br />
The one downside was, well, advertising.  It's often more annoying than helpful.  Google's adds were the least annoying I've seen, but still not always that great.  To be honest, this blog isn't updated enough and isn't high traffic enough that I'm really sending a lot of business anyone's way, and I'm not making any kind of real money at all with the adds.  I've thought about this on and off over the years, but haven't changed anything, until now.  What happened is, I finally read up on this crazy thing I'd seen mentioned on <a href=\"http://slashdot.org/\">Slashdot</a> and <a href=\"https://news.ycombinator.com/\">Hacker News</a> called <a href=\"https://www.weusecoins.com/\">bitcoin</a>.<br />
<br />
The notion of a digital currency seemed ludicrous when I first read headlines and article summaries about it, and so I ignored it for a while.  Now, the more I read about it, the more it makes sense, and the more excited I get about it.  You really should go to <a href=\"https://www.weusecoins.com/\">We Use Coins</a> and learn more, they can explain it better than me.  The relevant part of bitcoin to this post is that it is super easy to send money from one person to another with bitcoin.  No banks, escrow services, or credit cards are required.  If you want to donate money to me to say thank you it's as simple as firing up your bitcoin wallet software and sending it to this address: 15RNcXeuhjQRKnfLGyVZxpeER8MUmrYLMq.  It's a lot like cash that way, only you don't have be standing next to the person you want to pay in order to make the transaction.  Way cool.  Liberating, in fact.  That's what really appeals to me.  The lack of central control, and the ease and freedom it provides.  Nothing crazy about that!<br />
<br />
Now, I didn't just put that bitcoin address in the sidebar of my blog, I used a <a href=\"https://coinbase.com/\">Coinbase</a> payment button.  Coinbase is an online wallet, which is a little more convenient (but less decentralized and free) than running the bitcoin software on your own machine (of course, you can do both).  The cool thing the button of theirs provides is a unique bitcoin address for every transaction.  That just makes the payments more anonymous.  I could have written software to generate those addresses and the button myself, but I'm OK with letting them handle that for me.  At least for now as I'm testing the bitcoin waters :-)" "http://bryan-murdock.blogspot.com/2013/04/no-more-ads-send-tips-with-bitcoin.html" (20850 56382) old 3 nil nil ((title ((type . "html")) "Bryan Murdock: No More Ads, Send Tips with Bitcoin") (link ((href . "http://bryan-murdock.blogspot.com/2013/04/no-more-ads-send-tips-with-bitcoin.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-7347930656136460535") (updated nil "2013-04-20T14:43:35+00:00") (content ((type . "html")) "Summary: ads are gone, send me bitcoin to say thanks instead.<br />
<br />
I have always kept notes for myself to remind myself how to do various things.  I have also kept a journal since a very young age where I often include opinions and thoughts on various matters.  At some point, years ago, I got the idea that I should post some of the notes and thoughts in case they would help someone else.  That requires a lot more work than just typing stuff quickly into a text file, though, so I needed a little more motivation.  I mean, sharing and helping others is great motivation, but when I read about Adsense from Google, and how Google could show people links to products and services related to my posts, and I could make a few bucks if people thought those links were useful and clicked on them, and how it could help out the people providing those products and services as well, it felt like this great intertwined synergy of helping people out and possibly even gaining some monetary reward as well.  And it sort of worked.  I put some effort into this blog and my Adsense account started slowly accumulating some credits.<br />
<br />
The one downside was, well, advertising.  It's often more annoying than helpful.  Google's adds were the least annoying I've seen, but still not always that great.  To be honest, this blog isn't updated enough and isn't high traffic enough that I'm really sending a lot of business anyone's way, and I'm not making any kind of real money at all with the adds.  I've thought about this on and off over the years, but haven't changed anything, until now.  What happened is, I finally read up on this crazy thing I'd seen mentioned on <a href=\"http://slashdot.org/\">Slashdot</a> and <a href=\"https://news.ycombinator.com/\">Hacker News</a> called <a href=\"https://www.weusecoins.com/\">bitcoin</a>.<br />
<br />
The notion of a digital currency seemed ludicrous when I first read headlines and article summaries about it, and so I ignored it for a while.  Now, the more I read about it, the more it makes sense, and the more excited I get about it.  You really should go to <a href=\"https://www.weusecoins.com/\">We Use Coins</a> and learn more, they can explain it better than me.  The relevant part of bitcoin to this post is that it is super easy to send money from one person to another with bitcoin.  No banks, escrow services, or credit cards are required.  If you want to donate money to me to say thank you it's as simple as firing up your bitcoin wallet software and sending it to this address: 15RNcXeuhjQRKnfLGyVZxpeER8MUmrYLMq.  It's a lot like cash that way, only you don't have be standing next to the person you want to pay in order to make the transaction.  Way cool.  Liberating, in fact.  That's what really appeals to me.  The lack of central control, and the ease and freedom it provides.  Nothing crazy about that!<br />
<br />
Now, I didn't just put that bitcoin address in the sidebar of my blog, I used a <a href=\"https://coinbase.com/\">Coinbase</a> payment button.  Coinbase is an online wallet, which is a little more convenient (but less decentralized and free) than running the bitcoin software on your own machine (of course, you can do both).  The cool thing the button of theirs provides is a unique bitcoin address for every transaction.  That just makes the payments more anonymous.  I could have written software to generate those addresses and the button myself, but I'm OK with letting them handle that for me.  At least for now as I'm testing the bitcoin waters :-)") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Irreal: Xah Lee on Defining Super and Hyper Keys" "<p>If, like me, you are always writing little pieces of Elisp to do some task or another or if you have a lot of ELPA packages installed, chances are it’s hard to find key sequences for them. In theory, 【<kbd>Ctrl</kbd>+<kbd>c</kbd>】 is reserved for just this purpose but in practice rather than being reserved for users it gets used by almost every package. Even my beloved Org mode is guilty of this. On the other hand, what choice do they have? There just aren’t enough key sequences based on the 【<kbd>Ctrl</kbd>】 and 【<kbd>Meta</kbd>】 keys.</p>
<p>Emacs, of course, can also make use of the 【<kbd>Super</kbd>】 and 【<kbd>Hyper</kbd>】 keys but modern keyboards no longer have these keys. All is not lost, though, because you can map some otherwise unused key to 【<kbd>Hyper</kbd>】 or 【<kbd>Super</kbd>】. Xah Lee has a useful post on <a href=\"http://ergoemacs.org/emacs/emacs_hyper_super_keys.html\">defining hyper and super keys</a> for Windows, OS X, and Linux. One trick that he misses for OS X is using the 【<kbd>fn</kbd>】 key for this. That’s something I learned from Magnar Sveen. I wrote about that <a href=\"http://irreal.org/blog/?p=1450\">here</a> (don’t worry, you can still control music and the other special functions).</p>
<p>I have mapped several key sequence that begin with 【<kbd>Hyper</kbd>】. You almost never trip over a predefined sequence and even if you do that command invariably has some other key sequence assigned to it too. Take a look at Lee’s post and experience the joy of a whole new key sequence space.</p>" "http://irreal.org/blog/?p=1896" (20851 62823) old 1 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Irreal: Xah Lee on Defining Super and Hyper Keys") (link ((href . "http://irreal.org/blog/?p=1896"))) (id nil "http://irreal.org/blog/?p=1896") (updated nil "2013-04-21T14:19:19+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>If, like me, you are always writing little pieces of Elisp to do some task or another or if you have a lot of ELPA packages installed, chances are it’s hard to find key sequences for them. In theory, 【<kbd>Ctrl</kbd>+<kbd>c</kbd>】 is reserved for just this purpose but in practice rather than being reserved for users it gets used by almost every package. Even my beloved Org mode is guilty of this. On the other hand, what choice do they have? There just aren’t enough key sequences based on the 【<kbd>Ctrl</kbd>】 and 【<kbd>Meta</kbd>】 keys.</p>
<p>Emacs, of course, can also make use of the 【<kbd>Super</kbd>】 and 【<kbd>Hyper</kbd>】 keys but modern keyboards no longer have these keys. All is not lost, though, because you can map some otherwise unused key to 【<kbd>Hyper</kbd>】 or 【<kbd>Super</kbd>】. Xah Lee has a useful post on <a href=\"http://ergoemacs.org/emacs/emacs_hyper_super_keys.html\">defining hyper and super keys</a> for Windows, OS X, and Linux. One trick that he misses for OS X is using the 【<kbd>fn</kbd>】 key for this. That’s something I learned from Magnar Sveen. I wrote about that <a href=\"http://irreal.org/blog/?p=1450\">here</a> (don’t worry, you can still control music and the other special functions).</p>
<p>I have mapped several key sequence that begin with 【<kbd>Hyper</kbd>】. You almost never trip over a predefined sequence and even if you do that command invariably has some other key sequence assigned to it too. Take a look at Lee’s post and experience the joy of a whole new key sequence space.</p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("What the .emacs.d!?: my-misc.el-02" "<p>
Undo in region is one of those mind-blowing things about emacs.
However, the region keeps jumping about when I use it. So I added this:
</p>
<hr />
<pre class=\"code-snippet\"><span class=\"comment-delimiter\">;; </span><span class=\"comment\">Keep region when undoing in region
</span>(<span class=\"keyword\">defadvice</span> <span class=\"function-name\">undo-tree-undo</span> (around keep-region activate)
(<span class=\"keyword\">if</span> (use-region-p)
(<span class=\"keyword\">let</span> ((m (set-marker (make-marker) (mark)))
(p (set-marker (make-marker) (point))))
ad-do-it
(goto-char p)
(set-mark m)
(set-marker p nil)
(set-marker m nil))
ad-do-it))</pre>
<hr />
<p>Now the region stays in place while I'm undoing.</p>
<p>
Since I use undo-tree, that's what it advises, but I would guess it
works the same for regular old undo too.
</p>" "http://whattheemacsd.com//my-misc.el-02.html" (20851 11531) old 2 nil nil ((title ((type . "html")) "What the .emacs.d!?: my-misc.el-02") (link ((href . "http://whattheemacsd.com//my-misc.el-02.html"))) (id nil "urn:whattheemacsd-com:feed:post:my-misc.el-02") (updated nil "2013-04-21T00:04:27+00:00") (content ((type . "html")) "<p>
  Undo in region is one of those mind-blowing things about emacs.
  However, the region keeps jumping about when I use it. So I added this:
</p>

<hr />

<pre class=\"code-snippet\"><span class=\"comment-delimiter\">;; </span><span class=\"comment\">Keep region when undoing in region
</span>(<span class=\"keyword\">defadvice</span> <span class=\"function-name\">undo-tree-undo</span> (around keep-region activate)
  (<span class=\"keyword\">if</span> (use-region-p)
      (<span class=\"keyword\">let</span> ((m (set-marker (make-marker) (mark)))
            (p (set-marker (make-marker) (point))))
        ad-do-it
        (goto-char p)
        (set-mark m)
        (set-marker p nil)
        (set-marker m nil))
    ad-do-it))</pre>

<hr />

<p>Now the region stays in place while I'm undoing.</p>

<p>
  Since I use undo-tree, that's what it advises, but I would guess it
  works the same for regular old undo too.
</p>") (author nil (name nil "Magnar Sveen") (uri nil)) (source nil (title ((type . "html")) "What the .emacs.d!?") (link ((rel . "self") (href . "http://whattheemacsd.com/atom.xml"))) (id nil "urn:whattheemacsd-com:feed")))))