;; -*- coding: utf-8 -*-
(("Miško Hevery" "Testability Explorer" "http://misko.hevery.com" (20848 33478 800158) feed 0 nil nil ((title nil "Miško Hevery") (atom:link ((href . "http://misko.hevery.com/feed/") (rel . "self") (type . "application/rss+xml"))) (link nil "http://misko.hevery.com") (description nil "Testability Explorer") (lastBuildDate nil "Wed, 16 Jan 2013 04:49:59 +0000") (language nil "en") (sy:updatePeriod nil "hourly") (sy:updateFrequency nil "1") (generator nil "http://wordpress.org/?v=3.3.1") (item nil (title nil "Video Recording & Slides: Psychology of Testing at Wealthfront Engineering") (link nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/?utm_source=rss&utm_medium=rss&utm_campaign=video-recording-slides-psychology-of-testing-at-wealthfront-engineering") (comments nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/#comments") (pubDate nil "Tue, 15 Feb 2011 03:13:59 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=662") (description nil "Here is a presentation I have done few weeks ego at Wealthfront Engineering. Enjoy the slides and a recording of presentation!") (content:encoded nil "<p>Here is a presentation I have done few weeks ego at Wealthfront Engineering.</p><div><span><span>Enjoy the <a href=\"https://docs.google.com/present/edit?id=0Abz6S2TvsDWSZDQ0OWdjaF8yNzdmYzZ3d2M5cw&amp;hl=en\">slides</a> and a <a href=\"http://vimeo.com/wealthfront/psychology-of-testing\">recording of presentation</a>!</span></span></div><div style=\"text-align: center\"><iframe src=\"http://player.vimeo.com/video/19726832\" width=\"500\" height=\"390\" frameborder=\"0\"></iframe><br /><iframe src=\"https://docs.google.com/present/embed?id=dgvs5xhc_115hm5rpc3n&amp;loop=true\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></div>
") (wfw:commentRss nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/feed/") (slash:comments nil "9")) (item nil (title nil "RTAC2010: All hands on testing") (link nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/?utm_source=rss&utm_medium=rss&utm_campaign=rtac2010-all-hands-on-testing") (comments nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/#comments") (pubDate nil "Wed, 25 Aug 2010 20:37:38 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=650") (description nil "Just wanted to share my presentation from the RTAC 2010 conference. Slides Handout") (content:encoded nil "<p>Just wanted to share my presentation from the RTAC 2010 conference.</p><h3><a href=\"http://docs.google.com/present/view?id=d449gch_2603sf622cs\">Slides</a></h3><p><iframe src=\"http://docs.google.com/present/embed?id=d449gch_2603sf622cs\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><h3><a href=\"http://docs.google.com/document/pub?id=1Pfh0aq_qsBwfvlxUskszX5NRuo-US6DigJ5h9NGCJvU\">Handout</a></h3>
") (wfw:commentRss nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/feed/") (slash:comments nil "2")) (item nil (title nil "What Flex taught me about data-binding") (link nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/?utm_source=rss&utm_medium=rss&utm_campaign=what-flex-thought-me-about-data-binding") (comments nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/#comments") (pubDate nil "Tue, 10 Aug 2010 16:10:40 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=637") (description nil "Like most other developers, when I first came across the Flex data-binding, I thought of it as an interesting feature, but haven’t realized the true implications of it until much later. Data-binding in Flex has revolutionized the way I think about building UIs. To understand why data-binding is so revolutionary, let’s look at standard Model-View-Controller [...]") (content:encoded nil "<p>Like most other developers, when I first came across the Flex data-binding, I thought of it as an interesting feature, but haven’t realized the true implications of it until much later. Data-binding in Flex has revolutionized the way I think about building UIs.</p><p>To understand why data-binding is so revolutionary, let’s look at standard Model-View-Controller setup for building UIs.</p><div style=\"text-align: center;\"><img class=\"size-full wp-image-152\" title=\"Login\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/login.png\" alt=\"Login\" width=\"251\" height=\"87\" /><br /><img class=\"size-full wp-image-153\" title=\"Login Failed\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/loginfailed.png\" alt=\"Login Failed\" width=\"249\" height=\"86\" /></div><p>Let’s start off with a model. A model is simply an object which has properties for all of information we may wish to display.</p><h2>Model</h2><pre>package example.flextesting {
  [Bindable]
  public class LoginModel {
    username:String;
    password:String;
    showError:String;
  }
}</pre><p>Now, model by itself is not that interesting, as we need to add behavior. To keep separation of concerns we put all of the behavior to the controller.</p><h2>Controller</h2><pre>package example.flextesting {
  public class LoginController {
    public var model:LoginModel;
    public var authenticator:Function;
    public function login():void {
      showError = authenticator(username, password);
    }
  }
}</pre><h2>Boiler plate problem</h2><p>Without data-binding we have to write a lot of boiler plate code which copies the data from the model to the view. In our example this may be simple as we only have three fields to copy, but in a complex forms this may be several hundred things to copy. With time, this gets so complicated that adding a new field requires us to change many things in unison: the view, the model and and code which copies it to the view.</p><h2>Circular Dependency Problem</h2><p>At this point we need the view to be able to lay it out in MXML. Now imagine there is no data-binding. We have a problem, we need to notify the view to update itself from the model, and we need to get the view to call the login() function in the controller. This creates a circular dependency between the controller and the view, and there is just no way around it. This means that we can not use constructor dependency-injection.</p><h2>Testing Nightmare</h2><p>But there is a more serious problem, we need to test our code to make sure that it works as intended. We can easily instantiate the model, but instantiating the controller requires us to also instantiate the view. In many cases it may be impractical or impossible to instantiate the view in the test, and therefore the dependency on the view from the controller is causing the problems. The reason why it may be hard to instantiate the view is that the view may have dependency on other views and other controllers.</p><p>One way to solve this circular dependency is to create an interface for the view. That way we can have two implementations of the view. One is the real view, and second is a mock implementation of the view. In the tests we can just instantiate the mock view and we are home free. While this is a good solution it requires us to write extra interfaces and extra implementations, and so it is cumbersome. Worse, any changes to the view require us to change 4 files (controller, interface, view, and mock view). Can we do better?</p><h2>Data-binding reverses dependencies</h2><p>Data-binding comes to the rescue. Data-binding solves our circular problem in a very clever way. It makes it so that the controller has no reference to the view. View still recognizes the controller, as the former needs to call methods on the latter when the user interacts with it, but the circular dependency is broken. Better yet, the remaining dependency is from the view to the controller, and not the other way around. This is very important, because it allows us to test the controller in isolation: we can easily instantiate the model and the controller without pulling in the view dependency.</p><pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;mx:VBox
    xmlns:mx=\"http://www.adobe.com/2006/mxml\"
     xmlns:flextesting=\"example.flextesting.*\"&gt;
  &lt;flextesting:LoginController id=\"cntl\"/&gt;
  &lt;mx:Form&gt;
    &lt;mx:FormItem label=\"Username:\"&gt;
      &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.username}</span>\"
           change=\"<span style=\"background-color: lightblue;\">cntl.model.username =
                       event.currentTarget.text</span>\"/&gt;
    &lt;/mx:FormItem&gt;
    &lt;mx:FormItem label=\"Password:\"&gt;
     &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.password}</span>\"
          change=\"<span style=\"background-color: lightblue;\">cntl.model.password =
                       event.currentTarget.text</span>\"
          displayAsPassword=\"true\"/&gt;
   &lt;/mx:FormItem&gt;
   &lt;mx:FormItem label=\"Label\"&gt;
     &lt;mx:HBox&gt;
       &lt;mx:Button label=\"Login\"
           click=\"controller.login()\"/&gt;
        &lt;mx:Label text=\"Login Failed\"
            visible=\"<span style=\"background-color: yellow;\">{cntl.model.showError}</span>\"
             color=\"#FF0000\" fontWeight=\"bold\"/&gt;
     &lt;/mx:HBox&gt;
   &lt;/mx:FormItem&gt;
 &lt;/mx:Form&gt;
&lt;/mx:VBox&gt;</pre><p>The magic of data-binding comes from the curly brackets ‘{}’. As you can see in the MXML above, the TextInput and the Label are both controlled by the ‘{}’. The data-binding acts as a kind of reverse dependency, a property which is very welcome, as we are trying to isolate the controller.</p><h2>What I want is reverse data-binding</h2><p>Unfortunately, Flex has not taken the data-binding far enough. When the model changes, the View changes as well. But since the view is a TextField, we also want the model to change when the user changes the form. This revers data-binding is not available in Flex out of the box and so we have to simulate it by adding change events that copy the data back to the model. You can see this in the MXML above, the forward data-bindings are marked in <span style=\"background-color: yellow;\">yellow</span> and the reverse are marked in <span style=\"background-color: lightblue;\">blue</span>. This creates a lot of extra code which clutters the application.</p><h2>Conclusion</h2><p>So what have we learned about data-binding:</p><ul><li>MVC inherently suffers from circular dependencies which create problem in code, that makes unit-testing of the code very difficult.</li><li>Data-binding reverses the normal flow of dependencies allowing us to break up circular dependencies, and thus get a less coupled system.</li><li>Data-binding eliminates a lot of boiler plate code which shuttles the data from the model to the view, which makes our code easier to read and understand.</li></ul>
") (wfw:commentRss nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/feed/") (slash:comments nil "20")) (item nil (title nil "<angular/>: A Radically Different Way of Building AJAX Apps") (link nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/?utm_source=rss&utm_medium=rss&utm_campaign=a-radically-different-way-of-building-ajax-apps") (comments nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/#comments") (pubDate nil "Fri, 30 Jul 2010 02:28:32 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=629") (description nil "http://angularjs.org source snippets") (content:encoded nil "<p><object width=\"640\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object></p><p><iframe src=\"https://docs.google.com/present/embed?id=d449gch_254g873k7ff\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><p><a href=\"http://angularjs.org\">http://angularjs.org</a><br /><a href=\"https://docs.google.com/document/pub?id=1ZHVhqC0apbzPRQcgnb1Ye-bAUbNJ-IlFMyPBPCZ2cYU\">source snippets</a></p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/feed/") (slash:comments nil "37")) (item nil (title nil "How JavaScript Works") (link nil "http://misko.hevery.com/2010/07/14/how-javascript-works/?utm_source=rss&utm_medium=rss&utm_campaign=how-javascript-works") (comments nil "http://misko.hevery.com/2010/07/14/how-javascript-works/#comments") (pubDate nil "Thu, 15 Jul 2010 01:17:32 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=625") (description nil "Just a quick presentation I have done on JavaScript. video: slides:") (content:encoded nil "<p>Just a quick presentation I have done on JavaScript.</p><p>video:<br /><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed></object></p><p>slides:<br /><iframe src=\"http://docs.google.com/present/embed?id=d449gch_253cz63vddn\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/07/14/how-javascript-works/feed/") (slash:comments nil "18")) (item nil (title nil "Dependency-Injection and JavaScript closures") (link nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/?utm_source=rss&utm_medium=rss&utm_campaign=dependency-injection-and-javascript-closures") (comments nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/#comments") (pubDate nil "Sun, 30 May 2010 04:59:53 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=623") (description nil "As you can tell I am a big fan of DI, but I kept hearing that DI is not needed with dynamic languages, so after using JS for many months I am happy to say that DI is important there as well. In other words dependency managment and controll matters. But it is different. Say [...]") (content:encoded nil "<p>As you can tell I am a big fan of DI, but I kept hearing that DI is not needed with dynamic languages, so after using JS for many months I am happy to say that DI is important there as well. In other words dependency managment and controll matters. But it is different.</p><p>Say you have a class for greeting with DI.</p><pre>class Greeter {
  String greeting;
  Greeter(String greeting) {
    this.greeting = greeting;
  }
  void greet(String name) {
    System.out.println(this.greeting + name);
  }
}</pre><p>Since the class only has one responsibility it only has one method. Now we can rewrite this in JavaScript in OO way like this:</p><pre>function Greeter(greeting) {
  this.greeting = greeting;
}
Greeting.prototype.greet = function(name){
  alert(this.greeting + name);
};</pre><p>While this code is fine, it does not follow the spirit of JavaScript which is a functional language. Why have a Greeter noun when you can just have greet verb. (see: <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the kingdom of nouns</a>) So let&#8217;s rewrite it in functional style:</p><pre>function greetFactory(greeting) {
  return function(name) {
    alert(greeting + name);
  };
}</pre><p>so usage changes from:</p><pre>var greeter = new Greeter('Hello ');
greeter.greet('misko');</pre><p>to:</p><pre>var greet = greetFactory('Hello ');
greet('Misko');</pre><p>Notice that in all cases the DI of greeting is preserved just fine. Now here comes an interesting thing. Objects have scopes. For example the alert method in JavaScript (or System.out.println method in Java) needs to be DI as well since we want to verify that the right thing is printed in test. But the alert method needs to be injected not just into our function but most likely into hundreds of other functions in our application. It is kind of a singleton. So in java we have to do this:</p><pre>class Greeter {
  String greeting;
  OutputStream out;
  Greeter(OutputStream out, String greeting) {
    this.out = out;
    this.greeting = greeting;
  }

  void greet(String name) {
    out.println(this.greeting + name);
  }
}</pre><p>The JavaScript equivalent would be:</p><pre>function greetFactory(alert, greeting) {
  return function(name) {
    alert(greeting + name);
  };
}</pre><p>But that means that we are no better than Java in injecting the same thing everywhere. The trick is in realizing that object injection is nested in scopes, and that every factory which needs alert share the same alert so we can rewrite this like this;</p><pre>function createFactories(alert) {
  return {
    greetFactory: function(greeting) {
       return function(greet) {
          alert(greeting + greet);
       };
    },
    someOtherFactory: function(...) {
       return function(...){ alert(...); };
    }
  };
}</pre><p>When you are ready to bootstarap your app you can:</p><pre>var factories = createFactories(myAlert);
var greet = factories.createGreet('Hello ');
greet('Misko');</pre>
") (wfw:commentRss nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/feed/") (slash:comments nil "21")) (item nil (title nil "Do it Yourself – Dependency Injection") (link nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/?utm_source=rss&utm_medium=rss&utm_campaign=do-it-yourself-dependency-injection") (comments nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/#comments") (pubDate nil "Wed, 26 May 2010 17:10:26 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=619") (description nil "A friend of mine has put together a set of documents which talk about do-it-yourself dependency-inject. Being that I am a fan of DI and how it helps with testability I wanted to share it with you. It is a good read for anyone interested in getting better at DI. by Chad Parry I want [...]") (content:encoded nil "<p>A friend of mine has put together a set of documents which talk about <a href=\"http://blacksheep.parry.org/archives/diy-di/print/\">do-it-yourself dependency-inject.</a> Being that I am a fan of DI and how it helps with testability I wanted to share it with you. It is a good read for anyone interested in getting better at DI.</p><p>by Chad Parry</p><p>I want to evangelize this technique so that people know a lightweight way they can adopt DI. I think we need to refine the definition of dependency injection. It shouldn&#8217;t mean the use of a framework like Guice, because that&#8217;s just one possible implementation. It should mean the separation of glue code from business logic. The glue code, (which is represented by annotations in Guice, but could just as well be static helpers), is neither easy nor important to test. On the other hand, the business logic should be made easy to test. The secret to testability does not lie in removing untestable code as much as in segregating the untestable code.</p><p>The “dependency injection” (DI) technique is a way to improve testability and maintainability of object-oriented code. Typically adoption of dependency injection is coupled with adoption of a dependency injection framework, such as <a rel=\"external\" href=\"http://code.google.com/p/google-guice/\">Guice</a><sup>[1]</sup> or <a rel=\"external\" href=\"http://www.springsource.org/\">Spring</a><sup>[2]</sup>. These materials show how dependency injection can be accomplished without any framework. The same benefits provided by frameworks can be realized using “do-it-yourself” (DIY) handcrafted code. This model is named DIY-DI, pronounced <em>die-die</em>.</p><ul><li><strong><a rel=\"external\" href=\"http://docs.google.com/present/view?id=dg4jbg5c_7cwkvrhfq\">State of the Art Testability</a><sup>[3]</sup></strong> (online slide deck, also available in <a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/State-of-the-Art-Testability.ppt\">PowerPoint</a><sup>[4]</sup>)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIY-DI.pdf\">DIY-DI</a><sup>[5]</sup></strong> (accompanying how-to manual)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIPresentation.zip\">DIPresentation</a><sup>[6]</sup></strong> (accompanying code examples)</li></ul>
") (wfw:commentRss nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/feed/") (slash:comments nil "23")) (item nil (title nil "Move over Java, I have fallen in love with JavaScript") (link nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/?utm_source=rss&utm_medium=rss&utm_campaign=move-over-java-i-have-fallen-in-love-with-javascript") (comments nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/#comments") (pubDate nil "Thu, 08 Apr 2010 04:20:16 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=616") (description nil "I spent the past year developing &#60;angular/&#62; in JavaScript (client) and Ruby on the server, and I have totally changed my opinion of dynamic languages, and I wanted to share some thought with you. Tests are a must Compilers are great at telling you that you have miss-typed something or that you assumptions about classes [...]") (content:encoded nil "<p>I spent the past year developing <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> in JavaScript (client) and Ruby on the server, and I have totally changed my opinion of dynamic languages, and I wanted to share some thought with you.</p><h3>Tests are a must</h3><p>Compilers are great at telling you that you have miss-typed something or that you assumptions about classes are wrong, but so is executing the code. So if all of my code is already exercised by the tests, than why do I need to have additional check of the compiler. Compile does not make the need for tests to go away, but the tests do make the need for compiler to go away. So if you have close to 100% coverage than you don&#8217;t need compiler to tell you that you mistyped something.</p><p>To get close to 100% coverage, you need to do tests first, and it has to be second nature to you. I run all of my JavaScript tests on every save across most browser using <a href=\"http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/\">JSTestDriver</a> and all my tests execute under a second. This instant feedback on every save is as good as having Eclipse underline your code that you made a mistake, and so I really don&#8217;t miss the compiler.</p><p>I can see how a dynamic language can be a nightmare if you don&#8217;t have tests.</p><h3>Tests are easier to write</h3><p>Since there are is no compiler to harrass you about types, it is very easy to fake out dependencies. Are you expecting a complicated class, but you know that in your test you are only exercising one method which should return a constant? Piece of cake! Create a nameless object with a single property which has the method and you are done.</p><h3>Typing is a lot of typing</h3><p>Typing as the name implies, is just that a lot of typing.</p><pre>Java:
  List&lt;Book&gt; books = new ArrayList&lt;Book&gt;();

JavaScript:
  var books = [];</pre><p>Look how much longer java line is and how much shorter JavaScript is. Is there any information missing? Both say that I have a list of Books, but one says it by convention (variable names ending in &#8216;s&#8217; are arrays of the name) where as the other is explicit and makes me repeat myself by typing book three times and List twice. (Tests, prove that my code works, no need for compiler.)</p><h3>Code Density</h3><p>Code Density in dynamic languages are phenomenal! All of the endless casting, coercing and repetition in declaration simply is not there resulting in very dense code. But, I am master Eclipse jedi and  can generate all of that verbosity with few keystrokes so typing is not an issue! True, but reading/compression is! 10 lines of code are easier to understand than 100, and in JavaScript those 10 lines often do more than 100 in Java. (To start with 100 lines of code does not fit on my screen at once.) Turns out JavaScript is still wordy and <a href=\"http://jashkenas.github.com/coffee-script/\">CoffeeScript</a> is even better!</p><h3>Functions as first class citizens &amp; Classes with single methods are functions</h3><p>Having functions as first class citizens which can be passed around is awesome! See <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the Kingdom of Nouns</a>! Functions are verbs, and you need both, verbs and nouns to make a sentence.</p><p>Recently I got an email from someone pointing out that doing proper <a href=\"http://misko.hevery.com/code-reviewers-guide/flaw-class-does-too-much/\">Single Responsibility Principle</a>, often resulted in classes which had exactly one method. Odd? Well, actually, it is a function in disguise.</p><h3>Function closure == Constructor injection</h3><p>If Class with one method is a function, than dependency injection for that class is the functions closure. Where the function is created specifies what are its dependencies and its visibility, nicely solving the dependency injection problem for functions.</p><h3>JavaScript is so simple</h3><p>I am constantly in awe, just how simple JavaScript really is! I can explain all of the rules of JavaScript to you in few hours, something which I can not do with Java. And yet, I feel like JavaScript is so much more powerful than Java because it has functions as first class citizens.</p><h3>Everything is still true</h3><p>All of the things which I have talked about in my blog is still true. Dependency Injection is a must and JavaScript&#8217;s dynamic nature does not make go away. Anyone who claims that DI is only for Java and that his language somehow makes it exempt form the rules of managing your dependencies, needs to lear more about DI. Similarly global state is a bad idea, and JavaScript is extra bad here, as global is the default and you have to do extra typing to get propers scoping, same goes to functions and their default affinity to global state. Bad JavaScript, Bad! Separation of <a href=\"http://misko.hevery.com/2008/07/08/how-to-think-about-the-new-operator/\">wiring from logic</a> still holds true and no amount monkey patching, will keep you sane in the long run.</p><h3>Where did the inheritance go?</h3><p>I have written 10,000&#8242;s of lines of JavaScript and I am yet to come across a need for inheritance. Where did it go? Proper use of inheritance == polymorphic behavior but one can get that with duck typing just by implementing the right kind of methods.</p><h3>Scaling the Team</h3><p>I have heard this many times before: I like (insert your dynamic language here) for the first 1000 lines than I miss my types. Well, I have written 10,000&#8242;s of lines and I don&#8217;t miss the compiler one bit, quite the opposite I have learned to loath when I am back in Java and the compiler gets in the way. So why is my experience different? One word: Tests! I am very serious about testing, and so are my team mates! As long as you have tests, lack of compiler is not a problem and the code scales just fine across more team members. But argument can be made that it scales better:</p><ol><li>Less code to maintain, write and understand</li><li>If you can&#8217;t understand it, just rewrite it, after all its just couple of hundred lines, how long can it take you?</li></ol><h3>JavaScript on the Server</h3><p>Developing web-applications means that you have to be expert in both Java and JavaScript, but lets fix that problem by moving JavaScript to the server. <a href=\"http://nodejs.org/\">Node.js</a> is a perfect example of that, and I love it.</p><h3>Non-blocking API</h3><p>Non-blocking API are a stroke of Genius! In short it makes it impossible to write slow tests. After all how can you make the tests slow if all method calls return immediately? That is the reason why I can execute 400 test in under 500ms an every save.</p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/feed/") (slash:comments nil "43")) (item nil (title nil "Growing Object-Oriented Software, Guided by Tests") (link nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/?utm_source=rss&utm_medium=rss&utm_campaign=growing-object-oriented-software-guided-by-tests") (comments nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/#comments") (pubDate nil "Wed, 06 Jan 2010 18:18:09 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=611") (description nil "Recently I have came across an excellent book on how to develop code with testing in mind, and I wanted to share it with you. The book is called Growing Object-Oriented Software, Guided by Tests and is written by Steve Freeman and Nat Pryce. The book starts right at the beggining as to why we [...]") (content:encoded nil "<p>Recently I have came across an excellent book on how to develop code with testing in mind, and I wanted to share it with you. The book is called <a href=\"http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=testabexplor-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627\">Growing Object-Oriented Software, Guided by Tests</a><img style=\"border:none !important; margin:0px !important;\" src=\"http://www.assoc-amazon.com/e/ir?t=testabexplor-20&amp;l=as2&amp;o=1&amp;a=0321503627\" border=\"0\" alt=\" \" width=\"1\" height=\"1\" /> and is written by Steve Freeman and Nat Pryce.</p><p>The book starts right at the beggining as to why we want to develop test first and covers advanced topics such as testing persistance, threads, and asynchronous code. I particulary like the style with which the book delivers the message. They start by building a simple application and add new requirements to it, morphing the codebase in the process. As they do so they introduce new classes and walk the reader through the thought process considering alternatives finally choosing a solution. This gives the reader a good understanding as to what to think about when looking at code. Of course all of these changes are driven by tests, and a lot of discussion is spent on explaining why a test was written in a particular way and how to refactor it as it grows with the applications, so that tests do not become a liability.</p><p>Reading the book I sometimes felt that I was listening to myself, especially when the authors warned about global state, singletons, overusing mocks, and doing work in constructors among other things. But unlike myself, who draws sharp lines between right and wrong, the authors did a good job of presenting things on the gray scale of benefits and drawbacks. The book shows what a typical code most people will write, and then show how tests point a way towards refactoring.</p><p>If you are newbie, or an intermediate to developing with tests than this book is a must for your library!</p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/feed/") (slash:comments nil "8")) (item nil (title nil "There are lots of ways to tests your JavaScript, but there is only one JsTestDriver") (link nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/?utm_source=rss&utm_medium=rss&utm_campaign=there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver") (comments nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/#comments") (pubDate nil "Fri, 04 Dec 2009 14:56:54 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=607") (description nil "Difference between JsTestDriver and other testing solution is the difference between flying economy and flying First Class. If you are serious about testing and TDD, than JsTestDriver is for you. It is not another Assertion Framework JsTestDriver as the name suggest, is not another assertion framework, but rather test runner. It can easily integrate with [...]") (content:encoded nil "<p>Difference between JsTestDriver and other testing solution is the difference between flying economy and flying First Class. If you are serious about testing and TDD, than JsTestDriver is for you.</p><p><strong>It is not another Assertion Framework</strong><br />
JsTestDriver as the name suggest, is not another assertion framework, but rather test runner. It can easily integrate with other assertion frameworks out there. There are already adapters for <a href=\"http://code.google.com/p/js-test-driver/wiki/XUnitCompatibility\">QUnit, and Yahoo Testing Frameworks, as well as Ruby autotest runner</a>. We will help you integrate your favorite test runner.</p><p><strong>Speed</strong><br />
JsTestDriver is blink of an eye fast. <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> is no small JavaScript project and it has about 300 unit tests and 10K lines of JavaScript. With JsTestDriver I can execute all of the tests on all major browser in under 400ms. That means that I run all of my tests on every save, giving me instantaneous feedback.</p><p><strong>IDE Integration</strong><br />
It is nice to be able to run your unit tests in a browser but it is better to be able to run them from the the IDE. We have integration with <a href=\"http://code.google.com/p/js-test-driver/wiki/UsingTheEclipsePlugin\">Eclipse</a> and InteliJ with instant run on every change. We even marshal the browser console into the IDE console for easier debugging.</p><p><strong>Continuos Build Integration</strong><br />
If you are serious about testing, than you are serious about <a href=\"http://code.google.com/p/js-test-driver/wiki/ContinuousBuild\">continuous integration</a>. Because JsTestDriver can be controlled from the command line, it can easily integrate into your continuous build. Single command starts the browsers, runs the tests, and reports the test results in a XML file which is compatible with most continuos integration servers such as Hudson.</p><p><strong>Code Coverage Built In</strong><br />
JsTestDriver allows JavaScript instrumentation on the fly, which means that it can instrument your code for <a href=\"http://code.google.com/p/js-test-driver/wiki/CodeCoverage\">coverage and generate LCOV</a> format, which can be easily converted into source annotated report of your code. This is done transparently and works on all browsers.</p><p><strong>Remote Test Execution</strong><br />
I develop on Mac, but need to test on IE. I run JsTestDriver on my build machine which can be accessed by HTTP and have IE always captured. No matter where I am in the world, I can run my tests against IE. This allows me to have a small browser farm ready to do my bidding.</p><p><strong>Support form Mobile Browsers</strong><br />
Just as I can capture desktop browsers, I can also capture mobile browsers. This allows me to develop in my favorite IDE and have my tests run on every save on the mobile platform.</p>
") (wfw:commentRss nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/feed/") (slash:comments nil "10")))) ("Video Recording & Slides: Psychology of Testing at Wealthfront Engineering" "<p>Here is a presentation I have done few weeks ego at Wealthfront Engineering.</p><div><span><span>Enjoy the <a href=\"https://docs.google.com/present/edit?id=0Abz6S2TvsDWSZDQ0OWdjaF8yNzdmYzZ3d2M5cw&amp;hl=en\">slides</a> and a <a href=\"http://vimeo.com/wealthfront/psychology-of-testing\">recording of presentation</a>!</span></span></div><div style=\"text-align: center\"><iframe src=\"http://player.vimeo.com/video/19726832\" width=\"500\" height=\"390\" frameborder=\"0\"></iframe><br /><iframe src=\"https://docs.google.com/present/embed?id=dgvs5xhc_115hm5rpc3n&amp;loop=true\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></div>" "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/?utm_source=rss&utm_medium=rss&utm_campaign=video-recording-slides-psychology-of-testing-at-wealthfront-engineering" (19801 61303) new 1 nil nil ((title nil "Video Recording & Slides: Psychology of Testing at Wealthfront Engineering") (link nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/?utm_source=rss&utm_medium=rss&utm_campaign=video-recording-slides-psychology-of-testing-at-wealthfront-engineering") (comments nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/#comments") (pubDate nil "Tue, 15 Feb 2011 03:13:59 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=662") (description nil "Here is a presentation I have done few weeks ego at Wealthfront Engineering. Enjoy the slides and a recording of presentation!") (content:encoded nil "<p>Here is a presentation I have done few weeks ego at Wealthfront Engineering.</p><div><span><span>Enjoy the <a href=\"https://docs.google.com/present/edit?id=0Abz6S2TvsDWSZDQ0OWdjaF8yNzdmYzZ3d2M5cw&amp;hl=en\">slides</a> and a <a href=\"http://vimeo.com/wealthfront/psychology-of-testing\">recording of presentation</a>!</span></span></div><div style=\"text-align: center\"><iframe src=\"http://player.vimeo.com/video/19726832\" width=\"500\" height=\"390\" frameborder=\"0\"></iframe><br /><iframe src=\"https://docs.google.com/present/embed?id=dgvs5xhc_115hm5rpc3n&amp;loop=true\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></div>
") (wfw:commentRss nil "http://misko.hevery.com/2011/02/14/video-recording-slides-psychology-of-testing-at-wealthfront-engineering/feed/") (slash:comments nil "9"))) ("RTAC2010: All hands on testing" "<p>Just wanted to share my presentation from the RTAC 2010 conference.</p><h3><a href=\"http://docs.google.com/present/view?id=d449gch_2603sf622cs\">Slides</a></h3><p><iframe src=\"http://docs.google.com/present/embed?id=d449gch_2603sf622cs\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><h3><a href=\"http://docs.google.com/document/pub?id=1Pfh0aq_qsBwfvlxUskszX5NRuo-US6DigJ5h9NGCJvU\">Handout</a></h3>" "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/?utm_source=rss&utm_medium=rss&utm_campaign=rtac2010-all-hands-on-testing" (19573 32530) new 2 nil nil ((title nil "RTAC2010: All hands on testing") (link nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/?utm_source=rss&utm_medium=rss&utm_campaign=rtac2010-all-hands-on-testing") (comments nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/#comments") (pubDate nil "Wed, 25 Aug 2010 20:37:38 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=650") (description nil "Just wanted to share my presentation from the RTAC 2010 conference. Slides Handout") (content:encoded nil "<p>Just wanted to share my presentation from the RTAC 2010 conference.</p><h3><a href=\"http://docs.google.com/present/view?id=d449gch_2603sf622cs\">Slides</a></h3><p><iframe src=\"http://docs.google.com/present/embed?id=d449gch_2603sf622cs\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><h3><a href=\"http://docs.google.com/document/pub?id=1Pfh0aq_qsBwfvlxUskszX5NRuo-US6DigJ5h9NGCJvU\">Handout</a></h3>
") (wfw:commentRss nil "http://misko.hevery.com/2010/08/25/rtac2010-all-hands-on-testing/feed/") (slash:comments nil "2"))) ("What Flex taught me about data-binding" "<p>Like most other developers, when I first came across the Flex data-binding, I thought of it as an interesting feature, but haven’t realized the true implications of it until much later. Data-binding in Flex has revolutionized the way I think about building UIs.</p><p>To understand why data-binding is so revolutionary, let’s look at standard Model-View-Controller setup for building UIs.</p><div style=\"text-align: center;\"><img class=\"size-full wp-image-152\" title=\"Login\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/login.png\" alt=\"Login\" width=\"251\" height=\"87\" /><br /><img class=\"size-full wp-image-153\" title=\"Login Failed\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/loginfailed.png\" alt=\"Login Failed\" width=\"249\" height=\"86\" /></div><p>Let’s start off with a model. A model is simply an object which has properties for all of information we may wish to display.</p><h2>Model</h2><pre>package example.flextesting {
[Bindable]
public class LoginModel {
username:String;
password:String;
showError:String;
}
}</pre><p>Now, model by itself is not that interesting, as we need to add behavior. To keep separation of concerns we put all of the behavior to the controller.</p><h2>Controller</h2><pre>package example.flextesting {
public class LoginController {
    public var model:LoginModel;
    public var authenticator:Function;
public function login():void {
showError = authenticator(username, password);
}
  }
}</pre><h2>Boiler plate problem</h2><p>Without data-binding we have to write a lot of boiler plate code which copies the data from the model to the view. In our example this may be simple as we only have three fields to copy, but in a complex forms this may be several hundred things to copy. With time, this gets so complicated that adding a new field requires us to change many things in unison: the view, the model and and code which copies it to the view.</p><h2>Circular Dependency Problem</h2><p>At this point we need the view to be able to lay it out in MXML. Now imagine there is no data-binding. We have a problem, we need to notify the view to update itself from the model, and we need to get the view to call the login() function in the controller. This creates a circular dependency between the controller and the view, and there is just no way around it. This means that we can not use constructor dependency-injection.</p><h2>Testing Nightmare</h2><p>But there is a more serious problem, we need to test our code to make sure that it works as intended. We can easily instantiate the model, but instantiating the controller requires us to also instantiate the view. In many cases it may be impractical or impossible to instantiate the view in the test, and therefore the dependency on the view from the controller is causing the problems. The reason why it may be hard to instantiate the view is that the view may have dependency on other views and other controllers.</p><p>One way to solve this circular dependency is to create an interface for the view. That way we can have two implementations of the view. One is the real view, and second is a mock implementation of the view. In the tests we can just instantiate the mock view and we are home free. While this is a good solution it requires us to write extra interfaces and extra implementations, and so it is cumbersome. Worse, any changes to the view require us to change 4 files (controller, interface, view, and mock view). Can we do better?</p><h2>Data-binding reverses dependencies</h2><p>Data-binding comes to the rescue. Data-binding solves our circular problem in a very clever way. It makes it so that the controller has no reference to the view. View still recognizes the controller, as the former needs to call methods on the latter when the user interacts with it, but the circular dependency is broken. Better yet, the remaining dependency is from the view to the controller, and not the other way around. This is very important, because it allows us to test the controller in isolation: we can easily instantiate the model and the controller without pulling in the view dependency.</p><pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;mx:VBox
  xmlns:mx=\"http://www.adobe.com/2006/mxml\"
xmlns:flextesting=\"example.flextesting.*\"&gt;
  &lt;flextesting:LoginController id=\"cntl\"/&gt;
  &lt;mx:Form&gt;
    &lt;mx:FormItem label=\"Username:\"&gt;
      &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.username}</span>\"
change=\"<span style=\"background-color: lightblue;\">cntl.model.username =
event.currentTarget.text</span>\"/&gt;
&lt;/mx:FormItem&gt;
&lt;mx:FormItem label=\"Password:\"&gt;
     &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.password}</span>\"
change=\"<span style=\"background-color: lightblue;\">cntl.model.password =
event.currentTarget.text</span>\"
displayAsPassword=\"true\"/&gt;
   &lt;/mx:FormItem&gt;
   &lt;mx:FormItem label=\"Label\"&gt;
     &lt;mx:HBox&gt;
       &lt;mx:Button label=\"Login\"
click=\"controller.login()\"/&gt;
&lt;mx:Label text=\"Login Failed\"
            visible=\"<span style=\"background-color: yellow;\">{cntl.model.showError}</span>\"
color=\"#FF0000\" fontWeight=\"bold\"/&gt;
     &lt;/mx:HBox&gt;
   &lt;/mx:FormItem&gt;
 &lt;/mx:Form&gt;
&lt;/mx:VBox&gt;</pre><p>The magic of data-binding comes from the curly brackets ‘{}’. As you can see in the MXML above, the TextInput and the Label are both controlled by the ‘{}’. The data-binding acts as a kind of reverse dependency, a property which is very welcome, as we are trying to isolate the controller.</p><h2>What I want is reverse data-binding</h2><p>Unfortunately, Flex has not taken the data-binding far enough. When the model changes, the View changes as well. But since the view is a TextField, we also want the model to change when the user changes the form. This revers data-binding is not available in Flex out of the box and so we have to simulate it by adding change events that copy the data back to the model. You can see this in the MXML above, the forward data-bindings are marked in <span style=\"background-color: yellow;\">yellow</span> and the reverse are marked in <span style=\"background-color: lightblue;\">blue</span>. This creates a lot of extra code which clutters the application.</p><h2>Conclusion</h2><p>So what have we learned about data-binding:</p><ul><li>MVC inherently suffers from circular dependencies which create problem in code, that makes unit-testing of the code very difficult.</li><li>Data-binding reverses the normal flow of dependencies allowing us to break up circular dependencies, and thus get a less coupled system.</li><li>Data-binding eliminates a lot of boiler plate code which shuttles the data from the model to the view, which makes our code easier to read and understand.</li></ul>" "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/?utm_source=rss&utm_medium=rss&utm_campaign=what-flex-thought-me-about-data-binding" (19553 31232) new 3 nil nil ((title nil "What Flex taught me about data-binding") (link nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/?utm_source=rss&utm_medium=rss&utm_campaign=what-flex-thought-me-about-data-binding") (comments nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/#comments") (pubDate nil "Tue, 10 Aug 2010 16:10:40 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=637") (description nil "Like most other developers, when I first came across the Flex data-binding, I thought of it as an interesting feature, but haven’t realized the true implications of it until much later. Data-binding in Flex has revolutionized the way I think about building UIs. To understand why data-binding is so revolutionary, let’s look at standard Model-View-Controller [...]") (content:encoded nil "<p>Like most other developers, when I first came across the Flex data-binding, I thought of it as an interesting feature, but haven’t realized the true implications of it until much later. Data-binding in Flex has revolutionized the way I think about building UIs.</p><p>To understand why data-binding is so revolutionary, let’s look at standard Model-View-Controller setup for building UIs.</p><div style=\"text-align: center;\"><img class=\"size-full wp-image-152\" title=\"Login\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/login.png\" alt=\"Login\" width=\"251\" height=\"87\" /><br /><img class=\"size-full wp-image-153\" title=\"Login Failed\" src=\"http://misko.hevery.com/wp-content/uploads/2008/08/loginfailed.png\" alt=\"Login Failed\" width=\"249\" height=\"86\" /></div><p>Let’s start off with a model. A model is simply an object which has properties for all of information we may wish to display.</p><h2>Model</h2><pre>package example.flextesting {
  [Bindable]
  public class LoginModel {
    username:String;
    password:String;
    showError:String;
  }
}</pre><p>Now, model by itself is not that interesting, as we need to add behavior. To keep separation of concerns we put all of the behavior to the controller.</p><h2>Controller</h2><pre>package example.flextesting {
  public class LoginController {
    public var model:LoginModel;
    public var authenticator:Function;
    public function login():void {
      showError = authenticator(username, password);
    }
  }
}</pre><h2>Boiler plate problem</h2><p>Without data-binding we have to write a lot of boiler plate code which copies the data from the model to the view. In our example this may be simple as we only have three fields to copy, but in a complex forms this may be several hundred things to copy. With time, this gets so complicated that adding a new field requires us to change many things in unison: the view, the model and and code which copies it to the view.</p><h2>Circular Dependency Problem</h2><p>At this point we need the view to be able to lay it out in MXML. Now imagine there is no data-binding. We have a problem, we need to notify the view to update itself from the model, and we need to get the view to call the login() function in the controller. This creates a circular dependency between the controller and the view, and there is just no way around it. This means that we can not use constructor dependency-injection.</p><h2>Testing Nightmare</h2><p>But there is a more serious problem, we need to test our code to make sure that it works as intended. We can easily instantiate the model, but instantiating the controller requires us to also instantiate the view. In many cases it may be impractical or impossible to instantiate the view in the test, and therefore the dependency on the view from the controller is causing the problems. The reason why it may be hard to instantiate the view is that the view may have dependency on other views and other controllers.</p><p>One way to solve this circular dependency is to create an interface for the view. That way we can have two implementations of the view. One is the real view, and second is a mock implementation of the view. In the tests we can just instantiate the mock view and we are home free. While this is a good solution it requires us to write extra interfaces and extra implementations, and so it is cumbersome. Worse, any changes to the view require us to change 4 files (controller, interface, view, and mock view). Can we do better?</p><h2>Data-binding reverses dependencies</h2><p>Data-binding comes to the rescue. Data-binding solves our circular problem in a very clever way. It makes it so that the controller has no reference to the view. View still recognizes the controller, as the former needs to call methods on the latter when the user interacts with it, but the circular dependency is broken. Better yet, the remaining dependency is from the view to the controller, and not the other way around. This is very important, because it allows us to test the controller in isolation: we can easily instantiate the model and the controller without pulling in the view dependency.</p><pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;mx:VBox
    xmlns:mx=\"http://www.adobe.com/2006/mxml\"
     xmlns:flextesting=\"example.flextesting.*\"&gt;
  &lt;flextesting:LoginController id=\"cntl\"/&gt;
  &lt;mx:Form&gt;
    &lt;mx:FormItem label=\"Username:\"&gt;
      &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.username}</span>\"
           change=\"<span style=\"background-color: lightblue;\">cntl.model.username =
                       event.currentTarget.text</span>\"/&gt;
    &lt;/mx:FormItem&gt;
    &lt;mx:FormItem label=\"Password:\"&gt;
     &lt;mx:TextInput text=\"<span style=\"background-color: yellow;\">{controller.model.password}</span>\"
          change=\"<span style=\"background-color: lightblue;\">cntl.model.password =
                       event.currentTarget.text</span>\"
          displayAsPassword=\"true\"/&gt;
   &lt;/mx:FormItem&gt;
   &lt;mx:FormItem label=\"Label\"&gt;
     &lt;mx:HBox&gt;
       &lt;mx:Button label=\"Login\"
           click=\"controller.login()\"/&gt;
        &lt;mx:Label text=\"Login Failed\"
            visible=\"<span style=\"background-color: yellow;\">{cntl.model.showError}</span>\"
             color=\"#FF0000\" fontWeight=\"bold\"/&gt;
     &lt;/mx:HBox&gt;
   &lt;/mx:FormItem&gt;
 &lt;/mx:Form&gt;
&lt;/mx:VBox&gt;</pre><p>The magic of data-binding comes from the curly brackets ‘{}’. As you can see in the MXML above, the TextInput and the Label are both controlled by the ‘{}’. The data-binding acts as a kind of reverse dependency, a property which is very welcome, as we are trying to isolate the controller.</p><h2>What I want is reverse data-binding</h2><p>Unfortunately, Flex has not taken the data-binding far enough. When the model changes, the View changes as well. But since the view is a TextField, we also want the model to change when the user changes the form. This revers data-binding is not available in Flex out of the box and so we have to simulate it by adding change events that copy the data back to the model. You can see this in the MXML above, the forward data-bindings are marked in <span style=\"background-color: yellow;\">yellow</span> and the reverse are marked in <span style=\"background-color: lightblue;\">blue</span>. This creates a lot of extra code which clutters the application.</p><h2>Conclusion</h2><p>So what have we learned about data-binding:</p><ul><li>MVC inherently suffers from circular dependencies which create problem in code, that makes unit-testing of the code very difficult.</li><li>Data-binding reverses the normal flow of dependencies allowing us to break up circular dependencies, and thus get a less coupled system.</li><li>Data-binding eliminates a lot of boiler plate code which shuttles the data from the model to the view, which makes our code easier to read and understand.</li></ul>
") (wfw:commentRss nil "http://misko.hevery.com/2010/08/10/what-flex-thought-me-about-data-binding/feed/") (slash:comments nil "20"))) ("<angular/>: A Radically Different Way of Building AJAX Apps" "<p><object width=\"640\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object></p><p><iframe src=\"https://docs.google.com/present/embed?id=d449gch_254g873k7ff\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><p><a href=\"http://angularjs.org\">http://angularjs.org</a><br /><a href=\"https://docs.google.com/document/pub?id=1ZHVhqC0apbzPRQcgnb1Ye-bAUbNJ-IlFMyPBPCZ2cYU\">source snippets</a></p>" "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/?utm_source=rss&utm_medium=rss&utm_campaign=a-radically-different-way-of-building-ajax-apps" (19538 14544) new 4 nil nil ((title nil "<angular/>: A Radically Different Way of Building AJAX Apps") (link nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/?utm_source=rss&utm_medium=rss&utm_campaign=a-radically-different-way-of-building-ajax-apps") (comments nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/#comments") (pubDate nil "Fri, 30 Jul 2010 02:28:32 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=629") (description nil "http://angularjs.org source snippets") (content:encoded nil "<p><object width=\"640\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/0iQCLlu1dko?fs=1&amp;hl=en_US\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object></p><p><iframe src=\"https://docs.google.com/present/embed?id=d449gch_254g873k7ff\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p><p><a href=\"http://angularjs.org\">http://angularjs.org</a><br /><a href=\"https://docs.google.com/document/pub?id=1ZHVhqC0apbzPRQcgnb1Ye-bAUbNJ-IlFMyPBPCZ2cYU\">source snippets</a></p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/07/29/a-radically-different-way-of-building-ajax-apps/feed/") (slash:comments nil "37"))) ("How JavaScript Works" "<p>Just a quick presentation I have done on JavaScript.</p><p>video:<br /><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed></object></p><p>slides:<br /><iframe src=\"http://docs.google.com/present/embed?id=d449gch_253cz63vddn\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p>" "http://misko.hevery.com/2010/07/14/how-javascript-works/?utm_source=rss&utm_medium=rss&utm_campaign=how-javascript-works" (19518 25004) new 5 nil nil ((title nil "How JavaScript Works") (link nil "http://misko.hevery.com/2010/07/14/how-javascript-works/?utm_source=rss&utm_medium=rss&utm_campaign=how-javascript-works") (comments nil "http://misko.hevery.com/2010/07/14/how-javascript-works/#comments") (pubDate nil "Thu, 15 Jul 2010 01:17:32 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=625") (description nil "Just a quick presentation I have done on JavaScript. video: slides:") (content:encoded nil "<p>Just a quick presentation I have done on JavaScript.</p><p>video:<br /><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/ljNi8nS5TtQ&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed></object></p><p>slides:<br /><iframe src=\"http://docs.google.com/present/embed?id=d449gch_253cz63vddn\" frameborder=\"0\" width=\"410\" height=\"342\"></iframe></p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/07/14/how-javascript-works/feed/") (slash:comments nil "18"))) ("Dependency-Injection and JavaScript closures" "<p>As you can tell I am a big fan of DI, but I kept hearing that DI is not needed with dynamic languages, so after using JS for many months I am happy to say that DI is important there as well. In other words dependency managment and controll matters. But it is different.</p><p>Say you have a class for greeting with DI.</p><pre>class Greeter {
String greeting;
Greeter(String greeting) {
this.greeting = greeting;
}
void greet(String name) {
System.out.println(this.greeting + name);
}
}</pre><p>Since the class only has one responsibility it only has one method. Now we can rewrite this in JavaScript in OO way like this:</p><pre>function Greeter(greeting) {
this.greeting = greeting;
}
Greeting.prototype.greet = function(name){
alert(this.greeting + name);
};</pre><p>While this code is fine, it does not follow the spirit of JavaScript which is a functional language. Why have a Greeter noun when you can just have greet verb. (see: <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the kingdom of nouns</a>) So let’s rewrite it in functional style:</p><pre>function greetFactory(greeting) {
return function(name) {
alert(greeting + name);
};
}</pre><p>so usage changes from:</p><pre>var greeter = new Greeter('Hello ');
greeter.greet('misko');</pre><p>to:</p><pre>var greet = greetFactory('Hello ');
greet('Misko');</pre><p>Notice that in all cases the DI of greeting is preserved just fine. Now here comes an interesting thing. Objects have scopes. For example the alert method in JavaScript (or System.out.println method in Java) needs to be DI as well since we want to verify that the right thing is printed in test. But the alert method needs to be injected not just into our function but most likely into hundreds of other functions in our application. It is kind of a singleton. So in java we have to do this:</p><pre>class Greeter {
String greeting;
OutputStream out;
Greeter(OutputStream out, String greeting) {
this.out = out;
this.greeting = greeting;
}
void greet(String name) {
out.println(this.greeting + name);
}
}</pre><p>The JavaScript equivalent would be:</p><pre>function greetFactory(alert, greeting) {
return function(name) {
alert(greeting + name);
};
}</pre><p>But that means that we are no better than Java in injecting the same thing everywhere. The trick is in realizing that object injection is nested in scopes, and that every factory which needs alert share the same alert so we can rewrite this like this;</p><pre>function createFactories(alert) {
return {
greetFactory: function(greeting) {
return function(greet) {
alert(greeting + greet);
};
},
someOtherFactory: function(...) {
return function(...){ alert(...); };
}
};
}</pre><p>When you are ready to bootstarap your app you can:</p><pre>var factories = createFactories(myAlert);
var greet = factories.createGreet('Hello ');
greet('Misko');</pre>" "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/?utm_source=rss&utm_medium=rss&utm_campaign=dependency-injection-and-javascript-closures" (19457 61641) new 6 nil nil ((title nil "Dependency-Injection and JavaScript closures") (link nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/?utm_source=rss&utm_medium=rss&utm_campaign=dependency-injection-and-javascript-closures") (comments nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/#comments") (pubDate nil "Sun, 30 May 2010 04:59:53 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=623") (description nil "As you can tell I am a big fan of DI, but I kept hearing that DI is not needed with dynamic languages, so after using JS for many months I am happy to say that DI is important there as well. In other words dependency managment and controll matters. But it is different. Say [...]") (content:encoded nil "<p>As you can tell I am a big fan of DI, but I kept hearing that DI is not needed with dynamic languages, so after using JS for many months I am happy to say that DI is important there as well. In other words dependency managment and controll matters. But it is different.</p><p>Say you have a class for greeting with DI.</p><pre>class Greeter {
  String greeting;
  Greeter(String greeting) {
    this.greeting = greeting;
  }
  void greet(String name) {
    System.out.println(this.greeting + name);
  }
}</pre><p>Since the class only has one responsibility it only has one method. Now we can rewrite this in JavaScript in OO way like this:</p><pre>function Greeter(greeting) {
  this.greeting = greeting;
}
Greeting.prototype.greet = function(name){
  alert(this.greeting + name);
};</pre><p>While this code is fine, it does not follow the spirit of JavaScript which is a functional language. Why have a Greeter noun when you can just have greet verb. (see: <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the kingdom of nouns</a>) So let&#8217;s rewrite it in functional style:</p><pre>function greetFactory(greeting) {
  return function(name) {
    alert(greeting + name);
  };
}</pre><p>so usage changes from:</p><pre>var greeter = new Greeter('Hello ');
greeter.greet('misko');</pre><p>to:</p><pre>var greet = greetFactory('Hello ');
greet('Misko');</pre><p>Notice that in all cases the DI of greeting is preserved just fine. Now here comes an interesting thing. Objects have scopes. For example the alert method in JavaScript (or System.out.println method in Java) needs to be DI as well since we want to verify that the right thing is printed in test. But the alert method needs to be injected not just into our function but most likely into hundreds of other functions in our application. It is kind of a singleton. So in java we have to do this:</p><pre>class Greeter {
  String greeting;
  OutputStream out;
  Greeter(OutputStream out, String greeting) {
    this.out = out;
    this.greeting = greeting;
  }

  void greet(String name) {
    out.println(this.greeting + name);
  }
}</pre><p>The JavaScript equivalent would be:</p><pre>function greetFactory(alert, greeting) {
  return function(name) {
    alert(greeting + name);
  };
}</pre><p>But that means that we are no better than Java in injecting the same thing everywhere. The trick is in realizing that object injection is nested in scopes, and that every factory which needs alert share the same alert so we can rewrite this like this;</p><pre>function createFactories(alert) {
  return {
    greetFactory: function(greeting) {
       return function(greet) {
          alert(greeting + greet);
       };
    },
    someOtherFactory: function(...) {
       return function(...){ alert(...); };
    }
  };
}</pre><p>When you are ready to bootstarap your app you can:</p><pre>var factories = createFactories(myAlert);
var greet = factories.createGreet('Hello ');
greet('Misko');</pre>
") (wfw:commentRss nil "http://misko.hevery.com/2010/05/29/dependency-injection-and-javascript-closures/feed/") (slash:comments nil "21"))) ("Do it Yourself – Dependency Injection" "<p>A friend of mine has put together a set of documents which talk about <a href=\"http://blacksheep.parry.org/archives/diy-di/print/\">do-it-yourself dependency-inject.</a> Being that I am a fan of DI and how it helps with testability I wanted to share it with you. It is a good read for anyone interested in getting better at DI.</p><p>by Chad Parry</p><p>I want to evangelize this technique so that people know a lightweight way they can adopt DI. I think we need to refine the definition of dependency injection. It shouldn’t mean the use of a framework like Guice, because that’s just one possible implementation. It should mean the separation of glue code from business logic. The glue code, (which is represented by annotations in Guice, but could just as well be static helpers), is neither easy nor important to test. On the other hand, the business logic should be made easy to test. The secret to testability does not lie in removing untestable code as much as in segregating the untestable code.</p><p>The “dependency injection” (DI) technique is a way to improve testability and maintainability of object-oriented code. Typically adoption of dependency injection is coupled with adoption of a dependency injection framework, such as <a rel=\"external\" href=\"http://code.google.com/p/google-guice/\">Guice</a><sup>[1]</sup> or <a rel=\"external\" href=\"http://www.springsource.org/\">Spring</a><sup>[2]</sup>. These materials show how dependency injection can be accomplished without any framework. The same benefits provided by frameworks can be realized using “do-it-yourself” (DIY) handcrafted code. This model is named DIY-DI, pronounced <em>die-die</em>.</p><ul><li><strong><a rel=\"external\" href=\"http://docs.google.com/present/view?id=dg4jbg5c_7cwkvrhfq\">State of the Art Testability</a><sup>[3]</sup></strong> (online slide deck, also available in <a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/State-of-the-Art-Testability.ppt\">PowerPoint</a><sup>[4]</sup>)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIY-DI.pdf\">DIY-DI</a><sup>[5]</sup></strong> (accompanying how-to manual)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIPresentation.zip\">DIPresentation</a><sup>[6]</sup></strong> (accompanying code examples)</li></ul>" "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/?utm_source=rss&utm_medium=rss&utm_campaign=do-it-yourself-dependency-injection" (19453 22018) new 7 nil nil ((title nil "Do it Yourself – Dependency Injection") (link nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/?utm_source=rss&utm_medium=rss&utm_campaign=do-it-yourself-dependency-injection") (comments nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/#comments") (pubDate nil "Wed, 26 May 2010 17:10:26 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=619") (description nil "A friend of mine has put together a set of documents which talk about do-it-yourself dependency-inject. Being that I am a fan of DI and how it helps with testability I wanted to share it with you. It is a good read for anyone interested in getting better at DI. by Chad Parry I want [...]") (content:encoded nil "<p>A friend of mine has put together a set of documents which talk about <a href=\"http://blacksheep.parry.org/archives/diy-di/print/\">do-it-yourself dependency-inject.</a> Being that I am a fan of DI and how it helps with testability I wanted to share it with you. It is a good read for anyone interested in getting better at DI.</p><p>by Chad Parry</p><p>I want to evangelize this technique so that people know a lightweight way they can adopt DI. I think we need to refine the definition of dependency injection. It shouldn&#8217;t mean the use of a framework like Guice, because that&#8217;s just one possible implementation. It should mean the separation of glue code from business logic. The glue code, (which is represented by annotations in Guice, but could just as well be static helpers), is neither easy nor important to test. On the other hand, the business logic should be made easy to test. The secret to testability does not lie in removing untestable code as much as in segregating the untestable code.</p><p>The “dependency injection” (DI) technique is a way to improve testability and maintainability of object-oriented code. Typically adoption of dependency injection is coupled with adoption of a dependency injection framework, such as <a rel=\"external\" href=\"http://code.google.com/p/google-guice/\">Guice</a><sup>[1]</sup> or <a rel=\"external\" href=\"http://www.springsource.org/\">Spring</a><sup>[2]</sup>. These materials show how dependency injection can be accomplished without any framework. The same benefits provided by frameworks can be realized using “do-it-yourself” (DIY) handcrafted code. This model is named DIY-DI, pronounced <em>die-die</em>.</p><ul><li><strong><a rel=\"external\" href=\"http://docs.google.com/present/view?id=dg4jbg5c_7cwkvrhfq\">State of the Art Testability</a><sup>[3]</sup></strong> (online slide deck, also available in <a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/State-of-the-Art-Testability.ppt\">PowerPoint</a><sup>[4]</sup>)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIY-DI.pdf\">DIY-DI</a><sup>[5]</sup></strong> (accompanying how-to manual)</li><li><strong><a rel=\"external\" href=\"http://blacksheep.parry.org/wp-content/uploads/2010/03/DIPresentation.zip\">DIPresentation</a><sup>[6]</sup></strong> (accompanying code examples)</li></ul>
") (wfw:commentRss nil "http://misko.hevery.com/2010/05/26/do-it-yourself-dependency-injection/feed/") (slash:comments nil "23"))) ("Move over Java, I have fallen in love with JavaScript" "<p>I spent the past year developing <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> in JavaScript (client) and Ruby on the server, and I have totally changed my opinion of dynamic languages, and I wanted to share some thought with you.</p><h3>Tests are a must</h3><p>Compilers are great at telling you that you have miss-typed something or that you assumptions about classes are wrong, but so is executing the code. So if all of my code is already exercised by the tests, than why do I need to have additional check of the compiler. Compile does not make the need for tests to go away, but the tests do make the need for compiler to go away. So if you have close to 100% coverage than you don’t need compiler to tell you that you mistyped something.</p><p>To get close to 100% coverage, you need to do tests first, and it has to be second nature to you. I run all of my JavaScript tests on every save across most browser using <a href=\"http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/\">JSTestDriver</a> and all my tests execute under a second. This instant feedback on every save is as good as having Eclipse underline your code that you made a mistake, and so I really don’t miss the compiler.</p><p>I can see how a dynamic language can be a nightmare if you don’t have tests.</p><h3>Tests are easier to write</h3><p>Since there are is no compiler to harrass you about types, it is very easy to fake out dependencies. Are you expecting a complicated class, but you know that in your test you are only exercising one method which should return a constant? Piece of cake! Create a nameless object with a single property which has the method and you are done.</p><h3>Typing is a lot of typing</h3><p>Typing as the name implies, is just that a lot of typing.</p><pre>Java:
  List&lt;Book&gt; books = new ArrayList&lt;Book&gt;();
JavaScript:
  var books = [];</pre><p>Look how much longer java line is and how much shorter JavaScript is. Is there any information missing? Both say that I have a list of Books, but one says it by convention (variable names ending in ‘s’ are arrays of the name) where as the other is explicit and makes me repeat myself by typing book three times and List twice. (Tests, prove that my code works, no need for compiler.)</p><h3>Code Density</h3><p>Code Density in dynamic languages are phenomenal! All of the endless casting, coercing and repetition in declaration simply is not there resulting in very dense code. But, I am master Eclipse jedi and  can generate all of that verbosity with few keystrokes so typing is not an issue! True, but reading/compression is! 10 lines of code are easier to understand than 100, and in JavaScript those 10 lines often do more than 100 in Java. (To start with 100 lines of code does not fit on my screen at once.) Turns out JavaScript is still wordy and <a href=\"http://jashkenas.github.com/coffee-script/\">CoffeeScript</a> is even better!</p><h3>Functions as first class citizens &amp; Classes with single methods are functions</h3><p>Having functions as first class citizens which can be passed around is awesome! See <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the Kingdom of Nouns</a>! Functions are verbs, and you need both, verbs and nouns to make a sentence.</p><p>Recently I got an email from someone pointing out that doing proper <a href=\"http://misko.hevery.com/code-reviewers-guide/flaw-class-does-too-much/\">Single Responsibility Principle</a>, often resulted in classes which had exactly one method. Odd? Well, actually, it is a function in disguise.</p><h3>Function closure == Constructor injection</h3><p>If Class with one method is a function, than dependency injection for that class is the functions closure. Where the function is created specifies what are its dependencies and its visibility, nicely solving the dependency injection problem for functions.</p><h3>JavaScript is so simple</h3><p>I am constantly in awe, just how simple JavaScript really is! I can explain all of the rules of JavaScript to you in few hours, something which I can not do with Java. And yet, I feel like JavaScript is so much more powerful than Java because it has functions as first class citizens.</p><h3>Everything is still true</h3><p>All of the things which I have talked about in my blog is still true. Dependency Injection is a must and JavaScript’s dynamic nature does not make go away. Anyone who claims that DI is only for Java and that his language somehow makes it exempt form the rules of managing your dependencies, needs to lear more about DI. Similarly global state is a bad idea, and JavaScript is extra bad here, as global is the default and you have to do extra typing to get propers scoping, same goes to functions and their default affinity to global state. Bad JavaScript, Bad! Separation of <a href=\"http://misko.hevery.com/2008/07/08/how-to-think-about-the-new-operator/\">wiring from logic</a> still holds true and no amount monkey patching, will keep you sane in the long run.</p><h3>Where did the inheritance go?</h3><p>I have written 10,000′s of lines of JavaScript and I am yet to come across a need for inheritance. Where did it go? Proper use of inheritance == polymorphic behavior but one can get that with duck typing just by implementing the right kind of methods.</p><h3>Scaling the Team</h3><p>I have heard this many times before: I like (insert your dynamic language here) for the first 1000 lines than I miss my types. Well, I have written 10,000′s of lines and I don’t miss the compiler one bit, quite the opposite I have learned to loath when I am back in Java and the compiler gets in the way. So why is my experience different? One word: Tests! I am very serious about testing, and so are my team mates! As long as you have tests, lack of compiler is not a problem and the code scales just fine across more team members. But argument can be made that it scales better:</p><ol><li>Less code to maintain, write and understand</li><li>If you can’t understand it, just rewrite it, after all its just couple of hundred lines, how long can it take you?</li></ol><h3>JavaScript on the Server</h3><p>Developing web-applications means that you have to be expert in both Java and JavaScript, but lets fix that problem by moving JavaScript to the server. <a href=\"http://nodejs.org/\">Node.js</a> is a perfect example of that, and I love it.</p><h3>Non-blocking API</h3><p>Non-blocking API are a stroke of Genius! In short it makes it impossible to write slow tests. After all how can you make the tests slow if all method calls return immediately? That is the reason why I can execute 400 test in under 500ms an every save.</p>" "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/?utm_source=rss&utm_medium=rss&utm_campaign=move-over-java-i-have-fallen-in-love-with-javascript" (19389 22912) new 8 nil nil ((title nil "Move over Java, I have fallen in love with JavaScript") (link nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/?utm_source=rss&utm_medium=rss&utm_campaign=move-over-java-i-have-fallen-in-love-with-javascript") (comments nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/#comments") (pubDate nil "Thu, 08 Apr 2010 04:20:16 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=616") (description nil "I spent the past year developing &#60;angular/&#62; in JavaScript (client) and Ruby on the server, and I have totally changed my opinion of dynamic languages, and I wanted to share some thought with you. Tests are a must Compilers are great at telling you that you have miss-typed something or that you assumptions about classes [...]") (content:encoded nil "<p>I spent the past year developing <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> in JavaScript (client) and Ruby on the server, and I have totally changed my opinion of dynamic languages, and I wanted to share some thought with you.</p><h3>Tests are a must</h3><p>Compilers are great at telling you that you have miss-typed something or that you assumptions about classes are wrong, but so is executing the code. So if all of my code is already exercised by the tests, than why do I need to have additional check of the compiler. Compile does not make the need for tests to go away, but the tests do make the need for compiler to go away. So if you have close to 100% coverage than you don&#8217;t need compiler to tell you that you mistyped something.</p><p>To get close to 100% coverage, you need to do tests first, and it has to be second nature to you. I run all of my JavaScript tests on every save across most browser using <a href=\"http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/\">JSTestDriver</a> and all my tests execute under a second. This instant feedback on every save is as good as having Eclipse underline your code that you made a mistake, and so I really don&#8217;t miss the compiler.</p><p>I can see how a dynamic language can be a nightmare if you don&#8217;t have tests.</p><h3>Tests are easier to write</h3><p>Since there are is no compiler to harrass you about types, it is very easy to fake out dependencies. Are you expecting a complicated class, but you know that in your test you are only exercising one method which should return a constant? Piece of cake! Create a nameless object with a single property which has the method and you are done.</p><h3>Typing is a lot of typing</h3><p>Typing as the name implies, is just that a lot of typing.</p><pre>Java:
  List&lt;Book&gt; books = new ArrayList&lt;Book&gt;();

JavaScript:
  var books = [];</pre><p>Look how much longer java line is and how much shorter JavaScript is. Is there any information missing? Both say that I have a list of Books, but one says it by convention (variable names ending in &#8216;s&#8217; are arrays of the name) where as the other is explicit and makes me repeat myself by typing book three times and List twice. (Tests, prove that my code works, no need for compiler.)</p><h3>Code Density</h3><p>Code Density in dynamic languages are phenomenal! All of the endless casting, coercing and repetition in declaration simply is not there resulting in very dense code. But, I am master Eclipse jedi and  can generate all of that verbosity with few keystrokes so typing is not an issue! True, but reading/compression is! 10 lines of code are easier to understand than 100, and in JavaScript those 10 lines often do more than 100 in Java. (To start with 100 lines of code does not fit on my screen at once.) Turns out JavaScript is still wordy and <a href=\"http://jashkenas.github.com/coffee-script/\">CoffeeScript</a> is even better!</p><h3>Functions as first class citizens &amp; Classes with single methods are functions</h3><p>Having functions as first class citizens which can be passed around is awesome! See <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the Kingdom of Nouns</a>! Functions are verbs, and you need both, verbs and nouns to make a sentence.</p><p>Recently I got an email from someone pointing out that doing proper <a href=\"http://misko.hevery.com/code-reviewers-guide/flaw-class-does-too-much/\">Single Responsibility Principle</a>, often resulted in classes which had exactly one method. Odd? Well, actually, it is a function in disguise.</p><h3>Function closure == Constructor injection</h3><p>If Class with one method is a function, than dependency injection for that class is the functions closure. Where the function is created specifies what are its dependencies and its visibility, nicely solving the dependency injection problem for functions.</p><h3>JavaScript is so simple</h3><p>I am constantly in awe, just how simple JavaScript really is! I can explain all of the rules of JavaScript to you in few hours, something which I can not do with Java. And yet, I feel like JavaScript is so much more powerful than Java because it has functions as first class citizens.</p><h3>Everything is still true</h3><p>All of the things which I have talked about in my blog is still true. Dependency Injection is a must and JavaScript&#8217;s dynamic nature does not make go away. Anyone who claims that DI is only for Java and that his language somehow makes it exempt form the rules of managing your dependencies, needs to lear more about DI. Similarly global state is a bad idea, and JavaScript is extra bad here, as global is the default and you have to do extra typing to get propers scoping, same goes to functions and their default affinity to global state. Bad JavaScript, Bad! Separation of <a href=\"http://misko.hevery.com/2008/07/08/how-to-think-about-the-new-operator/\">wiring from logic</a> still holds true and no amount monkey patching, will keep you sane in the long run.</p><h3>Where did the inheritance go?</h3><p>I have written 10,000&#8242;s of lines of JavaScript and I am yet to come across a need for inheritance. Where did it go? Proper use of inheritance == polymorphic behavior but one can get that with duck typing just by implementing the right kind of methods.</p><h3>Scaling the Team</h3><p>I have heard this many times before: I like (insert your dynamic language here) for the first 1000 lines than I miss my types. Well, I have written 10,000&#8242;s of lines and I don&#8217;t miss the compiler one bit, quite the opposite I have learned to loath when I am back in Java and the compiler gets in the way. So why is my experience different? One word: Tests! I am very serious about testing, and so are my team mates! As long as you have tests, lack of compiler is not a problem and the code scales just fine across more team members. But argument can be made that it scales better:</p><ol><li>Less code to maintain, write and understand</li><li>If you can&#8217;t understand it, just rewrite it, after all its just couple of hundred lines, how long can it take you?</li></ol><h3>JavaScript on the Server</h3><p>Developing web-applications means that you have to be expert in both Java and JavaScript, but lets fix that problem by moving JavaScript to the server. <a href=\"http://nodejs.org/\">Node.js</a> is a perfect example of that, and I love it.</p><h3>Non-blocking API</h3><p>Non-blocking API are a stroke of Genius! In short it makes it impossible to write slow tests. After all how can you make the tests slow if all method calls return immediately? That is the reason why I can execute 400 test in under 500ms an every save.</p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/04/07/move-over-java-i-have-fallen-in-love-with-javascript/feed/") (slash:comments nil "43"))) ("Growing Object-Oriented Software, Guided by Tests" "<p>Recently I have came across an excellent book on how to develop code with testing in mind, and I wanted to share it with you. The book is called <a href=\"http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=testabexplor-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627\">Growing Object-Oriented Software, Guided by Tests</a><img style=\"border:none !important; margin:0px !important;\" src=\"http://www.assoc-amazon.com/e/ir?t=testabexplor-20&amp;l=as2&amp;o=1&amp;a=0321503627\" border=\"0\" alt=\" \" width=\"1\" height=\"1\" /> and is written by Steve Freeman and Nat Pryce.</p><p>The book starts right at the beggining as to why we want to develop test first and covers advanced topics such as testing persistance, threads, and asynchronous code. I particulary like the style with which the book delivers the message. They start by building a simple application and add new requirements to it, morphing the codebase in the process. As they do so they introduce new classes and walk the reader through the thought process considering alternatives finally choosing a solution. This gives the reader a good understanding as to what to think about when looking at code. Of course all of these changes are driven by tests, and a lot of discussion is spent on explaining why a test was written in a particular way and how to refactor it as it grows with the applications, so that tests do not become a liability.</p><p>Reading the book I sometimes felt that I was listening to myself, especially when the authors warned about global state, singletons, overusing mocks, and doing work in constructors among other things. But unlike myself, who draws sharp lines between right and wrong, the authors did a good job of presenting things on the gray scale of benefits and drawbacks. The book shows what a typical code most people will write, and then show how tests point a way towards refactoring.</p><p>If you are newbie, or an intermediate to developing with tests than this book is a must for your library!</p>" "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/?utm_source=rss&utm_medium=rss&utm_campaign=growing-object-oriented-software-guided-by-tests" (19268 54241) new 9 nil nil ((title nil "Growing Object-Oriented Software, Guided by Tests") (link nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/?utm_source=rss&utm_medium=rss&utm_campaign=growing-object-oriented-software-guided-by-tests") (comments nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/#comments") (pubDate nil "Wed, 06 Jan 2010 18:18:09 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=611") (description nil "Recently I have came across an excellent book on how to develop code with testing in mind, and I wanted to share it with you. The book is called Growing Object-Oriented Software, Guided by Tests and is written by Steve Freeman and Nat Pryce. The book starts right at the beggining as to why we [...]") (content:encoded nil "<p>Recently I have came across an excellent book on how to develop code with testing in mind, and I wanted to share it with you. The book is called <a href=\"http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=testabexplor-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627\">Growing Object-Oriented Software, Guided by Tests</a><img style=\"border:none !important; margin:0px !important;\" src=\"http://www.assoc-amazon.com/e/ir?t=testabexplor-20&amp;l=as2&amp;o=1&amp;a=0321503627\" border=\"0\" alt=\" \" width=\"1\" height=\"1\" /> and is written by Steve Freeman and Nat Pryce.</p><p>The book starts right at the beggining as to why we want to develop test first and covers advanced topics such as testing persistance, threads, and asynchronous code. I particulary like the style with which the book delivers the message. They start by building a simple application and add new requirements to it, morphing the codebase in the process. As they do so they introduce new classes and walk the reader through the thought process considering alternatives finally choosing a solution. This gives the reader a good understanding as to what to think about when looking at code. Of course all of these changes are driven by tests, and a lot of discussion is spent on explaining why a test was written in a particular way and how to refactor it as it grows with the applications, so that tests do not become a liability.</p><p>Reading the book I sometimes felt that I was listening to myself, especially when the authors warned about global state, singletons, overusing mocks, and doing work in constructors among other things. But unlike myself, who draws sharp lines between right and wrong, the authors did a good job of presenting things on the gray scale of benefits and drawbacks. The book shows what a typical code most people will write, and then show how tests point a way towards refactoring.</p><p>If you are newbie, or an intermediate to developing with tests than this book is a must for your library!</p>
") (wfw:commentRss nil "http://misko.hevery.com/2010/01/06/growing-object-oriented-software-guided-by-tests/feed/") (slash:comments nil "8"))) ("There are lots of ways to tests your JavaScript, but there is only one JsTestDriver" "<p>Difference between JsTestDriver and other testing solution is the difference between flying economy and flying First Class. If you are serious about testing and TDD, than JsTestDriver is for you.</p><p><strong>It is not another Assertion Framework</strong><br />
JsTestDriver as the name suggest, is not another assertion framework, but rather test runner. It can easily integrate with other assertion frameworks out there. There are already adapters for <a href=\"http://code.google.com/p/js-test-driver/wiki/XUnitCompatibility\">QUnit, and Yahoo Testing Frameworks, as well as Ruby autotest runner</a>. We will help you integrate your favorite test runner.</p><p><strong>Speed</strong><br />
JsTestDriver is blink of an eye fast. <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> is no small JavaScript project and it has about 300 unit tests and 10K lines of JavaScript. With JsTestDriver I can execute all of the tests on all major browser in under 400ms. That means that I run all of my tests on every save, giving me instantaneous feedback.</p><p><strong>IDE Integration</strong><br />
It is nice to be able to run your unit tests in a browser but it is better to be able to run them from the the IDE. We have integration with <a href=\"http://code.google.com/p/js-test-driver/wiki/UsingTheEclipsePlugin\">Eclipse</a> and InteliJ with instant run on every change. We even marshal the browser console into the IDE console for easier debugging.</p><p><strong>Continuos Build Integration</strong><br />
If you are serious about testing, than you are serious about <a href=\"http://code.google.com/p/js-test-driver/wiki/ContinuousBuild\">continuous integration</a>. Because JsTestDriver can be controlled from the command line, it can easily integrate into your continuous build. Single command starts the browsers, runs the tests, and reports the test results in a XML file which is compatible with most continuos integration servers such as Hudson.</p><p><strong>Code Coverage Built In</strong><br />
JsTestDriver allows JavaScript instrumentation on the fly, which means that it can instrument your code for <a href=\"http://code.google.com/p/js-test-driver/wiki/CodeCoverage\">coverage and generate LCOV</a> format, which can be easily converted into source annotated report of your code. This is done transparently and works on all browsers.</p><p><strong>Remote Test Execution</strong><br />
I develop on Mac, but need to test on IE. I run JsTestDriver on my build machine which can be accessed by HTTP and have IE always captured. No matter where I am in the world, I can run my tests against IE. This allows me to have a small browser farm ready to do my bidding.</p><p><strong>Support form Mobile Browsers</strong><br />
Just as I can capture desktop browsers, I can also capture mobile browsers. This allows me to develop in my favorite IDE and have my tests run on every save on the mobile platform.</p>" "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/?utm_source=rss&utm_medium=rss&utm_campaign=there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver" (19225 9014) new 10 nil nil ((title nil "There are lots of ways to tests your JavaScript, but there is only one JsTestDriver") (link nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/?utm_source=rss&utm_medium=rss&utm_campaign=there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver") (comments nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/#comments") (pubDate nil "Fri, 04 Dec 2009 14:56:54 +0000") (dc:creator nil "misko") (category nil "Uncategorized") (guid ((isPermaLink . "false")) "http://misko.hevery.com/?p=607") (description nil "Difference between JsTestDriver and other testing solution is the difference between flying economy and flying First Class. If you are serious about testing and TDD, than JsTestDriver is for you. It is not another Assertion Framework JsTestDriver as the name suggest, is not another assertion framework, but rather test runner. It can easily integrate with [...]") (content:encoded nil "<p>Difference between JsTestDriver and other testing solution is the difference between flying economy and flying First Class. If you are serious about testing and TDD, than JsTestDriver is for you.</p><p><strong>It is not another Assertion Framework</strong><br />
JsTestDriver as the name suggest, is not another assertion framework, but rather test runner. It can easily integrate with other assertion frameworks out there. There are already adapters for <a href=\"http://code.google.com/p/js-test-driver/wiki/XUnitCompatibility\">QUnit, and Yahoo Testing Frameworks, as well as Ruby autotest runner</a>. We will help you integrate your favorite test runner.</p><p><strong>Speed</strong><br />
JsTestDriver is blink of an eye fast. <a href=\"http://www.getangular.com\">&lt;angular/&gt;</a> is no small JavaScript project and it has about 300 unit tests and 10K lines of JavaScript. With JsTestDriver I can execute all of the tests on all major browser in under 400ms. That means that I run all of my tests on every save, giving me instantaneous feedback.</p><p><strong>IDE Integration</strong><br />
It is nice to be able to run your unit tests in a browser but it is better to be able to run them from the the IDE. We have integration with <a href=\"http://code.google.com/p/js-test-driver/wiki/UsingTheEclipsePlugin\">Eclipse</a> and InteliJ with instant run on every change. We even marshal the browser console into the IDE console for easier debugging.</p><p><strong>Continuos Build Integration</strong><br />
If you are serious about testing, than you are serious about <a href=\"http://code.google.com/p/js-test-driver/wiki/ContinuousBuild\">continuous integration</a>. Because JsTestDriver can be controlled from the command line, it can easily integrate into your continuous build. Single command starts the browsers, runs the tests, and reports the test results in a XML file which is compatible with most continuos integration servers such as Hudson.</p><p><strong>Code Coverage Built In</strong><br />
JsTestDriver allows JavaScript instrumentation on the fly, which means that it can instrument your code for <a href=\"http://code.google.com/p/js-test-driver/wiki/CodeCoverage\">coverage and generate LCOV</a> format, which can be easily converted into source annotated report of your code. This is done transparently and works on all browsers.</p><p><strong>Remote Test Execution</strong><br />
I develop on Mac, but need to test on IE. I run JsTestDriver on my build machine which can be accessed by HTTP and have IE always captured. No matter where I am in the world, I can run my tests against IE. This allows me to have a small browser farm ready to do my bidding.</p><p><strong>Support form Mobile Browsers</strong><br />
Just as I can capture desktop browsers, I can also capture mobile browsers. This allows me to develop in my favorite IDE and have my tests run on every save on the mobile platform.</p>
") (wfw:commentRss nil "http://misko.hevery.com/2009/12/04/there-are-lots-of-ways-to-tests-your-javascript-but-there-is-only-one-jstestdriver/feed/") (slash:comments nil "10"))))