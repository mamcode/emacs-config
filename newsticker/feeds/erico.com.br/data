;; -*- coding: utf-8 -*-
(("Blog" nil nil (20849 32247 153471) feed 0 nil nil ((link ((rel . "self") (href . "http://greenfinity.hu/en/blog/atom.xml"))) (div ((xmlns . "http://www.w3.org/1999/xhtml")) (a ((href . "http://www.atomenabled.org/feedvalidator/check.cgi?url=http://greenfinity.hu/en/blog/atom.xml")) (img ((title . "Validate my Atom feed") (width . "88") (height . "31") (src . "http://www.atomenabled.org/feedvalidator/images/valid-atom.png") (alt . "[Valid Atom]") (border . "0px")))) (p nil (span nil "
        This is an Atom formatted XML site feed. It is intended to be viewed in
        a Newsreader or syndicated to another site. Please visit 
      ") (a ((href . "http://www.atomenabled.org/")) "Atom Enabled") (span nil "
        for more info.
      "))) (title ((type . "html")) "Blog") (updated nil "2013-03-21T09:21:33-04:00") (link ((href . "http://greenfinity.hu/en/blog") (rel . "alternate") (type . "text/html"))) (id nil "urn:syndication:8c4b7eb639b1e5f839595a2feafe6919") (generator ((uri . "http://plone.org/products/fatsyndication/") (version . "0.1")) "fatsyndication") (entry nil (title nil "from pyramid import cookie") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/from-pyramid-import-cookie"))) (id nil "urn:syndication:d4a913cdd19043699c6cd962855fdf65") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p><a href=\"http://pylonsproject.org\">Pyramid</a> is an elegant and popular web development framework that is based on the <a href=\"http://python.org\">Python</a> programming language.</p><p>The three (no, six) tenets of Pyramid are <b>Simplicity, Minimalism, Documentation, Speed, Reliability, Openness</b>.</p><p>This year <a href=\"../../\">Greenfinity</a> attempted the impossible, by creating the 7th element: <b>Cookies</b>. We made almond shortbread cookies, featuring the Pyramid logo. We sent them to the <a href=\"https://us.pycon.org/2013/\">PyCon 2013</a> conference, as a sweet surprise to the participants of the greatest Python event of the year.</p><p>Did you get a look at these limited edition Pyramid cookies at PyCon? We hope you enjoyed them.</p><h2>And now for something completely different...</h2><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390007.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390008.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410005.JPG/image_preview\" /></p><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410011.JPG/image_preview\" /></p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-03-21T09:21:33-04:00") (updated nil "2013-03-21T09:21:33-04:00")) (entry nil (title nil "Installing JavaScript from zc.buildout, Part 1") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/installing-javascript-from-zc-buildout"))) (id nil "urn:syndication:d5ec80792abf43ee9b01f9cb12261285") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p>In a typical <a href=\"http://python.org\">Python</a> web development project, you need JavaScript as well on top of Python. Here, I will show a method to satisfy your JavaScript installation and processing needs - straight from <a href=\"http://www.buildout.org\">zc.buildout</a>, the well known tool for the installation of advanced Python projects.</p><p><img class=\"image-inline\" src=\"../images/javascript_buildout_stormtrooper.png\" /></p><h3>TL;DR</h3><p>In this article, I will focus on how to do installation of server side JavaScript from <b>bin/buildout</b>. In upcoming posts, I will show what you can actually use server side JavaScript for, and also, how you can process client-side (browser) JavaScript for your web application.</p><h3>Additional dependencies</h3><p>First, we need some dependencies that buildout cannot handle itself.   You need to install <a href=\"http://nodejs.org\">NodeJS</a> and <a href=\"http://npmjs.org\">npm</a>, the Node Package Manager. On  MacOSX,  this can be done in the following way, if you use MacPorts:</p><pre>$ sudo port install nodejs<br />$ sudo port install npm</pre><p>On Ubuntu, you would do the following instead:</p><pre>$ sudo add-apt-repository ppa:chris-lea/node.js<br />$ sudo aptitude install nodejs npm</pre><p>Check out the instructions for installing Node on your favorite OS <a href=\"http://nodejs.org/download/\">here.</a></p><p>The good news is that while this is an extra dependency, it's the <b>only</b> dependency you will need. With this you can use the tools and follow the practices of the JavaScript developer community, without the need to use applications ported to Python, Java, or PHP, reinventing the wheel.</p><h3>See it in action</h3><p>We can use the example buildout of <a href=\"http://substanced.repoze.org\">Substance D</a> for demonstration. Substance D is an application development environment built using the <a href=\"http://www.pylonsproject.org\">Pyramid</a> web framework. Substance D is used only for demonstration here, the same method works equally well for any Python, buildout based web application. That said, you can skip trying this buildout if you want, and add a similar configuration to your own project right away.</p><p>Let's check out the sources. <a href=\"https://github.com/Pylons/sdidev\">Sdidev</a> is the buildout for developing on Substance D. It is meant to be used in development only and the buildout is not needed in production. Note that for this demo, the <a href=\"https://github.com/Pylons/sdidev/tree/ree-grunt-sprinting\">ree-grunt-sprinting branch</a> of the sdidev buildout has to be used.</p><pre>$ git clone git@github.com:Pylons/sdidev.git<br />$ cd sdidev<br />$ git checkout ree-grunt-sprinting</pre><p>Do a virtualenv:</p><pre>$ virtualenv -p python2.7 .</pre><p>And make a buildout:</p><pre>$ bin/python2.7 bootstrap.py<br />$ bin/buildout</pre><p>At the end of the buildout's log you will see some interesting things happening on the console. After building out our Python, <b>zc.buildout</b> starts showing colorful signs of progress with building out our - surprise! - JavaScript.</p><pre>Installing node_modules.<br />npm http GET https://registry.npmjs.org/grunt-cli<br />npm http GET https://registry.npmjs.org/grunt<br />npm http GET https://registry.npmjs.org/yo<br />npm http GET https://registry.npmjs.org/bower<br /><br />--- SNIP ---<br /><br />NodeJS server side modules updated.</pre><p>... Fun isn't it? But wait, we have not finished yet; it goes on:</p><pre>Installing bower_modules.<br />bower copying /private/tmp/gruntdemo/sdidev/src/slickgrid<br />bower fetching slickgrid<br />bower cloning git://github.com/twitter/bootstrap.git<br />bower cached git://github.com/twitter/bootstrap.git<br />bower fetching bootstrap<br />bower cloning git://github.com/components/jquery.git<br />bower cached git://github.com/components/jquery.git<br />bower fetching jquery<br />bower checking out jquery#1.9.1<br /><br />--- SNIP ---<br /><br />Bower client-side modules updated.</pre><h3>What just happened?</h3><p>Let me explain.</p><p>In our project's buildout.cfg, we are extending <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a>. <a href=\"http://yeoman.io\">Yeoman</a> is <b>Twitter</b>'s bundle to support processing and installation tasks for web development. It contains three tools: <b>Grunt</b>, <b>Bower</b>, and <b>Yo</b>. I will talk about what these do in an upcoming article. <a href=\"http://gruntjs.com\">Grunt</a> can also be installed independently from Twitter's Yeoman.</p><p>The <b>yeoman.cfg</b> is a buildout extension config that I created to cover all buildout tasks we deal with. You can take <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a> with you, and use it from your own buildout without the need to change it in any way. The only thing you add to your buildout.cfg is:</p><pre>[buildout]<br />extends = yeoman.cfg</pre><p>The yeoman.cfg file contains the rules for building JavaScript. It contains a few parts each doing a different installation step.</p><pre>[buildout]<br />parts = <br />    node_modules<br />    bower_modules<br />    grunt_script<br />    bower_script<br />    yo_script</pre><p>The first part does the installation of selected Node modules via <b>npm</b> and will be run each time you update the buildout.</p><pre>[node_modules]<br />recipe = collective.recipe.cmd<br />on_install = true<br />on_update = true<br />cmds = NODE_PATH=\"\" npm install .; echo \"\\nNodeJS server side modules updated.\\n\"</pre><p><b>npm</b> is the standard tool to install server side (Node) JavaScript. \"<b>npm install .</b>\" will install the package at the current local directory, with all its dependencies. To make it work, we need to turn our buildout into a virtual Node package, thus enabling to specify its dependencies in a <b>package.json</b> file. Note that this file is a data configuration in JSON format, which means that generic JavaScript is not allowed in it.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"grunt\": \"&gt;=0.4\"<br />   }<br />}</pre><p>You can try to issue</p><pre><b>NODE_PATH=\"\" npm install .</b></pre><p>from the console, if you are in the buildout root, to see how this installation works. The same will be executed from <b>bin/buildout</b>, via the <b>node_modules</b> buildout rule.</p><p>A more complete <b>package.json</b> version will also install some other tools you will find useful. By adding your own package dependencies to it you can satisfy virtually all your needs. I will talk more about the usage of these tools in the upcoming parts of this post.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"yo\": \"*\",<br />     \"grunt-cli\": \"*\",<br />     \"bower\": \"*\",<br />     \"grunt\": \"&gt;=0.4\",<br />     \"grunt-contrib-jshint\": \"*\",<br />     \"grunt-contrib-uglify\": \"*\",<br />     \"grunt-contrib-concat\": \"*\",<br />     \"grunt-contrib-less\": \"*\",<br />     \"grunt-contrib-watch\": \"*\"<br />   }<br />}</pre><h3>How it works</h3><p>The Node Package Manager provides two ways for installation: global or local. Global installation is done with the <b>-g</b> parameter. Global installation is often discouraged, partly because it usually requires admin privileges. In the solution I present here, we use no global installation, instead, a local installation is utilized. This has a few advantages for us.</p><ul><li>The installation will be local to the buildout, and isolated from the other buildouts, allowing each buildout to have its own private working set of installed packages and versions.</li><li>The <b>NODE_PATH=\"\"</b> setting in the <b>node_modules</b> buildout rule will cause your globally installed Node packages to be ignored as well, and the usage of your local installation will be enforced. <b>NODE_PATH</b> has a similar role in Node as <b>PYTHONPATH</b> in Python.</li></ul><p>This will cause all packages installed locally into the <b>node_modules</b> directory in the buildout root. You can delete <b>node_modules</b> and re-run <b>bin/buildout </b>to regenerate its contents - in the same way as it would happen if you deleted the Python <b>eggs</b> directory.</p><p>The only thing left to do is running executable applications. The following buildout rule takes care of that in case of <b>grunt</b>:</p><pre>[grunt_script]<br />recipe = collective.recipe.template<br />input = inline:<br />    #! /bin/sh<br />    export NODE_PATH=${buildout:directory}/node_modules<br />    ${buildout:directory}/node_modules/.bin/grunt $@<br />output = ${buildout:bin-directory}/grunt<br />mode = 755<br /></pre><p>This will create a <b>bin/grunt</b> executable script, which will execute <b>\"./node_modules/.bin/grunt\"</b>, the executable that npm has installed. This means that the JavaScript tools will be runnable from <b>bin/*</b> in the same way as all other buildout scripts.</p><pre>$ bin/grunt --help<br /></pre><p>Want to use even shorter commands? Make use of <b>virtualenv</b>, if you prefer so. In this case you will not even need to put the <b>bin/</b> in front of the script names. For example:</p><pre>$ source bin/activate<br />$ python2.7 bootstrap.py<br />$ buildout<br />$ grunt --help<br /></pre><h3>Summary</h3><p>In this post I showed how JavaScript <b>NodeJS</b> installation can be integrated to <b>zc.buildout</b> for a Python web application, and how this integration works. Next I will show how to use your newly installed tools for your web development project.</p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-03-20T13:05:00-04:00") (updated nil "2013-03-21T06:56:38-04:00")) (entry nil (title nil "How I learned to stop worrying, and love Sublime Text") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/how-i-learned-to-stop-worrying-and-love-sublime-text"))) (id nil "urn:syndication:f9813a77f78b480b8d2ae5ac62b3257b") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p><img class=\"image-inline\" src=\"copy_of_strangelovesublime.png\" /></p><p><a class=\"external-link\" href=\"http://www.sublimetext.com/\">Sublime Text </a>is a sophisticated text editor for code, markup and prose.</p><p>I have been a long time <a class=\"external-link\" href=\"http://www.vim.org/\">Vim</a> user, and always resisted the temptation to jump on the IDE bandwagon. Admittedly, I am a dinosaur, but it is not because of this, that I had stayed faithful to Vim just until recently. Vim has always done things the way I needed, and every time I tested a potential new editor, I realized that something was missing that I used to depend on in Vim.</p><p>So... last Christmas I started to think about what I would like to get from myself as a present, and I thought that a new editor would be nice. I started to test <b>Sublime Text 2</b>, and, surprise: I found it a very satisfactory experience.</p><p>I have a few editor features that I consider as basic. Naturally, I have my own point of view: since I am doing web application development with <a class=\"external-link\" href=\"http://python.org\"><b>Python</b></a> and <b>JavaScript</b>, some things such as tab settings or linting can be more important for me than for programmers in other languages, while for the same reason I don't care much about features related to, say, compiling.</p><p>So let's see my first experiences with Sublime! I installed it, and started to add and configure all the plugins I need for my workflow.</p><h3>Syntax coloring, correct tabbing with 4 soft spaces</h3><p>I consider correct tabbing to be basic, which means that if an editor does not have this, I would exclude it without looking for anything more. Fortunately, most good editors do this correctly, including the ability to understand the syntax of the given programming language, as it affects auto-indentation.</p><h3>Live, \"as you type\" syntax checking. linting.</h3><p>I have this feature in Vim, because it is really important to see live errors and warnings as you type, especially in JavaScript, where an excess comma can simply break all your code. I make this a basic requirement in my search. And, this works well in Sublime.</p><div></div><div id=\"_mcePaste\"></div><p>Actually, it works better for me in Sublime then on Vim. I succeeded to set this up in Vim, but since I did not follow best practices for installation and do updates rigorously, I ended up with something that was working, but never exactly matched any of my team members version. Sublime solves this problem with its package installation system.</p><h3>Editable configuration files</h3><p>This is a great one. The configuration files are editable in JSON format and they are updated in sync with the changes you make through interacting with the editor UI. For example, if you zoom in and out, and if the preferences are open, you can see the text of the configuration file updated live.</p><h3>Supports Vim keystrokes</h3><p>It knows Vim keystrokes! All you have to do is enable the Vintage module in the configuration. No more excuses for Vim users! You cannot say \"...but ...but I could do this much easier in Vim.\"</p><h3>Git support</h3><p> </p><p>Git support works through plugins, and it works well. Although, I would love to see a more powerful way of presenting diffs, similarly to VimDiff where you can see the two versions side by side.</p><p> </p><h3>Multiple cursors and selection</h3><p>This is simply awesome. It is easier to show it than to explain it:</p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/57781945\" width=\"500\"></iframe></p><h3>Code Intel</h3><p>Sublime knows where your modules are at, and you can click on a symbol any time to look up its definition. This is done by the <b>SublimeCodeIntel</b> plugin. For python code in a <a class=\"external-link\" href=\"http://buildout.org\">buildout</a>, this means that Sublime will know all your package locations, be it a core Python library module, or a locally installed package under \"src\" or \"eggs\". For buildout, I use the following section to generate the information that Sublime needs:</p><pre>[codeintel]<br />recipe = corneti.recipes.codeintel<br />eggs = ${instance:eggs}</pre><h3>Debugging Python</h3><p>Python applications are debugged with <b>pdb</b> from a console. When I am at a breakpoint, and do a listing of the code, or step up and down the trace stack, Sublime will open the source and place the cursor. Very useful. The only thing I did to install the <b>PdbSublimeTextSupport</b> python package, and save the following as a <b>.pdbrc</b> file:</p><pre>from PdbSublimeTextSupport import preloop, precmd<br />pdb.Pdb.preloop = preloop<br />pdb.Pdb.precmd = precmd</pre><h3>Autosave! Autosave!</h3><p>I leave this feature until the end. I know that it is also possible in Vim, but for some reason I have never used it. Sublime makes autosave very tempting. When you click away from the file you are editing, it will be saved. I was worried a bit that autosave can lead to accidental loss of code. But then I convinced myself, that the ability to undo, coupled with the fact that I version manage my code anyway, compensates the risk. The result? I type in my code, then I click the Reload button on my browser... and, I can see the updated version immediately! I don't really have to say how much this increases my work productivity.</p><h3>Problems?</h3><p>Not many, really. I find a few places where I would like to see improved support. For example, easier management of color schemes would be great. But altogether, Sublime Text 2 provides me with a great development experience.</p><h3>Getting help</h3><p>There is plenty of documentation on the web that explains how to configure Sublime and its plugins. I found the <a class=\"external-link\" href=\"http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/\">blog post of Mikko Ohtamaa</a> especially useful.</p><h3>Price</h3><p>Finally, a word about pricing. Sublime is not free software. A single user license for Sublime Text 2 costs $<b>70</b>. But Sublime can be downloaded and trialed for free. Unlike other software, that lock themselves down at the end of the trial period, and perhaps at the worst and most unexpected moment, Sublime will instead periodically pop up a discreet message to you, but you will be able to continue to use the software. I immediately rewarded this user friendly behavior by buying Sublime's license.</p><h3><b>Verdict</b></h3><p>Sublime Text 2 is a programmer editor that is stable, and provides most needed editor features on a high level. At the same time, it remains easily hackable, thus connecting the useful with the pleasant. It is worth to give it a try. And, if you are a Vim user, you will find the switch to Sublime extra comfortable.</p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-01-29T04:55:00-05:00") (updated nil "2013-01-29T23:57:46-05:00")) (entry nil (title nil "My daily routine of unit testing browser JavaScript") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/my-daily-routine-of-unit-testing-browser-javascript"))) (id nil "urn:syndication:98cdc5cf-4613-4d5d-9a7a-79e901ede547") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p>In this video presentation (targeted towards JavaScript Web Developers), I show how I use JavaScript unit testing in my everyday work.</p><p>I want to demonstrate that unit testing of JavaScript code is not <i>only</i> important for Continuous Integration - it also becomes part of the daily working routine of a software developer. If we practice unit testing it will help us to produce better quality JavaScript code.</p><p>And it's more fun, too. It makes it possible to do test driven development of web client JavaScript code.</p><p>During the screencast, I show how I use the BusterJS test runner to run the QUnit tests of the KARL application. Note that in its current unfinished state, buster-qunit requires a manual preparation of your existing QUnit tests, and once this is done, the tests will be able to run both as native QUnit, and as emulated BusterJS tests.</p><p> </p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/52322623\" width=\"500\"></iframe></p><p> </p><p> </p><h3>Interesting links:</h3><p> </p><p><strong>BusterJS</strong>: <a class=\"external-link\" href=\"http://busterjs.org\">http://busterjs.org</a></p><p>BusterJS is a JavaScript testing toolkit that allows unit testing of both in-browser and Node.js JavaScript.</p><p><strong>buster-qunit</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-qunit\">https://github.com/reebalazs/buster-qunit</a></p><p>The buster-qunit is an unreleased extension to buster.js. Even in its current unfinished state, I find it very useful, because it allows me to run the existing QUnit tests from the KARL project, with the more modern test runner of BusterJS.</p><p><strong>KARL</strong>: <a class=\"external-link\" href=\"http://karlproject.org\">http://karlproject.org</a></p><p><strong>QUnit</strong>: <a class=\"external-link\" href=\"http://qunitjs.org\">http://qunitjs.org</a></p><p><strong>buster-webui</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-webui\">https://github.com/reebalazs/buster-webui</a></p><p><strong>Jenkins</strong>:<a class=\"external-link\" href=\"http://jenkins-ci.org\"> http://jenkins-ci.org</a></p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2012-10-28T08:55:00-04:00") (updated nil "2012-10-30T11:14:21-04:00")))) ("from pyramid import cookie" "<p><a href=\"http://pylonsproject.org\">Pyramid</a> is an elegant and popular web development framework that is based on the <a href=\"http://python.org\">Python</a> programming language.</p><p>The three (no, six) tenets of Pyramid are <b>Simplicity, Minimalism, Documentation, Speed, Reliability, Openness</b>.</p><p>This year <a href=\"../../\">Greenfinity</a> attempted the impossible, by creating the 7th element: <b>Cookies</b>. We made almond shortbread cookies, featuring the Pyramid logo. We sent them to the <a href=\"https://us.pycon.org/2013/\">PyCon 2013</a> conference, as a sweet surprise to the participants of the greatest Python event of the year.</p><p>Did you get a look at these limited edition Pyramid cookies at PyCon? We hope you enjoyed them.</p><h2>And now for something completely different...</h2><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390007.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390008.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410005.JPG/image_preview\" /></p><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410011.JPG/image_preview\" /></p>" "http://greenfinity.hu/en/blog/from-pyramid-import-cookie" (20811 2397) old 1 nil nil ((title nil "from pyramid import cookie") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/from-pyramid-import-cookie"))) (id nil "urn:syndication:d4a913cdd19043699c6cd962855fdf65") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p><a href=\"http://pylonsproject.org\">Pyramid</a> is an elegant and popular web development framework that is based on the <a href=\"http://python.org\">Python</a> programming language.</p><p>The three (no, six) tenets of Pyramid are <b>Simplicity, Minimalism, Documentation, Speed, Reliability, Openness</b>.</p><p>This year <a href=\"../../\">Greenfinity</a> attempted the impossible, by creating the 7th element: <b>Cookies</b>. We made almond shortbread cookies, featuring the Pyramid logo. We sent them to the <a href=\"https://us.pycon.org/2013/\">PyCon 2013</a> conference, as a sweet surprise to the participants of the greatest Python event of the year.</p><p>Did you get a look at these limited edition Pyramid cookies at PyCon? We hope you enjoyed them.</p><h2>And now for something completely different...</h2><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390007.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><blockquote class=\"pullquote\"><br /></blockquote><p><img class=\"image-inline\" src=\"../images/cookies/M1390008.JPG/image_preview\" /></p><blockquote class=\"pullquote\"><br /></blockquote><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410005.JPG/image_preview\" /></p><p> </p><p><img class=\"image-inline\" src=\"../images/cookies/M1410011.JPG/image_preview\" /></p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-03-21T09:21:33-04:00") (updated nil "2013-03-21T09:21:33-04:00"))) ("Installing JavaScript from zc.buildout, Part 1" "<p>In a typical <a href=\"http://python.org\">Python</a> web development project, you need JavaScript as well on top of Python. Here, I will show a method to satisfy your JavaScript installation and processing needs - straight from <a href=\"http://www.buildout.org\">zc.buildout</a>, the well known tool for the installation of advanced Python projects.</p><p><img class=\"image-inline\" src=\"../images/javascript_buildout_stormtrooper.png\" /></p><h3>TL;DR</h3><p>In this article, I will focus on how to do installation of server side JavaScript from <b>bin/buildout</b>. In upcoming posts, I will show what you can actually use server side JavaScript for, and also, how you can process client-side (browser) JavaScript for your web application.</p><h3>Additional dependencies</h3><p>First, we need some dependencies that buildout cannot handle itself.   You need to install <a href=\"http://nodejs.org\">NodeJS</a> and <a href=\"http://npmjs.org\">npm</a>, the Node Package Manager. On  MacOSX,  this can be done in the following way, if you use MacPorts:</p><pre>$ sudo port install nodejs<br />$ sudo port install npm</pre><p>On Ubuntu, you would do the following instead:</p><pre>$ sudo add-apt-repository ppa:chris-lea/node.js<br />$ sudo aptitude install nodejs npm</pre><p>Check out the instructions for installing Node on your favorite OS <a href=\"http://nodejs.org/download/\">here.</a></p><p>The good news is that while this is an extra dependency, it's the <b>only</b> dependency you will need. With this you can use the tools and follow the practices of the JavaScript developer community, without the need to use applications ported to Python, Java, or PHP, reinventing the wheel.</p><h3>See it in action</h3><p>We can use the example buildout of <a href=\"http://substanced.repoze.org\">Substance D</a> for demonstration. Substance D is an application development environment built using the <a href=\"http://www.pylonsproject.org\">Pyramid</a> web framework. Substance D is used only for demonstration here, the same method works equally well for any Python, buildout based web application. That said, you can skip trying this buildout if you want, and add a similar configuration to your own project right away.</p><p>Let's check out the sources. <a href=\"https://github.com/Pylons/sdidev\">Sdidev</a> is the buildout for developing on Substance D. It is meant to be used in development only and the buildout is not needed in production. Note that for this demo, the <a href=\"https://github.com/Pylons/sdidev/tree/ree-grunt-sprinting\">ree-grunt-sprinting branch</a> of the sdidev buildout has to be used.</p><pre>$ git clone git@github.com:Pylons/sdidev.git<br />$ cd sdidev<br />$ git checkout ree-grunt-sprinting</pre><p>Do a virtualenv:</p><pre>$ virtualenv -p python2.7 .</pre><p>And make a buildout:</p><pre>$ bin/python2.7 bootstrap.py<br />$ bin/buildout</pre><p>At the end of the buildout's log you will see some interesting things happening on the console. After building out our Python, <b>zc.buildout</b> starts showing colorful signs of progress with building out our - surprise! - JavaScript.</p><pre>Installing node_modules.<br />npm http GET https://registry.npmjs.org/grunt-cli<br />npm http GET https://registry.npmjs.org/grunt<br />npm http GET https://registry.npmjs.org/yo<br />npm http GET https://registry.npmjs.org/bower<br /><br />--- SNIP ---<br /><br />NodeJS server side modules updated.</pre><p>... Fun isn't it? But wait, we have not finished yet; it goes on:</p><pre>Installing bower_modules.<br />bower copying /private/tmp/gruntdemo/sdidev/src/slickgrid<br />bower fetching slickgrid<br />bower cloning git://github.com/twitter/bootstrap.git<br />bower cached git://github.com/twitter/bootstrap.git<br />bower fetching bootstrap<br />bower cloning git://github.com/components/jquery.git<br />bower cached git://github.com/components/jquery.git<br />bower fetching jquery<br />bower checking out jquery#1.9.1<br /><br />--- SNIP ---<br /><br />Bower client-side modules updated.</pre><h3>What just happened?</h3><p>Let me explain.</p><p>In our project's buildout.cfg, we are extending <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a>. <a href=\"http://yeoman.io\">Yeoman</a> is <b>Twitter</b>'s bundle to support processing and installation tasks for web development. It contains three tools: <b>Grunt</b>, <b>Bower</b>, and <b>Yo</b>. I will talk about what these do in an upcoming article. <a href=\"http://gruntjs.com\">Grunt</a> can also be installed independently from Twitter's Yeoman.</p><p>The <b>yeoman.cfg</b> is a buildout extension config that I created to cover all buildout tasks we deal with. You can take <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a> with you, and use it from your own buildout without the need to change it in any way. The only thing you add to your buildout.cfg is:</p><pre>[buildout]<br />extends = yeoman.cfg</pre><p>The yeoman.cfg file contains the rules for building JavaScript. It contains a few parts each doing a different installation step.</p><pre>[buildout]<br />parts = <br />    node_modules<br />    bower_modules<br />    grunt_script<br />    bower_script<br />    yo_script</pre><p>The first part does the installation of selected Node modules via <b>npm</b> and will be run each time you update the buildout.</p><pre>[node_modules]<br />recipe = collective.recipe.cmd<br />on_install = true<br />on_update = true<br />cmds = NODE_PATH=\"\" npm install .; echo \"\\nNodeJS server side modules updated.\\n\"</pre><p><b>npm</b> is the standard tool to install server side (Node) JavaScript. \"<b>npm install .</b>\" will install the package at the current local directory, with all its dependencies. To make it work, we need to turn our buildout into a virtual Node package, thus enabling to specify its dependencies in a <b>package.json</b> file. Note that this file is a data configuration in JSON format, which means that generic JavaScript is not allowed in it.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"grunt\": \"&gt;=0.4\"<br />   }<br />}</pre><p>You can try to issue</p><pre><b>NODE_PATH=\"\" npm install .</b></pre><p>from the console, if you are in the buildout root, to see how this installation works. The same will be executed from <b>bin/buildout</b>, via the <b>node_modules</b> buildout rule.</p><p>A more complete <b>package.json</b> version will also install some other tools you will find useful. By adding your own package dependencies to it you can satisfy virtually all your needs. I will talk more about the usage of these tools in the upcoming parts of this post.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"yo\": \"*\",<br />     \"grunt-cli\": \"*\",<br />     \"bower\": \"*\",<br />     \"grunt\": \"&gt;=0.4\",<br />     \"grunt-contrib-jshint\": \"*\",<br />     \"grunt-contrib-uglify\": \"*\",<br />     \"grunt-contrib-concat\": \"*\",<br />     \"grunt-contrib-less\": \"*\",<br />     \"grunt-contrib-watch\": \"*\"<br />   }<br />}</pre><h3>How it works</h3><p>The Node Package Manager provides two ways for installation: global or local. Global installation is done with the <b>-g</b> parameter. Global installation is often discouraged, partly because it usually requires admin privileges. In the solution I present here, we use no global installation, instead, a local installation is utilized. This has a few advantages for us.</p><ul><li>The installation will be local to the buildout, and isolated from the other buildouts, allowing each buildout to have its own private working set of installed packages and versions.</li><li>The <b>NODE_PATH=\"\"</b> setting in the <b>node_modules</b> buildout rule will cause your globally installed Node packages to be ignored as well, and the usage of your local installation will be enforced. <b>NODE_PATH</b> has a similar role in Node as <b>PYTHONPATH</b> in Python.</li></ul><p>This will cause all packages installed locally into the <b>node_modules</b> directory in the buildout root. You can delete <b>node_modules</b> and re-run <b>bin/buildout </b>to regenerate its contents - in the same way as it would happen if you deleted the Python <b>eggs</b> directory.</p><p>The only thing left to do is running executable applications. The following buildout rule takes care of that in case of <b>grunt</b>:</p><pre>[grunt_script]<br />recipe = collective.recipe.template<br />input = inline:<br />    #! /bin/sh<br />    export NODE_PATH=${buildout:directory}/node_modules<br />    ${buildout:directory}/node_modules/.bin/grunt $@<br />output = ${buildout:bin-directory}/grunt<br />mode = 755<br /></pre><p>This will create a <b>bin/grunt</b> executable script, which will execute <b>\"./node_modules/.bin/grunt\"</b>, the executable that npm has installed. This means that the JavaScript tools will be runnable from <b>bin/*</b> in the same way as all other buildout scripts.</p><pre>$ bin/grunt --help<br /></pre><p>Want to use even shorter commands? Make use of <b>virtualenv</b>, if you prefer so. In this case you will not even need to put the <b>bin/</b> in front of the script names. For example:</p><pre>$ source bin/activate<br />$ python2.7 bootstrap.py<br />$ buildout<br />$ grunt --help<br /></pre><h3>Summary</h3><p>In this post I showed how JavaScript <b>NodeJS</b> installation can be integrated to <b>zc.buildout</b> for a Python web application, and how this integration works. Next I will show how to use your newly installed tools for your web development project.</p>" "http://greenfinity.hu/en/blog/installing-javascript-from-zc-buildout" (20810 59238) old 2 nil nil ((title nil "Installing JavaScript from zc.buildout, Part 1") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/installing-javascript-from-zc-buildout"))) (id nil "urn:syndication:d5ec80792abf43ee9b01f9cb12261285") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p>In a typical <a href=\"http://python.org\">Python</a> web development project, you need JavaScript as well on top of Python. Here, I will show a method to satisfy your JavaScript installation and processing needs - straight from <a href=\"http://www.buildout.org\">zc.buildout</a>, the well known tool for the installation of advanced Python projects.</p><p><img class=\"image-inline\" src=\"../images/javascript_buildout_stormtrooper.png\" /></p><h3>TL;DR</h3><p>In this article, I will focus on how to do installation of server side JavaScript from <b>bin/buildout</b>. In upcoming posts, I will show what you can actually use server side JavaScript for, and also, how you can process client-side (browser) JavaScript for your web application.</p><h3>Additional dependencies</h3><p>First, we need some dependencies that buildout cannot handle itself.   You need to install <a href=\"http://nodejs.org\">NodeJS</a> and <a href=\"http://npmjs.org\">npm</a>, the Node Package Manager. On  MacOSX,  this can be done in the following way, if you use MacPorts:</p><pre>$ sudo port install nodejs<br />$ sudo port install npm</pre><p>On Ubuntu, you would do the following instead:</p><pre>$ sudo add-apt-repository ppa:chris-lea/node.js<br />$ sudo aptitude install nodejs npm</pre><p>Check out the instructions for installing Node on your favorite OS <a href=\"http://nodejs.org/download/\">here.</a></p><p>The good news is that while this is an extra dependency, it's the <b>only</b> dependency you will need. With this you can use the tools and follow the practices of the JavaScript developer community, without the need to use applications ported to Python, Java, or PHP, reinventing the wheel.</p><h3>See it in action</h3><p>We can use the example buildout of <a href=\"http://substanced.repoze.org\">Substance D</a> for demonstration. Substance D is an application development environment built using the <a href=\"http://www.pylonsproject.org\">Pyramid</a> web framework. Substance D is used only for demonstration here, the same method works equally well for any Python, buildout based web application. That said, you can skip trying this buildout if you want, and add a similar configuration to your own project right away.</p><p>Let's check out the sources. <a href=\"https://github.com/Pylons/sdidev\">Sdidev</a> is the buildout for developing on Substance D. It is meant to be used in development only and the buildout is not needed in production. Note that for this demo, the <a href=\"https://github.com/Pylons/sdidev/tree/ree-grunt-sprinting\">ree-grunt-sprinting branch</a> of the sdidev buildout has to be used.</p><pre>$ git clone git@github.com:Pylons/sdidev.git<br />$ cd sdidev<br />$ git checkout ree-grunt-sprinting</pre><p>Do a virtualenv:</p><pre>$ virtualenv -p python2.7 .</pre><p>And make a buildout:</p><pre>$ bin/python2.7 bootstrap.py<br />$ bin/buildout</pre><p>At the end of the buildout's log you will see some interesting things happening on the console. After building out our Python, <b>zc.buildout</b> starts showing colorful signs of progress with building out our - surprise! - JavaScript.</p><pre>Installing node_modules.<br />npm http GET https://registry.npmjs.org/grunt-cli<br />npm http GET https://registry.npmjs.org/grunt<br />npm http GET https://registry.npmjs.org/yo<br />npm http GET https://registry.npmjs.org/bower<br /><br />--- SNIP ---<br /><br />NodeJS server side modules updated.</pre><p>... Fun isn't it? But wait, we have not finished yet; it goes on:</p><pre>Installing bower_modules.<br />bower copying /private/tmp/gruntdemo/sdidev/src/slickgrid<br />bower fetching slickgrid<br />bower cloning git://github.com/twitter/bootstrap.git<br />bower cached git://github.com/twitter/bootstrap.git<br />bower fetching bootstrap<br />bower cloning git://github.com/components/jquery.git<br />bower cached git://github.com/components/jquery.git<br />bower fetching jquery<br />bower checking out jquery#1.9.1<br /><br />--- SNIP ---<br /><br />Bower client-side modules updated.</pre><h3>What just happened?</h3><p>Let me explain.</p><p>In our project's buildout.cfg, we are extending <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a>. <a href=\"http://yeoman.io\">Yeoman</a> is <b>Twitter</b>'s bundle to support processing and installation tasks for web development. It contains three tools: <b>Grunt</b>, <b>Bower</b>, and <b>Yo</b>. I will talk about what these do in an upcoming article. <a href=\"http://gruntjs.com\">Grunt</a> can also be installed independently from Twitter's Yeoman.</p><p>The <b>yeoman.cfg</b> is a buildout extension config that I created to cover all buildout tasks we deal with. You can take <a href=\"https://github.com/Pylons/sdidev/blob/ree-grunt-sprinting/yeoman.cfg\">yeoman.cfg</a> with you, and use it from your own buildout without the need to change it in any way. The only thing you add to your buildout.cfg is:</p><pre>[buildout]<br />extends = yeoman.cfg</pre><p>The yeoman.cfg file contains the rules for building JavaScript. It contains a few parts each doing a different installation step.</p><pre>[buildout]<br />parts = <br />    node_modules<br />    bower_modules<br />    grunt_script<br />    bower_script<br />    yo_script</pre><p>The first part does the installation of selected Node modules via <b>npm</b> and will be run each time you update the buildout.</p><pre>[node_modules]<br />recipe = collective.recipe.cmd<br />on_install = true<br />on_update = true<br />cmds = NODE_PATH=\"\" npm install .; echo \"\\nNodeJS server side modules updated.\\n\"</pre><p><b>npm</b> is the standard tool to install server side (Node) JavaScript. \"<b>npm install .</b>\" will install the package at the current local directory, with all its dependencies. To make it work, we need to turn our buildout into a virtual Node package, thus enabling to specify its dependencies in a <b>package.json</b> file. Note that this file is a data configuration in JSON format, which means that generic JavaScript is not allowed in it.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"grunt\": \"&gt;=0.4\"<br />   }<br />}</pre><p>You can try to issue</p><pre><b>NODE_PATH=\"\" npm install .</b></pre><p>from the console, if you are in the buildout root, to see how this installation works. The same will be executed from <b>bin/buildout</b>, via the <b>node_modules</b> buildout rule.</p><p>A more complete <b>package.json</b> version will also install some other tools you will find useful. By adding your own package dependencies to it you can satisfy virtually all your needs. I will talk more about the usage of these tools in the upcoming parts of this post.</p><pre><br />{<br />   \"name\": \"sdidev-resources\",<br />   \"version\": \"0.1.0\",<br />   \"devDependencies\": {<br />     \"yo\": \"*\",<br />     \"grunt-cli\": \"*\",<br />     \"bower\": \"*\",<br />     \"grunt\": \"&gt;=0.4\",<br />     \"grunt-contrib-jshint\": \"*\",<br />     \"grunt-contrib-uglify\": \"*\",<br />     \"grunt-contrib-concat\": \"*\",<br />     \"grunt-contrib-less\": \"*\",<br />     \"grunt-contrib-watch\": \"*\"<br />   }<br />}</pre><h3>How it works</h3><p>The Node Package Manager provides two ways for installation: global or local. Global installation is done with the <b>-g</b> parameter. Global installation is often discouraged, partly because it usually requires admin privileges. In the solution I present here, we use no global installation, instead, a local installation is utilized. This has a few advantages for us.</p><ul><li>The installation will be local to the buildout, and isolated from the other buildouts, allowing each buildout to have its own private working set of installed packages and versions.</li><li>The <b>NODE_PATH=\"\"</b> setting in the <b>node_modules</b> buildout rule will cause your globally installed Node packages to be ignored as well, and the usage of your local installation will be enforced. <b>NODE_PATH</b> has a similar role in Node as <b>PYTHONPATH</b> in Python.</li></ul><p>This will cause all packages installed locally into the <b>node_modules</b> directory in the buildout root. You can delete <b>node_modules</b> and re-run <b>bin/buildout </b>to regenerate its contents - in the same way as it would happen if you deleted the Python <b>eggs</b> directory.</p><p>The only thing left to do is running executable applications. The following buildout rule takes care of that in case of <b>grunt</b>:</p><pre>[grunt_script]<br />recipe = collective.recipe.template<br />input = inline:<br />    #! /bin/sh<br />    export NODE_PATH=${buildout:directory}/node_modules<br />    ${buildout:directory}/node_modules/.bin/grunt $@<br />output = ${buildout:bin-directory}/grunt<br />mode = 755<br /></pre><p>This will create a <b>bin/grunt</b> executable script, which will execute <b>\"./node_modules/.bin/grunt\"</b>, the executable that npm has installed. This means that the JavaScript tools will be runnable from <b>bin/*</b> in the same way as all other buildout scripts.</p><pre>$ bin/grunt --help<br /></pre><p>Want to use even shorter commands? Make use of <b>virtualenv</b>, if you prefer so. In this case you will not even need to put the <b>bin/</b> in front of the script names. For example:</p><pre>$ source bin/activate<br />$ python2.7 bootstrap.py<br />$ buildout<br />$ grunt --help<br /></pre><h3>Summary</h3><p>In this post I showed how JavaScript <b>NodeJS</b> installation can be integrated to <b>zc.buildout</b> for a Python web application, and how this integration works. Next I will show how to use your newly installed tools for your web development project.</p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-03-20T13:05:00-04:00") (updated nil "2013-03-21T06:56:38-04:00"))) ("How I learned to stop worrying, and love Sublime Text" "<p><img class=\"image-inline\" src=\"copy_of_strangelovesublime.png\" /></p><p><a class=\"external-link\" href=\"http://www.sublimetext.com/\">Sublime Text </a>is a sophisticated text editor for code, markup and prose.</p><p>I have been a long time <a class=\"external-link\" href=\"http://www.vim.org/\">Vim</a> user, and always resisted the temptation to jump on the IDE bandwagon. Admittedly, I am a dinosaur, but it is not because of this, that I had stayed faithful to Vim just until recently. Vim has always done things the way I needed, and every time I tested a potential new editor, I realized that something was missing that I used to depend on in Vim.</p><p>So... last Christmas I started to think about what I would like to get from myself as a present, and I thought that a new editor would be nice. I started to test <b>Sublime Text 2</b>, and, surprise: I found it a very satisfactory experience.</p><p>I have a few editor features that I consider as basic. Naturally, I have my own point of view: since I am doing web application development with <a class=\"external-link\" href=\"http://python.org\"><b>Python</b></a> and <b>JavaScript</b>, some things such as tab settings or linting can be more important for me than for programmers in other languages, while for the same reason I don't care much about features related to, say, compiling.</p><p>So let's see my first experiences with Sublime! I installed it, and started to add and configure all the plugins I need for my workflow.</p><h3>Syntax coloring, correct tabbing with 4 soft spaces</h3><p>I consider correct tabbing to be basic, which means that if an editor does not have this, I would exclude it without looking for anything more. Fortunately, most good editors do this correctly, including the ability to understand the syntax of the given programming language, as it affects auto-indentation.</p><h3>Live, \"as you type\" syntax checking. linting.</h3><p>I have this feature in Vim, because it is really important to see live errors and warnings as you type, especially in JavaScript, where an excess comma can simply break all your code. I make this a basic requirement in my search. And, this works well in Sublime.</p><div></div><div id=\"_mcePaste\"></div><p>Actually, it works better for me in Sublime then on Vim. I succeeded to set this up in Vim, but since I did not follow best practices for installation and do updates rigorously, I ended up with something that was working, but never exactly matched any of my team members version. Sublime solves this problem with its package installation system.</p><h3>Editable configuration files</h3><p>This is a great one. The configuration files are editable in JSON format and they are updated in sync with the changes you make through interacting with the editor UI. For example, if you zoom in and out, and if the preferences are open, you can see the text of the configuration file updated live.</p><h3>Supports Vim keystrokes</h3><p>It knows Vim keystrokes! All you have to do is enable the Vintage module in the configuration. No more excuses for Vim users! You cannot say \"...but ...but I could do this much easier in Vim.\"</p><h3>Git support</h3><p> </p><p>Git support works through plugins, and it works well. Although, I would love to see a more powerful way of presenting diffs, similarly to VimDiff where you can see the two versions side by side.</p><p> </p><h3>Multiple cursors and selection</h3><p>This is simply awesome. It is easier to show it than to explain it:</p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/57781945\" width=\"500\"></iframe></p><h3>Code Intel</h3><p>Sublime knows where your modules are at, and you can click on a symbol any time to look up its definition. This is done by the <b>SublimeCodeIntel</b> plugin. For python code in a <a class=\"external-link\" href=\"http://buildout.org\">buildout</a>, this means that Sublime will know all your package locations, be it a core Python library module, or a locally installed package under \"src\" or \"eggs\". For buildout, I use the following section to generate the information that Sublime needs:</p><pre>[codeintel]<br />recipe = corneti.recipes.codeintel<br />eggs = ${instance:eggs}</pre><h3>Debugging Python</h3><p>Python applications are debugged with <b>pdb</b> from a console. When I am at a breakpoint, and do a listing of the code, or step up and down the trace stack, Sublime will open the source and place the cursor. Very useful. The only thing I did to install the <b>PdbSublimeTextSupport</b> python package, and save the following as a <b>.pdbrc</b> file:</p><pre>from PdbSublimeTextSupport import preloop, precmd<br />pdb.Pdb.preloop = preloop<br />pdb.Pdb.precmd = precmd</pre><h3>Autosave! Autosave!</h3><p>I leave this feature until the end. I know that it is also possible in Vim, but for some reason I have never used it. Sublime makes autosave very tempting. When you click away from the file you are editing, it will be saved. I was worried a bit that autosave can lead to accidental loss of code. But then I convinced myself, that the ability to undo, coupled with the fact that I version manage my code anyway, compensates the risk. The result? I type in my code, then I click the Reload button on my browser... and, I can see the updated version immediately! I don't really have to say how much this increases my work productivity.</p><h3>Problems?</h3><p>Not many, really. I find a few places where I would like to see improved support. For example, easier management of color schemes would be great. But altogether, Sublime Text 2 provides me with a great development experience.</p><h3>Getting help</h3><p>There is plenty of documentation on the web that explains how to configure Sublime and its plugins. I found the <a class=\"external-link\" href=\"http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/\">blog post of Mikko Ohtamaa</a> especially useful.</p><h3>Price</h3><p>Finally, a word about pricing. Sublime is not free software. A single user license for Sublime Text 2 costs $<b>70</b>. But Sublime can be downloaded and trialed for free. Unlike other software, that lock themselves down at the end of the trial period, and perhaps at the worst and most unexpected moment, Sublime will instead periodically pop up a discreet message to you, but you will be able to continue to use the software. I immediately rewarded this user friendly behavior by buying Sublime's license.</p><h3><b>Verdict</b></h3><p>Sublime Text 2 is a programmer editor that is stable, and provides most needed editor features on a high level. At the same time, it remains easily hackable, thus connecting the useful with the pleasant. It is worth to give it a try. And, if you are a Vim user, you will find the switch to Sublime extra comfortable.</p>" "http://greenfinity.hu/en/blog/how-i-learned-to-stop-worrying-and-love-sublime-text" (20744 43082) old 3 nil nil ((title nil "How I learned to stop worrying, and love Sublime Text") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/how-i-learned-to-stop-worrying-and-love-sublime-text"))) (id nil "urn:syndication:f9813a77f78b480b8d2ae5ac62b3257b") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p><img class=\"image-inline\" src=\"copy_of_strangelovesublime.png\" /></p><p><a class=\"external-link\" href=\"http://www.sublimetext.com/\">Sublime Text </a>is a sophisticated text editor for code, markup and prose.</p><p>I have been a long time <a class=\"external-link\" href=\"http://www.vim.org/\">Vim</a> user, and always resisted the temptation to jump on the IDE bandwagon. Admittedly, I am a dinosaur, but it is not because of this, that I had stayed faithful to Vim just until recently. Vim has always done things the way I needed, and every time I tested a potential new editor, I realized that something was missing that I used to depend on in Vim.</p><p>So... last Christmas I started to think about what I would like to get from myself as a present, and I thought that a new editor would be nice. I started to test <b>Sublime Text 2</b>, and, surprise: I found it a very satisfactory experience.</p><p>I have a few editor features that I consider as basic. Naturally, I have my own point of view: since I am doing web application development with <a class=\"external-link\" href=\"http://python.org\"><b>Python</b></a> and <b>JavaScript</b>, some things such as tab settings or linting can be more important for me than for programmers in other languages, while for the same reason I don't care much about features related to, say, compiling.</p><p>So let's see my first experiences with Sublime! I installed it, and started to add and configure all the plugins I need for my workflow.</p><h3>Syntax coloring, correct tabbing with 4 soft spaces</h3><p>I consider correct tabbing to be basic, which means that if an editor does not have this, I would exclude it without looking for anything more. Fortunately, most good editors do this correctly, including the ability to understand the syntax of the given programming language, as it affects auto-indentation.</p><h3>Live, \"as you type\" syntax checking. linting.</h3><p>I have this feature in Vim, because it is really important to see live errors and warnings as you type, especially in JavaScript, where an excess comma can simply break all your code. I make this a basic requirement in my search. And, this works well in Sublime.</p><div></div><div id=\"_mcePaste\"></div><p>Actually, it works better for me in Sublime then on Vim. I succeeded to set this up in Vim, but since I did not follow best practices for installation and do updates rigorously, I ended up with something that was working, but never exactly matched any of my team members version. Sublime solves this problem with its package installation system.</p><h3>Editable configuration files</h3><p>This is a great one. The configuration files are editable in JSON format and they are updated in sync with the changes you make through interacting with the editor UI. For example, if you zoom in and out, and if the preferences are open, you can see the text of the configuration file updated live.</p><h3>Supports Vim keystrokes</h3><p>It knows Vim keystrokes! All you have to do is enable the Vintage module in the configuration. No more excuses for Vim users! You cannot say \"...but ...but I could do this much easier in Vim.\"</p><h3>Git support</h3><p> </p><p>Git support works through plugins, and it works well. Although, I would love to see a more powerful way of presenting diffs, similarly to VimDiff where you can see the two versions side by side.</p><p> </p><h3>Multiple cursors and selection</h3><p>This is simply awesome. It is easier to show it than to explain it:</p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/57781945\" width=\"500\"></iframe></p><h3>Code Intel</h3><p>Sublime knows where your modules are at, and you can click on a symbol any time to look up its definition. This is done by the <b>SublimeCodeIntel</b> plugin. For python code in a <a class=\"external-link\" href=\"http://buildout.org\">buildout</a>, this means that Sublime will know all your package locations, be it a core Python library module, or a locally installed package under \"src\" or \"eggs\". For buildout, I use the following section to generate the information that Sublime needs:</p><pre>[codeintel]<br />recipe = corneti.recipes.codeintel<br />eggs = ${instance:eggs}</pre><h3>Debugging Python</h3><p>Python applications are debugged with <b>pdb</b> from a console. When I am at a breakpoint, and do a listing of the code, or step up and down the trace stack, Sublime will open the source and place the cursor. Very useful. The only thing I did to install the <b>PdbSublimeTextSupport</b> python package, and save the following as a <b>.pdbrc</b> file:</p><pre>from PdbSublimeTextSupport import preloop, precmd<br />pdb.Pdb.preloop = preloop<br />pdb.Pdb.precmd = precmd</pre><h3>Autosave! Autosave!</h3><p>I leave this feature until the end. I know that it is also possible in Vim, but for some reason I have never used it. Sublime makes autosave very tempting. When you click away from the file you are editing, it will be saved. I was worried a bit that autosave can lead to accidental loss of code. But then I convinced myself, that the ability to undo, coupled with the fact that I version manage my code anyway, compensates the risk. The result? I type in my code, then I click the Reload button on my browser... and, I can see the updated version immediately! I don't really have to say how much this increases my work productivity.</p><h3>Problems?</h3><p>Not many, really. I find a few places where I would like to see improved support. For example, easier management of color schemes would be great. But altogether, Sublime Text 2 provides me with a great development experience.</p><h3>Getting help</h3><p>There is plenty of documentation on the web that explains how to configure Sublime and its plugins. I found the <a class=\"external-link\" href=\"http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/\">blog post of Mikko Ohtamaa</a> especially useful.</p><h3>Price</h3><p>Finally, a word about pricing. Sublime is not free software. A single user license for Sublime Text 2 costs $<b>70</b>. But Sublime can be downloaded and trialed for free. Unlike other software, that lock themselves down at the end of the trial period, and perhaps at the worst and most unexpected moment, Sublime will instead periodically pop up a discreet message to you, but you will be able to continue to use the software. I immediately rewarded this user friendly behavior by buying Sublime's license.</p><h3><b>Verdict</b></h3><p>Sublime Text 2 is a programmer editor that is stable, and provides most needed editor features on a high level. At the same time, it remains easily hackable, thus connecting the useful with the pleasant. It is worth to give it a try. And, if you are a Vim user, you will find the switch to Sublime extra comfortable.</p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2013-01-29T04:55:00-05:00") (updated nil "2013-01-29T23:57:46-05:00"))) ("My daily routine of unit testing browser JavaScript" "<p>In this video presentation (targeted towards JavaScript Web Developers), I show how I use JavaScript unit testing in my everyday work.</p><p>I want to demonstrate that unit testing of JavaScript code is not <i>only</i> important for Continuous Integration - it also becomes part of the daily working routine of a software developer. If we practice unit testing it will help us to produce better quality JavaScript code.</p><p>And it's more fun, too. It makes it possible to do test driven development of web client JavaScript code.</p><p>During the screencast, I show how I use the BusterJS test runner to run the QUnit tests of the KARL application. Note that in its current unfinished state, buster-qunit requires a manual preparation of your existing QUnit tests, and once this is done, the tests will be able to run both as native QUnit, and as emulated BusterJS tests.</p><p> </p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/52322623\" width=\"500\"></iframe></p><p> </p><p> </p><h3>Interesting links:</h3><p> </p><p><strong>BusterJS</strong>: <a class=\"external-link\" href=\"http://busterjs.org\">http://busterjs.org</a></p><p>BusterJS is a JavaScript testing toolkit that allows unit testing of both in-browser and Node.js JavaScript.</p><p><strong>buster-qunit</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-qunit\">https://github.com/reebalazs/buster-qunit</a></p><p>The buster-qunit is an unreleased extension to buster.js. Even in its current unfinished state, I find it very useful, because it allows me to run the existing QUnit tests from the KARL project, with the more modern test runner of BusterJS.</p><p><strong>KARL</strong>: <a class=\"external-link\" href=\"http://karlproject.org\">http://karlproject.org</a></p><p><strong>QUnit</strong>: <a class=\"external-link\" href=\"http://qunitjs.org\">http://qunitjs.org</a></p><p><strong>buster-webui</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-webui\">https://github.com/reebalazs/buster-webui</a></p><p><strong>Jenkins</strong>:<a class=\"external-link\" href=\"http://jenkins-ci.org\"> http://jenkins-ci.org</a></p>" "http://greenfinity.hu/en/blog/my-daily-routine-of-unit-testing-browser-javascript" (20623 61133) old 4 nil nil ((title nil "My daily routine of unit testing browser JavaScript") (link ((rel . "alternate") (type . "text/html") (href . "http://greenfinity.hu/en/blog/my-daily-routine-of-unit-testing-browser-javascript"))) (id nil "urn:syndication:98cdc5cf-4613-4d5d-9a7a-79e901ede547") (content ((type . "html") (xml:base . "http://greenfinity.hu") (xml:lang . "en-US") (xml:space . "preserve")) "
          <p>In this video presentation (targeted towards JavaScript Web Developers), I show how I use JavaScript unit testing in my everyday work.</p><p>I want to demonstrate that unit testing of JavaScript code is not <i>only</i> important for Continuous Integration - it also becomes part of the daily working routine of a software developer. If we practice unit testing it will help us to produce better quality JavaScript code.</p><p>And it's more fun, too. It makes it possible to do test driven development of web client JavaScript code.</p><p>During the screencast, I show how I use the BusterJS test runner to run the QUnit tests of the KARL application. Note that in its current unfinished state, buster-qunit requires a manual preparation of your existing QUnit tests, and once this is done, the tests will be able to run both as native QUnit, and as emulated BusterJS tests.</p><p> </p><p><iframe frameborder=\"0\" height=\"281\" src=\"http://player.vimeo.com/video/52322623\" width=\"500\"></iframe></p><p> </p><p> </p><h3>Interesting links:</h3><p> </p><p><strong>BusterJS</strong>: <a class=\"external-link\" href=\"http://busterjs.org\">http://busterjs.org</a></p><p>BusterJS is a JavaScript testing toolkit that allows unit testing of both in-browser and Node.js JavaScript.</p><p><strong>buster-qunit</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-qunit\">https://github.com/reebalazs/buster-qunit</a></p><p>The buster-qunit is an unreleased extension to buster.js. Even in its current unfinished state, I find it very useful, because it allows me to run the existing QUnit tests from the KARL project, with the more modern test runner of BusterJS.</p><p><strong>KARL</strong>: <a class=\"external-link\" href=\"http://karlproject.org\">http://karlproject.org</a></p><p><strong>QUnit</strong>: <a class=\"external-link\" href=\"http://qunitjs.org\">http://qunitjs.org</a></p><p><strong>buster-webui</strong>: <a class=\"external-link\" href=\"https://github.com/reebalazs/buster-webui\">https://github.com/reebalazs/buster-webui</a></p><p><strong>Jenkins</strong>:<a class=\"external-link\" href=\"http://jenkins-ci.org\"> http://jenkins-ci.org</a></p>
          ") (author nil (name nil "Balázs Reé")) (published nil "2012-10-28T08:55:00-04:00") (updated nil "2012-10-30T11:14:21-04:00"))))