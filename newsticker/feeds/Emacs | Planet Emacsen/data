;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (20846 47074 671002) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2013-04-17T09:01:22+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html")) "Aaron Hawley: Update to big Emacs reference card") (link ((href . "http://aaronhawley.livejournal.com/28618.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:28618") (updated nil "2013-04-16T21:02:16+00:00") (content ((type . "html")) "For the first time in over 2 years, I finally got around to updating my <a href=\"http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley\" rel=\"nofollow\">giant Emacs reference card</a>.  There are now more than 1500 commands up from 1000.  It should also be consistent with the latest version of <a href=\"http://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a>.<br /><br />I transform the Wiki markup from a simple text markup using some \"quick and dirty\" Emacs Lisp.  Besides being easier to work on than Wiki markup, the source format is also printable.  The HTML version is almost 60 pages.  Using <a href=\"http://www.gnu.org/software/a2ps/\" rel=\"nofollow\">a2ps</a> on the text format it prints on 15 pieces of paper.<br /><br />It's a lot of work, but it's a good way for me to learn more about Emacs.  Hopefully, others will find it useful, too.  I suggest printing only a few sections that you would like to improve on.<br /><br />Since it is released under a bunch of free licenses, including version 2 or later of the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU GPL</a> and version 1.2 or later of the <a href=\"http://www.gnu.org/licenses/fdl.html\" rel=\"nofollow\">GNU FDL</a>, people are free to share and modify it.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Irreal: My Solution to the Elisp Challenge") (link ((href . "http://irreal.org/blog/?p=1885"))) (id nil "http://irreal.org/blog/?p=1885") (updated nil "2013-04-16T11:47:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here’s my solution to the <a href=\"http://irreal.org/blog/?p=1865\">recent Elisp challenge</a>. It’s easy to be seduced by the notion of rotating one sequence to see if it’s equal to the other. That would work but the rotation is pretty expensive and the solution is O(<i>n<sup>2</sup></i>). A simpler way is to concatenate one string with itself and then check if the other string is a substring. Here’s that solution in a nice, concise bit of Elisp: </p>
<pre class=\"src src-emacs-lisp\">(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cyclep</span> (s1 s2)
  (and (= (length s1) (length s2)) (search s1 (concat s2 s2))))
</pre>
<p> Note that the length check is necessary for more than just a speed optimization as it eliminates cases like “ab” “abc”. </p>
<p> The efficiency of the solution depends on how <code>search</code> works. If it is O(<i>n</i>) then so is <code>cyclep</code>. Sadly <code>search</code> uses a brute force method and is O(<i>n<sup>2</sup></i>). On the other hand, I remember from long ago that the Microsoft C <code>strstr</code> function, which does essentially what <code>search</code> does, was actually faster than Boyer-Moore and other fancy O(<i>n</i>) implementations. That’s because it used a machine instruction to find the first character of the substring and then just did the expected byte-by-byte check after that. The Elisp <code>search</code> function uses a similar strategy but, of course, it doesn’t use the machine instruction to accelerate finding the beginning of candidate substrings. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html")) "Bozhidar Batsov: RuboCop") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/rubocop/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/rubocop") (updated nil "2013-04-15T14:22:00+00:00") (content ((type . "html")) "<p>After I launched the
<a href=\"https://github.com/bbatsov/ruby-style-guide\">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>

<p>Today this tool is a reality - meet
<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href=\"https://github.com/bbatsov/rubocop-emacs\">rubocop.el</a> and
<a href=\"https://github.com/lunaryorn/flycheck\">flycheck</a>).</p>

<p>I’d love to see more Ruby hackers check out RuboCop!</p>

<p>I’d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop’s development and I sincerely hope many
Ruby hackers will find it useful!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/"))) (entry nil (title ((type . "html")) "Bozhidar Batsov: Emacs Redux") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/emacs-redux/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/emacs-redux") (updated nil "2013-04-15T14:10:00+00:00") (content ((type . "html")) "<p>I’ve recently launched a new blog dedicated to Emacs -
<a href=\"http://emacsredux.com/\">Emacs Redux</a>.</p>

<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>

<p>I hope you’ll like it!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "sachachua: How to present using Org-mode in Emacs") (link ((href . "http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/"))) (id nil "http://sachachua.com/blog/?p=24686") (updated nil "2013-04-15T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can do pretty much everything in Emacs, so why not give presentations too? <a href=\"http://orgmode.org\">Org-mode</a> is an extensible outliner and Swiss Army knife for the Emacs text editor. Because it’s a great way to organize information, people have written a number of packages for presenting information from Org.  </p>
<p> Here are some options for preparing and giving presentations using Org-mode, along with some guidance on what to use when. It may be a good idea to browse through the examples and create a small test presentation using the systems that catch your eye. If you choose your system before drafting your presentation, that can save you a lot of time, since the approaches differ in terms of the code you’ll need to add to your Org file. </p>
<div class=\"outline-3\" id=\"outline-container-1\">
<h3 id=\"sec-1\">Presenting outside Emacs</h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>Do you need to distribute your presentation to non-Emacs users, or do you want to minimize the risk of getting your Emacs configuration confused? You can export your presentation to a number of formats. </p>
<p> <b>Export to Beamer (LaTeX) and generate a PDF</b>: Use this if you need to distribute your presentation as a PDF. You will need to install LaTeX, which could be a bit heavy-weight. Beamer is a slide package for LaTeX, and Org can export an outline to LaTeX code. Check out <a href=\"http://orgmode.org/worg/exporters/beamer/tutorial.html\">Writing Beamer presentations in Org-mode</a> for sample screenshots and a tutorial. </p>
<p> <b>Export to HTML and use S5</b>: Light-weight browser-based slideshows are becoming more popular. They can be distributed as ZIPs or .tar.gz, or uploaded to web servers. See the section in the Org tutorials for <a href=\"http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3\">Non-Beamer Presentations: S5</a>. Here are some <a href=\"http://eschulte.github.io/org-S5/\">sample presentations</a>. </p>
<p></p></div>
<p></p></div>
<div class=\"outline-3\" id=\"outline-container-2\">
<h3 id=\"sec-2\">Presenting within Emacs</h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p> Presenting within Emacs allows you to edit your presentation, execute code, or do all sorts of other interesting things. And it doesn’t have to be plain text – Org allows you to include inline images. (Microsoft Windows users may need to install additional libraries – <a href=\"http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files\">see StackOverflow for tips</a>.) </p>
<p> There are several ways to present from Org-mode. They tend to differ on: </p>
<ul>
<li>the markup you need to add to your slides </li>
<li>the keyboard shortcuts to help you navigate between slides </li>
</ul>
<p>so you can choose the one you feel the most comfortable with. </p>
<p> <a href=\"https://github.com/rlister/org-present\">Org-present</a> is simple and defines very few keyboard shortcuts: left for previous slide, right for next slide, C-c C-= or C-c C– to adjust text size, and C-q to quit. This makes it easy to edit your presentation as you go along. You’ll need to edit your ~/.emacs file to include some code. See the documentation in org-present.el for details. </p>
<p> <a href=\"https://github.com/eschulte/epresent\">EPresent</a> is a bit more complex. It supports converting LaTeX into images, so you can embed pretty equations. The epresent keybindings include “n” for next and “p” for previous, so don’t use this if you’re planning to edit your presentation on the fly. </p>
<p> <a href=\"https://github.com/nicferrier/org-presie\">Org-presie</a> takes a different approach by showing the outline instead of focusing on just one slide. When you press SPC, the previous headline’s content is hidden, and the next one’s content is expanded. It’s good for always giving people a sense of where they are in your presentation. </p>
<p> And then sometimes you may want to write your own. For my presentation at Emacs Conference 2013, I wanted to be able to: </p>
<ul>
<li>allow me to indicate various headings as slides so that I can organize an outline of slides (why should they all have to be top-level?), </li>
<li>for each slide
<ul>
<li>automatically execute pre-written Emacs Lisp code (for animations and demonstrations!), OR </li>
<li>display images that fit the full height or width of the window, OR </li>
<li>display text if I don’t specify code or images </li>
</ul>
</li>
<li>and have globally-set keyboard shortcuts so that I can go forward, backward, or re-do a slide no matter where I am in Emacs (and with AutoHotkey, even when I’m in a non-Emacs window) </li>
</ul>
<p> You can find my code at <a href=\"https://gist.github.com/sachac/5278905\">https://gist.github.com/sachac/5278905</a> </p>
<p> Emacs and Org-mode are wonderfully customizable, so you can probably build something that works just the way you want to work. Enjoy! </p>
</div></div>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/\">How to present using Org-mode in Emacs</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Irreal: Paredit and Multiple Cursors") (link ((href . "http://irreal.org/blog/?p=1884"))) (id nil "http://irreal.org/blog/?p=1884") (updated nil "2013-04-15T11:16:01+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Brian Zwahr has an outstanding Emacs Rocks! type video up on using <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">Paredit and Multiple Cursors together</a>. This is excellent. He shows how to combine simple functions from each into a really powerful tool. Like Sveen’s masterpieces, the video is short (4:07) so there’s no reason not to enjoy it right now. </p>
<p> I really love <code>multiple cursors</code>. Ever since I first saw Sveen demonstrate them in his Web Rebels talk last year, I’ve been awed by how powerful a tool it is. Zwahr’s combining it with <code>paredit</code>, another favorite of mine, just makes both tools better. You really need to watch this video. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp") (link ((href . "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/"))) (id nil "http://keramida.wordpress.com/?p=2231") (updated nil "2013-04-13T08:43:20+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
   119 BACKUP/.emacs
    84 BACKUP/elisp/keramida-w3m.el
    90 BACKUP/elisp/keramida-keys.el
   156 BACKUP/elisp/keramida-irc.el
  5449 BACKUP/elisp/erlang.el
   892 BACKUP/elisp/fill-column-indicator.el
   344 BACKUP/elisp/keramida-erc.el
    87 BACKUP/elisp/keramida-chrome.el
    89 BACKUP/elisp/keramida-autoload.el
   141 BACKUP/elisp/keramida-ui.el
    42 BACKUP/elisp/keramida-slime.el
  1082 BACKUP/elisp/ace-jump-mode.el
     2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
   907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
    26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
   502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
    37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
   808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
   111 BACKUP/elisp/scala-mode2/scala-mode2.el
   121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
  1103 BACKUP/elisp/php-mode.el
   142 BACKUP/elisp/themes/cobalt-theme.el
   665 BACKUP/elisp/themes/zenburn-theme.el
   142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
   115 BACKUP/elisp/themes/tomorrow-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
   339 BACKUP/elisp/cmake-mode.el
    95 BACKUP/elisp/keramida-cc-extra.el
  1341 BACKUP/elisp/lua-mode.el
  2324 BACKUP/elisp/markdown-mode.el
   184 BACKUP/elisp/rcirc-notify.el
   167 BACKUP/elisp/keramida-defaults.el
   203 BACKUP/elisp/keramida-hooks.el
    43 BACKUP/elisp/keramida-lang.el
   435 BACKUP/elisp/edit-server.el
   709 BACKUP/elisp/slang-mode.el
    66 BACKUP/elisp/keramida-eshell.el
 19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
  (let ((file-forms nil))
    ;; Keep reading Lisp expressions, until we hit EOF,
    ;; and just add one entry for each toplevel form
    ;; to `file-forms'.
    (condition-case err
        (with-temp-buffer
          (insert-file file-name)
          (goto-char (point-min))
          (while (&lt; (point) (point-max))
            (let* ((expr (read (current-buffer)))
                   (form (first expr)))
              (setq file-forms (cons form file-forms)))))
      (end-of-file nil))
    (reverse file-forms)))

(defun file-forms-alist (file-name)
  (let ((forms-table (make-hash-table :test #'equal)))
    ;; Build a hash that maps form-name =&gt; count for all the
    ;; top-level forms of the `file-name' file.
    (dolist (form (file-forms-list file-name))
      (let ((form-name (format \"%s\" form)))
        (puthash form-name (1+ (gethash form-name forms-table 0))
                 forms-table)))
    ;; Convert the hash table to an alist of the form:
    ;;    ((form-name . count) (form-name-2 . count-2) ...)
    (let ((forms-alist nil))
      (maphash (lambda (form-name form-count)
                 (setq forms-alist (cons (cons form-name form-count)
                                         forms-alist)))
               forms-table)
      forms-alist)))

(progn
  (insert \"\\n\")
  (insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
  (let ((total-forms 0))
    (dolist (fc (sort (file-forms-alist \"~/.emacs\")
                      (lambda (left right)
                        (&gt; (cdr left) (cdr right)))))
      (insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
      (setq total-forms (+ total-forms (cdr fc))))
    (insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
   32 setq-default
   24 eval-after-load
   14 set-face-attribute
   14 global-set-key
    5 autoload
    4 require
    4 setq
    4 put
    3 defun
    2 when
    1 add-hook
    1 let
    1 set-display-table-slot
    1 fset
    1 tool-bar-mode
    1 scroll-bar-mode
    1 menu-bar-mode
    1 ido-mode
    1 global-hl-line-mode
    1 show-paren-mode
    1 iswitchb-mode
    1 global-font-lock-mode
    1 cua-mode
    1 column-number-mode
    1 add-to-list
    1 prefer-coding-system
  122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com"))) (entry nil (title ((type . "html")) "Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors") (link ((href . "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/"))) (id nil "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors") (updated nil "2013-04-12T19:58:00+00:00") (content ((type . "html")) "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>") (author nil (name nil "Brian Zwahr") (uri nil "http://echosa.github.com/")) (source nil (title ((type . "html")) "Category: emacs | Dev and Such") (link ((rel . "self") (href . "http://echosa.github.io/blog/categories/emacs/atom.xml"))) (id nil "http://echosa.github.com/"))) (entry nil (title ((type . "html")) "Bryan Murdock: List Foreign Keys in Your Postgresql Database") (link ((href . "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-1385815532727505725") (updated nil "2013-04-12T15:21:39+00:00") (content ((type . "html")) "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid 
  AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html")) "Raimon Grau: Running a shell command on current file") (link ((href . "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-6579520597337336421") (updated nil "2013-04-12T13:47:30+00:00") (content ((type . "html")) "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which everything is ephemeral") (link ((href . "http://technomancy.us/166"))) (id nil "tag:technomancy.us,2007:in%20which%20everything%20is%20ephemeral") (updated nil "2013-04-12T08:56:45+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a> 
  <a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
  that I'm not sure I can add much to it beyond anecdotes. From my
  own experience I've been a remote worker for all but a year and a
  half of my career and have loved it. The amount of time wasted by
  cars commuting is sobering, and the ability to start the day after
  simply crossing my back yard to the
  <a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
  lab</a> is not something I'd give up lightly. Especially with
  warmer weather coming up in Seattle the draw
  of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
  outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
  strong indeed.</p>

<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />

<p>But the thing about remote work is that it can be really
  difficult to do effectively. At my last job we were dedicated from
  the outset to making the fully-remote model work, and we were able
  to assemble a team that functioned fantastically well while
  drawing from talent all over the country. But in order to make
  this work we had to set things up so that no one operated in
  isolation. We had our daily stand-ups, but more important was
  spending the bulk of the time paired with another hacker over SSH
  and VoIP. And even when not paired, there was the understanding
  that you could easily grab someone to get a real-time review of
  whatever you were writing.</p>

<p>In order to facilitate this, we would usually set up a shared
  user on each laptop (or sometimes on an unused server sitting
  under a desk somewhere) and do the necessary port forwarding
  wrangling and public key management to ensure others could SSH in
  and join our <tt>tmux</tt> sessions. Given that it was something
  we relied on every day it wasn't particularly onerous to set things
  up, and over time the tools got a bit better.
  (<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
  a common repository for the team's pubkeys, etc.)</p>

<p>These days things are different—I'm at a company that
  embraces a remote/local mix of teams rather than being fully
  remote. While I've got co-workers who are happy to discuss and
  review code remotely, I can't assume everyone has spent the time
  to to facilitate remote collaboration if it's not an everyday tool
  for them. And when you're looking for another set of eyes on a
  problem, you need frictionless tools; otherwise you might not even
  bother asking for help. So I put
  together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>

<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
  projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
  fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
  has since unfortunately fallen into disrepair. (There's a great
  video on their splash page explaining things if you've got a
  couple minutes.) Basically you give it the name of a project you
  want to hack on and who you want to hack on it with, and it can
  preconfigure the host by checking out a copy, adding SSH public keys
  for all invited users, and running all the necessary setup scripts
  to get dependencies and user settings installed. Then everyone
  just SSHes into the machine and joins a shared tmux session, and
  it's all yours.</p>

<p>I had access to the private alpha of pair.io, but since
  billing hadn't been implemented yet I always felt a bit guilty
  whenever I launched a machine to work on since it would just rack
  up the hours in the author's Amazon account.</p>

<p>I'd been thinking what it would take to implement that kind of
  thing myself but had been dissuaded by the idea of writing a
  billing system. Whenever you're dealing with money on behalf of
  the user it can hardly be considered a for-fun project. But then I
  realized that can be neatly sidestepped simply by prompting for
  the user's AWS credentials while launching the instances. It turns
  out keeping those around in an encrypted cookie in the browser
  makes it possible to perform further operations on the user's
  behalf without getting into the harrowing business of storing
  secrets. It also means it can be done completely as free software,
  and it's not tied to myself at all—if I lose interest and
  wander off anyone else can pick it up and deploy on their own.</p>

<p>So I've gotten it to the point where I'm pretty happy with it. At
  just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
  it comes in handy streamlining things at work, but it's open for
  any remote collaborators who may find it useful in any kind
  of pairing contexts. If you run into any issues trying it out or
  have suggestions, please head over to
  the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
  issue tracker</a> and let me know.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs Conference 2013 videos") (link ((href . "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/"))) (id nil "http://sachachua.com/blog/?p=24677") (updated nil "2013-04-11T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p> 
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html")) "Ben Simon: Gotch of the Day: fcsh fails to execute") (link ((href . "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-8621941475180837146") (updated nil "2013-04-05T12:19:00+00:00") (content ((type . "html")) "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>

<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>

<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>

<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>

<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>

<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>

<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>

<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f"))) (entry nil (title ((type . "html")) "Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti") (link ((href . "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-1571512245931938946") (updated nil "2013-04-04T09:30:00+00:00") (content ((type . "html")) "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>

<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>

 

<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>

<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>

<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>

<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>

<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>

<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>

<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>

<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f"))) (entry nil (title ((type . "html")) "Julien Danjou: Hy, Lisp in Python") (link ((href . "http://julien.danjou.info/blog/2013/lisp-python-hy"))) (id nil "http://julien.danjou.info/blog/2013/lisp-python-hy") (updated nil "2013-04-03T22:01:20+00:00") (content ((type . "html")) "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>


<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>

<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>

<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses") (link ((href . "http://technomancy.us/165"))) (id nil "tag:technomancy.us,2007:in%20which%20we%20cater%20to%20those%20with%20an%20allergic%20reaction%20to%20parentheses") (updated nil "2013-04-01T20:42:59+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
  of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
  been talking about how parentheses are such a big barrier to
  adoption of Clojure these days. Apparently they're pretty
  intimidating when you're used to a language with a lot of curly
  braces and things. While I can't do anything about Clojure itself,
  I realized we could make some changes to Leiningen that would
  allow newcomers to return to the comfort of XML. My latest plugin
  is
  called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
  and it lets you write this:</p>

<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>

<p>...instead of this bewildering, unfamiliar invocation:</p>

<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
  <span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
  <span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
            <span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
  <span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
                 [slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>

<p>I know it probably won't be used by anyone who has spent much
  time with Clojure, but for newcomers hopefully this will remove
  one of the big blockers for enterprise developers trying out
  Clojure.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Verifying A GPG Signed File") (link ((href . "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html"))) (id nil "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html") (updated nil "2013-04-01T00:00:00+00:00") (content ((type . "html")) "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>

<p>This means you need to import the public key A0B0F199.</p>

<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>

<p>Now that you have received the public key, you can verify the file.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>

<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Meta_eX, mid flow") (link ((href . "http://www.flickr.com/photos/dotemacs/8604802867/"))) (id nil "tag:flickr.com,2004:/photo/8604802867") (updated nil "2013-03-31T09:09:22+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>

<p>Emacs Conf 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Meta_eX") (link ((href . "http://www.flickr.com/photos/dotemacs/8605905866/"))) (id nil "tag:flickr.com,2004:/photo/8605905866") (updated nil "2013-03-31T09:08:57+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>

<p>Emacs Conf, 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "John Sullivan: Vegan in Amsterdam?") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html"))) (id nil "http://johnsu01.livejournal.com/291720.html") (updated nil "2013-03-30T13:20:49+00:00") (content ((type . "html")) "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD") (link ((href . "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html"))) (id nil "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html") (updated nil "2013-03-28T00:00:00+00:00") (content ((type . "html")) "<p>You need to run exim as root. So edit Local/Makefile thus:</p>

<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>

<p>In your configuration file set:</p>

<pre class=\"example\">exim_user = root
exim_group = mail
</pre>

<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html"))) (entry nil (title ((type . "html")) "Julien Danjou: Announcing Climate, the OpenStack capacity leasing project") (link ((href . "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing"))) (id nil "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing") (updated nil "2013-03-25T17:49:23+00:00") (content ((type . "html")) "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
    <img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>

<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
    <img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>

<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml"))) (entry nil (title ((type . "html")) "Raimon Grau: Keyboardless programming") (link ((href . "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-8361928214155159241") (updated nil "2013-03-22T18:49:58+00:00") (content ((type . "html")) "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux") (link ((href . "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/"))) (id nil "http://keramida.wordpress.com/?p=2177") (updated nil "2013-03-22T17:26:25+00:00") (content ((type . "html") (xml:lang . "en")) "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
  echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
  sed -e 's/ /,/g'                                         \\
  ) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com"))) (entry nil (title ((type . "html")) "Emacs Life: Built-in table editor - The Org Manual") (link ((href . "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053.post-7863989595468572826") (updated nil "2013-03-22T16:37:12+00:00") (content ((type . "html")) "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />") (author nil (name nil "Steven Ness") (email nil "noreply@blogger.com") (uri nil "http://emacslife.blogspot.com/")) (source nil (title ((type . "html")) "emacs life") (link ((rel . "self") (href . "http://feeds.feedburner.com/emacslife"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053"))) (entry nil (title ((type . "html")) "Emacs-fu: editing with root-privileges -- once more") (link ((href . "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") (updated nil "2013-03-17T18:13:37+00:00") (content ((type . "html")) "<div class=\"outline-text-2\" id=\"text-1\">

<p>  
  We've already discussed editing root-owned files here a few times; it's one
  of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
  the job… the only way to overcome that seems to be to make it <i>really</i>
  easy to do the same from within my running emacs:
</p>



<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
  <span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
  (interactive)
  (<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
    (<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
      (<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
    (find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>


<p>  
  We could take it one step further still – overload the normal
  <code>(ido-)find-file</code> with a version that checks the permissions first, and if
  needed, use the above function to open it. But maybe that is <i>too</i> easy; we
  should be careful with root-owned files after all.
</p></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html")) "Rubén Berenguel: Extensibility in the Acme text editor") (link ((href . "http://www.mostlymaths.net/2013/03/extensibility-programming-acme-text-editor.html"))) (id nil "tag:blogger.com,1999:blog-13497321.post-5711027858515289357") (updated nil "2013-03-16T12:13:36+00:00") (content ((type . "html")) "<span style=\"text-align: justify;\">Text editors. You hate them or love them. Praise them with religious zeal, and attack them with the same power. I've been an emacs user for the last 8 years, getting as deep as I could without checking the source. And the past few months I have started using evil-mode in emacs, to get some taste of vim in my daily editing (mostly text objects.)</span><br /><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There's still a third contestant in editor-land, for me. It is Acme, the odd editor from Plan9 from Outer Space, the even-more-odd operating system from Bell Labs. There's no need to install Plan9 and fight against your current hardware. If you are in any kind of Unix derivative (Mac OS, Linux) you can install Plan9 from User Space, a port of most of Plan9 to work in user space (as you may guess.) Plan9 is a whole different thing from other Unix systems, and Acme is an incredibly different beast from any other editor you know.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I can start with a screenshot of it:</div><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s1600/Screen+shot+2013-03-09+at+12.01.54+AM.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"242\" src=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s400/Screen+shot+2013-03-09+at+12.01.54+AM.png\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">This is how this post looks like. You can see an adict window by the side</td></tr></tbody></table><div style=\"text-align: justify;\">This is Acme. I hope you like this shade of yellow and this shade of blue. There's no way to change it without getting into the source code and recompiling. It may be sound odd, but I kind of like it. It's refreshing. In emacs and vim it is very easy to get a beautiful colour scheme (I use solarized-dark everywhere I can,) but this means you can choose. And choosing means a decision, with pros, cons and whatever. Just screw it and pick blue and yellow.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Once you are used to it, you have to face something \"worse.\" If you come from emacs or vim this will sound just horrible. Wait for it. Everything is done with the mouse. Yes, you read that well. No keyboard shortcuts (well, there are a few, I'll get into these in a short while.) Mouse clicking, moving and chording. The likes. I know this will sound stupid, a waste of time, prone to carpal tunnel syndrome. Let me go on for a while.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim users alike like to bash any other editor in the grounds of speed. I can refactor faster than you can, is almost the motto. Watch how fast I type, thus how fast I change code. I'm one of these, I usually don't even have to think when I'm doing \"something\" in emacs or vim and changing stuff. But then again, how often I'm changing stuff?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim make easy changing what's there. Multiple-marks, text objects, quick jumps. All this is there just to make changing stuff fast. Agree? Ok, go on. If you don't, no problem. Go on anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Now the revelation: most of the time I'm writing, I'm creating new stuff, not rewriting or moving old stuff. Shocking? Watch your own coding/writing habits. Yes, I change what's in text strings (ci\", in vim) and is incredibly fast. In Acme, you can double-click after the first quotation mark (or just before the last) to select everything inside a pair of delimiters (a pity it is not smart enough to understand dollar-delimiters as used by LaTeX.) But the point is not that speed. What are you changing this string for? Did you wait to think about it or you just changed it, compiled it, checked it and went back to square one?</div><h2>Pause: the file servers</h2><div style=\"text-align: justify;\">Acme and Plan9 follow a special philosophy: in some sense, everything is a file. And most programs (I could say all, but I'm not that into Plan9 to be sure) act as file servers. Acme is just one of these: everything you can see in an Acme session is a file. For example, this text I'm writing (you saw it in the previous screenshot) has window ID 10. So...</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/      <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is the directory associated to this text</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/addr<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with an address position for text insertions</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/body<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the contents of the editing window (can't overwrite)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/ctl<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) that allows you to send commands to the window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/data<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data of the editing window (can overwrite)<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span></span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/errors<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with data spat by commands executed by this window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/event<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) where you can read/write the editing session</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/tag<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file holding the contents of the tag (the menu above)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/xdata<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data (addr bound) of the editing window</span><br /></pre><br /><div style=\"text-align: justify;\">What does this mean? It means I can write code in any language that can manipulate this text. Read this out loud: I script something, and make it work with the text I'm editing. Think about indenting, linting, type-checking, done against the working copy, not the real file. With output to a special buffer associated to the file. Extending the editor is just a matter of writing a program.</div><h2>Back into Acme</h2><div style=\"text-align: justify;\">Back into Acme. In Acme there's no GUI: text is the user interface. TUI. Every window is composed of two pieces: the text in the window (its \"body\") and a tag above it (in blue.) If you want to copy something, select it and middle-click on Snarf. Then put your cursor where you want to paste and middle-click on Paste. Done. Of course, Snarf and Paste can be anywhere. In the tag menu, in the text you are editing or even in another document. They are just words. Words that do the work. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">But the same works with shell commands. I can type date and middle-click it, to get the current date in a new buffer. Same goes with ls. Or even |md5sum to calculate the checksum of some text. Or append something to a window. For example, there's an easy way to make small queries to Wikipedia via the command line (see http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns) I wrote a script to do it, sitting in my path, so I can now type here &lt;wikiCLI.sh Acme with the cursor a few lines below this... and middle click.</div><br />Result:<br /><blockquote class=\"tr_bq\">\"Acme (\\; , the peak, zenith, prime) denotes the best of something. Acme or ACME may also refer to: Acme Corporation, a fictional company in the cartoon world of Looney Tunes, ACME Detective Agency, a fictional detective agency from the Carmen Sandiego seri\" \"es of computer games and television shows, Acme (album), the sixth album by the Jon Spencer Blues Explosion, Acme Novelty... http://en.wikipedia.org/wiki/Acme\"</blockquote><h2>On button clicking</h2><div style=\"text-align: justify;\">I use a Macbook (almost 5 years old already, and still kicking.) And as you may guess, it only has one button. So, how do I manage to use middle and right clicking with ease? Well, easy. Or almost. Pressing alt while clicking simulates middle click, command while clicking simulates right clicking (in Acme, not in general.) Easy, since alt is in the middle and command just right to it. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Problem is, chording is most awesome with a real 3-button mouse. Why? I'd rather search for wikiCLI.sh Acme (text editor) to get:</div><br /><blockquote class=\"tr_bq\">;; Truncated, retrying in TCP mode.<br />\"Acme is a text editor and graphical shell from the Plan 9 from Bell Labs operating system, designed and implemented by Rob Pike. It can use the sam command language. The design of the interface was influenced by Oberon. It is different from other editing \" \"environments in that it acts as a 9P server. A distinctive element of the user interface is mouse chording... http://en.wikipedia.org/wiki/Acme_(text_editor)\"</blockquote><br /><div style=\"text-align: justify;\">Doing so is a little more troublesome: select \"Acme (text editor)\" and select the command with the second button (to execute) finally click: clicking sends the last selection as argument 1 to the program. Doing so with a Mac trackpad is impossible: there's no way to simulate a left-click while middle-clicking. I also find there's a glitch here: there's no way to redirect the output of the command. It's either overwriting the selection of the argument, or goes to the +Errors window.</div><h2>Selections, regexes and other furry animals</h2><div style=\"text-align: justify;\">How can I select everything? :0,$ and right-click. Done. Want to replace all instances of acme for Acme? Middle click this: Edit ,s,acme,Acme,g The sam syntax is easy but... odd. The first , is to select everything, s to replace acme for Acme, g for global. Easy? Not much, but Acme is just different. And works. Edit is the command to execute an editing command, by the way.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">You can also do regex searches. Like :/interface/ or :/click[i|.]/. And you can get fancy, by doing filename:&lt;search-or-position&gt;. For example, acmescripting:/interface/ in another window would open acmescripting in the first instance of interface. And acmescripting:20 opens it, selecting line 20. As you can see, filename is implied to be current file in case of doubt. Also, this kind of referencing works nice with most compilers and linters.</div><h2>Keyboard shortcuts</h2>There are a few keyboard shortcuts, even if Acme is mouse-centric. Press Esc, and all text written since the last click is selected. In addition to this, we have the other standards:<br /><br />C-U ‚Äì&gt; Delete from cursor to start of line.<br />C-W ‚Äì&gt; Delete word before the cursor.<br />C-H ‚Äì&gt; Delete character before the cursor.<br />C-A ‚Äì&gt; Move cursor to start of the line.<br />C-E ‚Äì&gt; Move cursor to end of the line.<br /><br />Nothing more, nothing less. Minimal, isn't it?<br /><h2>Scripting power</h2><div style=\"text-align: justify;\">Finally, I want to show some scripting power of acme. I introduced the concept of the filesystem a few paragraphs ago. Now, let's see how it can be used. Let's say for example I'm an avid C programmer, and like to have code neatly indented. Well, an option is to write a script that uses the indent command line program to indent the text in the window. How? Now comes a trivial example, not written in the best way possible</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#9indent</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | indent -st | 9p write acme/$winid/data</span><br /></pre><br />First is to check which is the ID of the window. When invoking a command, its environment has it in a variable, aptly named winid. To overwrite the contents of the file, we set the addr to the whole file with the selector 1,$. We do so by piping to 9p with the command write. 9p is the middleman, allowing us to read and write files in 9P servers, like the ones acme and other Plan9 programs offer. Finally we get the body, indent it (-st is the command to use stdin in indent) and pipe it to data. Done! This indents a well-formed C file as expected.<br /><br />Add this file to your path and add 9indent to your tag. Ready to indent by middle-clicking.<br /><br />A slightly more complex example is to generate the output of a Markdown file. The code is as follows:<br /><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">format=$(9p read acme/$winid/tag)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Tag is \" $format</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Format in tag\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">case $format in</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"latex\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"latex ouput selected\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"latex\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"groff-mm\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"groff-mm output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"groff-mm\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"odf\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"odf ouput selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"odf\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"html\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"html output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    * )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>echo \"Unrecognized format, defaulting to html\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">esac</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | peg-markdown --to=$format | 9p write acme/new/body</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Wrote the html-markdowned version to a new buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">last=$(9p ls acme | sort -g | tail -n 1)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Get last created buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"clean\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"0,0\" | 9p write acme/$last/addr        </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"dot=addr\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"show\" | 9p write acme/$last/ctl    </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Moved to beginning\"</span><br /></pre><br /><div style=\"text-align: justify;\">This is slightly more complex, at least on the shell side. It checks the tag for one of the accepted formats for peg-markdown and then creates the formatted output in a new window, by writing to acme/new/body. Then I want the cursor to be at the beginning of this file, not at the end (as is the default.) It was slightly tricky, but the best way was to sort in numerical order and get the last-created window (that's this tail -n 1) then to set the address at 0,0 and set the dot (selection) at address by writing at the control file. Then the command show makes the window show the selected position: 0,0. Done! Intersped among all this is a \"clean\" command, to make this new window to close.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Here you can see a video of these scripts in a sample use (and you'll see how I miss a middle click - execute -  for a right-click - open)<br /><br /></div><div style=\"text-align: justify;\"><div style=\"text-align: center;\"><br /></div></div><div style=\"text-align: justify;\"><br /></div><h2>Dirty, Clean, Put</h2><div style=\"text-align: justify;\">A window can be dirty or clean. It is clean when the contents and the disk file are the same. It is dirty when it is being edited. The best way to know if it is dirty is if you see \"Put\" in your tag menu, just beside the vertical bar. By middle-clicking Put (or Putall in the main tag) you save this file and mark it as clean. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Also, making a window clean makes closing it quicker (middle click in Del.) Dirty windows need to be Put, or you have to Del again. </div><h2>That's all, folks (for now)</h2><div style=\"text-align: justify;\">I have yet to introduce the plumber, a mechanism that allows you to open arbitrary files (using rules) from within acme. For example, I can open pdf files by right-clicking on them (i.e. some.pdf) but instead of using page (the Plan9 image viewer) I use MacOS Preview. I was forced to do so, since page can't handle all the fonts in a LaTeX generated PDF, so for me it's useless. I'll probably write how I configured the plumber in my next Acme installment.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">In some sense, the plumber is like a system-wide, app-deep \"open\" mechanism. In Mac OS, you can \"open\" almost anything from the command line. If you open an URL, your default browser opens it, if you open an image, Preview handles it. Plumbing is like \"open 3.0\" but it is hard to manage :/<br /><br />Below you can see another video with a simpler scripting: browsing reddit from the command line, inside acme. The Python code snippet that gets Reddit data is available in this gist: <a href=\"https://gist.github.com/rberenguel/5130837\">reddi.py</a></div><br /><div style=\"text-align: center;\"></div><div class=\"blogger-post-footer\"></div>") (author nil (name nil "Rubén Berenguel") (email nil "noreply@blogger.com") (uri nil "http://www.mostlymaths.net/search/label/emacs")) (source nil (title ((type . "html")) "Mostly Maths") (subtitle ((type . "html")) "Programming for backyard gardeners, cooking for linux users, drawing for mathematicians. WTF?") (link ((rel . "self") (href . "http://www.blogger.com/feeds/13497321/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-13497321"))) (entry nil (title ((type . "html")) "Bryan Murdock: Free Verilog Simulators") (link ((href . "http://bryan-murdock.blogspot.com/2013/03/free-verilog-simulators.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-761717284478724751") (updated nil "2013-03-15T22:10:34+00:00") (content ((type . "html")) "At <a href=\"http://dvcon.org/2013_home\">DVCon 2013</a> I asked <a href=\"http://www.coolverification.com/\">JL Gray</a>'s panel if we would ever have Free tools, like the software world.  None of panelists seemed to think so, one of the panelists, a Mentor employee, scoffed, \"you get what you pay for with free tools.\"  Never mind that their (and Cadence's and Synopsys's) products are very likely developed with tools that contain millions of lines of Free software.<br />
<br />
So, to work towards answering my own question, I spent a little time and looked for Free/Open Source verilog simulators.  Here's what I found:<br />
<br />
<a href=\"https://sites.google.com/site/iverilog/\">Icarus Verilog</a><br />
<br />
<a href=\"http://sourceforge.net/projects/gplcver/\">GPL Cver</a><br />
<br />
<a href=\"http://sourceforge.net/projects/pvsim/\">PVSim Verilog Simulator</a><br />
<br />
<a href=\"http://sourceforge.net/projects/veriwell/\">VeriWell Verilog Simulator</a><br />
<br />
I have personally used Icarus and Cver before, but not very extensively.  They were usable and seemed pretty complete, for Verilog.  None of the above claim any support of SystemVerilog except for Icarus.  The Icarus developer at one point expressed abhorrence at SystemVerilog but it seems support for some parts of the language have been added.<br />
<br />
PVSim and VeriWell were new to me.  I'll give them a try, hopefully soon, and post more information.<br />
<br />
Another one that should be mentioned is <a href=\"http://www.veripool.org/wiki/verilator\">Verilator</a>.  I have downloaded and played with this one too.  It only supports synthesizable Verilog, so have fun writting a testbench.  I think the intent is for you to write your testbench in C++, so if you like that idea than this could be a good one to try too.<br />
<br />
Did I miss any?<br />
<br />
<br />
<br />") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Alex Bennée: On the death of Google Reader") (link ((href . "http://www.bennee.com/~alex/blog/2013/03/14/on-the-death-of-google-reader/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2652") (updated nil "2013-03-14T22:17:09+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can probably tell the sort of on-line company I keep from the deluge of noise on the social networks regarding Google’s decision to shut down Reader. However we shouldn’t be that surprised. In fact some companies that source content from Reader <a href=\"http://blog.feedly.com/2013/03/14/google-reader/\">have anticipated the need to collect content themselves</a>.</p>
<p>I of course will have to make a decision at some point. However I’ll not do it today like a lot of Reader users have. The rush to try out alternatives has over-whelmed some <a href=\"https://twitter.com/samuelclay\">open source based projects</a> who were quietly growing organically. I don’t envy those that have to suddenly gear up their back-end systems because an Internet behemoth gave us 2593 hours notice to sort out a replacement.</p>
<p>I’m mulling over the difference between self-hosting and having someone else do it. I’m not overly worried about going for convenience if I know I can get my data back if I need to. In fact the knowledge that you can theoretically self-host might be enough. To be fair to Google their <a href=\"http://www.dataliberation.org/\">Data Liberation</a> team made exporting all my Reader data easy.</p>
<p>Before I make a choice I need to decide what my priorities are. Currently I subscribe to 250+ RSS feeds. Obviously I don’t read every single post but I make extensive use of tags to quickly process through stuff I do need to see when I need to see it. Aside from news, blog posts, funny cat pictures I also subscribe to other data feeds like bug trackers, code repositories, and other data sources. I of course want access to all of this data at any point on one of a number of devices. This makes a web hosted solution pretty much a must. There is no point having the data on my desktop when I’m somewhere else. From my point of view I want it to be open source compatible because if the company hosting now decides it no longer wants to I’ll only have to move the data and not break my work-flow.</p>
<p>It would also be very useful if it had a public API so others can interact with the data. I don’t need the solution to be all provided by one company. It’s perfectly fine to have multiple 3rd parties sorting out the Android integration. I might even look to doing something to integrate it with my favourite editor (the name of which even my non-geek readers probably know by now). So far my experiment with moving all of IRC and IM into Emacs seems to be working well and should be a subject of another post.</p>
<p>Are you a Reader user? What are your criteria for it’s eventual replacement? Is RSS just a dying protocol or is the need to aggregate and sift through data becoming more important?</p>
<p>There may well be a much better way of solving this problem around the corner. I certainly am open to persuasion. But don’t take away my current preferred solution until I’m convinced I’m ready to switch <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html")) "Aaron Hawley: M-x in Emacs 24.3 is now in Lisp") (link ((href . "http://aaronhawley.livejournal.com/30636.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:30636") (updated nil "2013-03-12T14:14:18+00:00") (content ((type . "html")) "It didn't make the NEWS file for Emacs 24.3, but Emacs now ships with an `<kbd>M-x</kbd>' (`<code>execute-extended-command</code>') that is written in Lisp.  It is no longer written in C.  This should make it easy for users to extend and do new things with this command (execute command name at point, display prefix arguments numerically, ...) by easily redefining it.  Although, it was possible to \"advise\" the C implementation before given Emacs good advising system with `<code>defadvice</code>'.<br /><br />I had talked about <a href=\"http://aaronhawley.livejournal.com/26901.html\" rel=\"nofollow\">Coding Emacs's M-x in Lisp</a> on this blog over 3 years ago.  It was accepted in Emacs after I finally got around to <a href=\"http://lists.gnu.org/archive/html/gnu-emacs-sources/2012-03/msg00003.html\" rel=\"nofollow\">posting the code to gnu-emacs-sources</a> last year.<br /><br />Thanks to Stefan Monnier, one of the lead maintainers, for doing most of the leg work of merging these bits into Emacs.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley"))))) ("Aaron Hawley: Update to big Emacs reference card" "For the first time in over 2 years, I finally got around to updating my <a href=\"http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley\" rel=\"nofollow\">giant Emacs reference card</a>.  There are now more than 1500 commands up from 1000.  It should also be consistent with the latest version of <a href=\"http://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a>.<br /><br />I transform the Wiki markup from a simple text markup using some \"quick and dirty\" Emacs Lisp.  Besides being easier to work on than Wiki markup, the source format is also printable.  The HTML version is almost 60 pages.  Using <a href=\"http://www.gnu.org/software/a2ps/\" rel=\"nofollow\">a2ps</a> on the text format it prints on 15 pieces of paper.<br /><br />It's a lot of work, but it's a good way for me to learn more about Emacs.  Hopefully, others will find it useful, too.  I suggest printing only a few sections that you would like to improve on.<br /><br />Since it is released under a bunch of free licenses, including version 2 or later of the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU GPL</a> and version 1.2 or later of the <a href=\"http://www.gnu.org/licenses/fdl.html\" rel=\"nofollow\">GNU FDL</a>, people are free to share and modify it." "http://aaronhawley.livejournal.com/28618.html" (20845 48216) old 1 nil nil ((title ((type . "html")) "Aaron Hawley: Update to big Emacs reference card") (link ((href . "http://aaronhawley.livejournal.com/28618.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:28618") (updated nil "2013-04-16T21:02:16+00:00") (content ((type . "html")) "For the first time in over 2 years, I finally got around to updating my <a href=\"http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley\" rel=\"nofollow\">giant Emacs reference card</a>.  There are now more than 1500 commands up from 1000.  It should also be consistent with the latest version of <a href=\"http://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a>.<br /><br />I transform the Wiki markup from a simple text markup using some \"quick and dirty\" Emacs Lisp.  Besides being easier to work on than Wiki markup, the source format is also printable.  The HTML version is almost 60 pages.  Using <a href=\"http://www.gnu.org/software/a2ps/\" rel=\"nofollow\">a2ps</a> on the text format it prints on 15 pieces of paper.<br /><br />It's a lot of work, but it's a good way for me to learn more about Emacs.  Hopefully, others will find it useful, too.  I suggest printing only a few sections that you would like to improve on.<br /><br />Since it is released under a bunch of free licenses, including version 2 or later of the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU GPL</a> and version 1.2 or later of the <a href=\"http://www.gnu.org/licenses/fdl.html\" rel=\"nofollow\">GNU FDL</a>, people are free to share and modify it.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))) ("Irreal: My Solution to the Elisp Challenge" "<p>Here’s my solution to the <a href=\"http://irreal.org/blog/?p=1865\">recent Elisp challenge</a>. It’s easy to be seduced by the notion of rotating one sequence to see if it’s equal to the other. That would work but the rotation is pretty expensive and the solution is O(<i>n<sup>2</sup></i>). A simpler way is to concatenate one string with itself and then check if the other string is a substring. Here’s that solution in a nice, concise bit of Elisp: </p>
<pre class=\"src src-emacs-lisp\">(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cyclep</span> (s1 s2)
(and (= (length s1) (length s2)) (search s1 (concat s2 s2))))
</pre>
<p> Note that the length check is necessary for more than just a speed optimization as it eliminates cases like “ab” “abc”. </p>
<p> The efficiency of the solution depends on how <code>search</code> works. If it is O(<i>n</i>) then so is <code>cyclep</code>. Sadly <code>search</code> uses a brute force method and is O(<i>n<sup>2</sup></i>). On the other hand, I remember from long ago that the Microsoft C <code>strstr</code> function, which does essentially what <code>search</code> does, was actually faster than Boyer-Moore and other fancy O(<i>n</i>) implementations. That’s because it used a machine instruction to find the first character of the substring and then just did the expected byte-by-byte check after that. The Elisp <code>search</code> function uses a similar strategy but, of course, it doesn’t use the machine instruction to accelerate finding the beginning of candidate substrings. </p>" "http://irreal.org/blog/?p=1885" (20845 14900) old 2 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Irreal: My Solution to the Elisp Challenge") (link ((href . "http://irreal.org/blog/?p=1885"))) (id nil "http://irreal.org/blog/?p=1885") (updated nil "2013-04-16T11:47:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here’s my solution to the <a href=\"http://irreal.org/blog/?p=1865\">recent Elisp challenge</a>. It’s easy to be seduced by the notion of rotating one sequence to see if it’s equal to the other. That would work but the rotation is pretty expensive and the solution is O(<i>n<sup>2</sup></i>). A simpler way is to concatenate one string with itself and then check if the other string is a substring. Here’s that solution in a nice, concise bit of Elisp: </p>
<pre class=\"src src-emacs-lisp\">(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cyclep</span> (s1 s2)
  (and (= (length s1) (length s2)) (search s1 (concat s2 s2))))
</pre>
<p> Note that the length check is necessary for more than just a speed optimization as it eliminates cases like “ab” “abc”. </p>
<p> The efficiency of the solution depends on how <code>search</code> works. If it is O(<i>n</i>) then so is <code>cyclep</code>. Sadly <code>search</code> uses a brute force method and is O(<i>n<sup>2</sup></i>). On the other hand, I remember from long ago that the Microsoft C <code>strstr</code> function, which does essentially what <code>search</code> does, was actually faster than Boyer-Moore and other fancy O(<i>n</i>) implementations. That’s because it used a machine instruction to find the first character of the substring and then just did the expected byte-by-byte check after that. The Elisp <code>search</code> function uses a similar strategy but, of course, it doesn’t use the machine instruction to accelerate finding the beginning of candidate substrings. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Bozhidar Batsov: RuboCop" "<p>After I launched the
<a href=\"https://github.com/bbatsov/ruby-style-guide\">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>
<p>Today this tool is a reality - meet
<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href=\"https://github.com/bbatsov/rubocop-emacs\">rubocop.el</a> and
<a href=\"https://github.com/lunaryorn/flycheck\">flycheck</a>).</p>
<p>I’d love to see more Ruby hackers check out RuboCop!</p>
<p>I’d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop’s development and I sincerely hope many
Ruby hackers will find it useful!</p>" "http://bbatsov.github.com/articles/2013/04/15/rubocop/" (20844 3336) old 3 nil nil ((title ((type . "html")) "Bozhidar Batsov: RuboCop") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/rubocop/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/rubocop") (updated nil "2013-04-15T14:22:00+00:00") (content ((type . "html")) "<p>After I launched the
<a href=\"https://github.com/bbatsov/ruby-style-guide\">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>

<p>Today this tool is a reality - meet
<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href=\"https://github.com/bbatsov/rubocop-emacs\">rubocop.el</a> and
<a href=\"https://github.com/lunaryorn/flycheck\">flycheck</a>).</p>

<p>I’d love to see more Ruby hackers check out RuboCop!</p>

<p>I’d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop’s development and I sincerely hope many
Ruby hackers will find it useful!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("Bozhidar Batsov: Emacs Redux" "<p>I’ve recently launched a new blog dedicated to Emacs -
<a href=\"http://emacsredux.com/\">Emacs Redux</a>.</p>
<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>
<p>I hope you’ll like it!</p>" "http://bbatsov.github.com/articles/2013/04/15/emacs-redux/" (20844 2616) old 4 nil nil ((title ((type . "html")) "Bozhidar Batsov: Emacs Redux") (link ((href . "http://bbatsov.github.com/articles/2013/04/15/emacs-redux/"))) (id nil "http://bbatsov.github.com/articles/2013/04/15/emacs-redux") (updated nil "2013-04-15T14:10:00+00:00") (content ((type . "html")) "<p>I’ve recently launched a new blog dedicated to Emacs -
<a href=\"http://emacsredux.com/\">Emacs Redux</a>.</p>

<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>

<p>I hope you’ll like it!</p>") (author nil (name nil "Bozhidar Batsov") (uri nil "http://bbatsov.github.com/")) (source nil (title ((type . "html")) "Emacs @ (think)") (link ((rel . "self") (href . "http://bbatsov.github.com/emacs.xml"))) (id nil "http://bbatsov.github.com/")))) ("sachachua: How to present using Org-mode in Emacs" "<p>You can do pretty much everything in Emacs, so why not give presentations too? <a href=\"http://orgmode.org\">Org-mode</a> is an extensible outliner and Swiss Army knife for the Emacs text editor. Because it’s a great way to organize information, people have written a number of packages for presenting information from Org.  </p>
<p> Here are some options for preparing and giving presentations using Org-mode, along with some guidance on what to use when. It may be a good idea to browse through the examples and create a small test presentation using the systems that catch your eye. If you choose your system before drafting your presentation, that can save you a lot of time, since the approaches differ in terms of the code you’ll need to add to your Org file. </p>
<div class=\"outline-3\" id=\"outline-container-1\">
<h3 id=\"sec-1\">Presenting outside Emacs</h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>Do you need to distribute your presentation to non-Emacs users, or do you want to minimize the risk of getting your Emacs configuration confused? You can export your presentation to a number of formats. </p>
<p> <b>Export to Beamer (LaTeX) and generate a PDF</b>: Use this if you need to distribute your presentation as a PDF. You will need to install LaTeX, which could be a bit heavy-weight. Beamer is a slide package for LaTeX, and Org can export an outline to LaTeX code. Check out <a href=\"http://orgmode.org/worg/exporters/beamer/tutorial.html\">Writing Beamer presentations in Org-mode</a> for sample screenshots and a tutorial. </p>
<p> <b>Export to HTML and use S5</b>: Light-weight browser-based slideshows are becoming more popular. They can be distributed as ZIPs or .tar.gz, or uploaded to web servers. See the section in the Org tutorials for <a href=\"http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3\">Non-Beamer Presentations: S5</a>. Here are some <a href=\"http://eschulte.github.io/org-S5/\">sample presentations</a>. </p>
<p></p></div>
<p></p></div>
<div class=\"outline-3\" id=\"outline-container-2\">
<h3 id=\"sec-2\">Presenting within Emacs</h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p> Presenting within Emacs allows you to edit your presentation, execute code, or do all sorts of other interesting things. And it doesn’t have to be plain text – Org allows you to include inline images. (Microsoft Windows users may need to install additional libraries – <a href=\"http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files\">see StackOverflow for tips</a>.) </p>
<p> There are several ways to present from Org-mode. They tend to differ on: </p>
<ul>
<li>the markup you need to add to your slides </li>
<li>the keyboard shortcuts to help you navigate between slides </li>
</ul>
<p>so you can choose the one you feel the most comfortable with. </p>
<p> <a href=\"https://github.com/rlister/org-present\">Org-present</a> is simple and defines very few keyboard shortcuts: left for previous slide, right for next slide, C-c C-= or C-c C– to adjust text size, and C-q to quit. This makes it easy to edit your presentation as you go along. You’ll need to edit your ~/.emacs file to include some code. See the documentation in org-present.el for details. </p>
<p> <a href=\"https://github.com/eschulte/epresent\">EPresent</a> is a bit more complex. It supports converting LaTeX into images, so you can embed pretty equations. The epresent keybindings include “n” for next and “p” for previous, so don’t use this if you’re planning to edit your presentation on the fly. </p>
<p> <a href=\"https://github.com/nicferrier/org-presie\">Org-presie</a> takes a different approach by showing the outline instead of focusing on just one slide. When you press SPC, the previous headline’s content is hidden, and the next one’s content is expanded. It’s good for always giving people a sense of where they are in your presentation. </p>
<p> And then sometimes you may want to write your own. For my presentation at Emacs Conference 2013, I wanted to be able to: </p>
<ul>
<li>allow me to indicate various headings as slides so that I can organize an outline of slides (why should they all have to be top-level?), </li>
<li>for each slide
<ul>
<li>automatically execute pre-written Emacs Lisp code (for animations and demonstrations!), OR </li>
<li>display images that fit the full height or width of the window, OR </li>
<li>display text if I don’t specify code or images </li>
</ul>
</li>
<li>and have globally-set keyboard shortcuts so that I can go forward, backward, or re-do a slide no matter where I am in Emacs (and with AutoHotkey, even when I’m in a non-Emacs window) </li>
</ul>
<p> You can find my code at <a href=\"https://gist.github.com/sachac/5278905\">https://gist.github.com/sachac/5278905</a> </p>
<p> Emacs and Org-mode are wonderfully customizable, so you can probably build something that works just the way you want to work. Enjoy! </p>
</div></div>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/\">How to present using Org-mode in Emacs</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/" (20843 60352) old 5 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: How to present using Org-mode in Emacs") (link ((href . "http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/"))) (id nil "http://sachachua.com/blog/?p=24686") (updated nil "2013-04-15T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can do pretty much everything in Emacs, so why not give presentations too? <a href=\"http://orgmode.org\">Org-mode</a> is an extensible outliner and Swiss Army knife for the Emacs text editor. Because it’s a great way to organize information, people have written a number of packages for presenting information from Org.  </p>
<p> Here are some options for preparing and giving presentations using Org-mode, along with some guidance on what to use when. It may be a good idea to browse through the examples and create a small test presentation using the systems that catch your eye. If you choose your system before drafting your presentation, that can save you a lot of time, since the approaches differ in terms of the code you’ll need to add to your Org file. </p>
<div class=\"outline-3\" id=\"outline-container-1\">
<h3 id=\"sec-1\">Presenting outside Emacs</h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>Do you need to distribute your presentation to non-Emacs users, or do you want to minimize the risk of getting your Emacs configuration confused? You can export your presentation to a number of formats. </p>
<p> <b>Export to Beamer (LaTeX) and generate a PDF</b>: Use this if you need to distribute your presentation as a PDF. You will need to install LaTeX, which could be a bit heavy-weight. Beamer is a slide package for LaTeX, and Org can export an outline to LaTeX code. Check out <a href=\"http://orgmode.org/worg/exporters/beamer/tutorial.html\">Writing Beamer presentations in Org-mode</a> for sample screenshots and a tutorial. </p>
<p> <b>Export to HTML and use S5</b>: Light-weight browser-based slideshows are becoming more popular. They can be distributed as ZIPs or .tar.gz, or uploaded to web servers. See the section in the Org tutorials for <a href=\"http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3\">Non-Beamer Presentations: S5</a>. Here are some <a href=\"http://eschulte.github.io/org-S5/\">sample presentations</a>. </p>
<p></p></div>
<p></p></div>
<div class=\"outline-3\" id=\"outline-container-2\">
<h3 id=\"sec-2\">Presenting within Emacs</h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p> Presenting within Emacs allows you to edit your presentation, execute code, or do all sorts of other interesting things. And it doesn’t have to be plain text – Org allows you to include inline images. (Microsoft Windows users may need to install additional libraries – <a href=\"http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files\">see StackOverflow for tips</a>.) </p>
<p> There are several ways to present from Org-mode. They tend to differ on: </p>
<ul>
<li>the markup you need to add to your slides </li>
<li>the keyboard shortcuts to help you navigate between slides </li>
</ul>
<p>so you can choose the one you feel the most comfortable with. </p>
<p> <a href=\"https://github.com/rlister/org-present\">Org-present</a> is simple and defines very few keyboard shortcuts: left for previous slide, right for next slide, C-c C-= or C-c C– to adjust text size, and C-q to quit. This makes it easy to edit your presentation as you go along. You’ll need to edit your ~/.emacs file to include some code. See the documentation in org-present.el for details. </p>
<p> <a href=\"https://github.com/eschulte/epresent\">EPresent</a> is a bit more complex. It supports converting LaTeX into images, so you can embed pretty equations. The epresent keybindings include “n” for next and “p” for previous, so don’t use this if you’re planning to edit your presentation on the fly. </p>
<p> <a href=\"https://github.com/nicferrier/org-presie\">Org-presie</a> takes a different approach by showing the outline instead of focusing on just one slide. When you press SPC, the previous headline’s content is hidden, and the next one’s content is expanded. It’s good for always giving people a sense of where they are in your presentation. </p>
<p> And then sometimes you may want to write your own. For my presentation at Emacs Conference 2013, I wanted to be able to: </p>
<ul>
<li>allow me to indicate various headings as slides so that I can organize an outline of slides (why should they all have to be top-level?), </li>
<li>for each slide
<ul>
<li>automatically execute pre-written Emacs Lisp code (for animations and demonstrations!), OR </li>
<li>display images that fit the full height or width of the window, OR </li>
<li>display text if I don’t specify code or images </li>
</ul>
</li>
<li>and have globally-set keyboard shortcuts so that I can go forward, backward, or re-do a slide no matter where I am in Emacs (and with AutoHotkey, even when I’m in a non-Emacs window) </li>
</ul>
<p> You can find my code at <a href=\"https://gist.github.com/sachac/5278905\">https://gist.github.com/sachac/5278905</a> </p>
<p> Emacs and Org-mode are wonderfully customizable, so you can probably build something that works just the way you want to work. Enjoy! </p>
</div></div>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/\">How to present using Org-mode in Emacs</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Irreal: Paredit and Multiple Cursors" "<p>Brian Zwahr has an outstanding Emacs Rocks! type video up on using <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">Paredit and Multiple Cursors together</a>. This is excellent. He shows how to combine simple functions from each into a really powerful tool. Like Sveen’s masterpieces, the video is short (4:07) so there’s no reason not to enjoy it right now. </p>
<p> I really love <code>multiple cursors</code>. Ever since I first saw Sveen demonstrate them in his Web Rebels talk last year, I’ve been awed by how powerful a tool it is. Zwahr’s combining it with <code>paredit</code>, another favorite of mine, just makes both tools better. You really need to watch this video. </p>" "http://irreal.org/blog/?p=1884" (20843 57713) old 6 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Irreal: Paredit and Multiple Cursors") (link ((href . "http://irreal.org/blog/?p=1884"))) (id nil "http://irreal.org/blog/?p=1884") (updated nil "2013-04-15T11:16:01+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Brian Zwahr has an outstanding Emacs Rocks! type video up on using <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">Paredit and Multiple Cursors together</a>. This is excellent. He shows how to combine simple functions from each into a really powerful tool. Like Sveen’s masterpieces, the video is short (4:07) so there’s no reason not to enjoy it right now. </p>
<p> I really love <code>multiple cursors</code>. Ever since I first saw Sveen demonstrate them in his Web Rebels talk last year, I’ve been awed by how powerful a tool it is. Zwahr’s combining it with <code>paredit</code>, another favorite of mine, just makes both tools better. You really need to watch this video. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp" "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
119 BACKUP/.emacs
84 BACKUP/elisp/keramida-w3m.el
90 BACKUP/elisp/keramida-keys.el
156 BACKUP/elisp/keramida-irc.el
5449 BACKUP/elisp/erlang.el
892 BACKUP/elisp/fill-column-indicator.el
344 BACKUP/elisp/keramida-erc.el
87 BACKUP/elisp/keramida-chrome.el
89 BACKUP/elisp/keramida-autoload.el
141 BACKUP/elisp/keramida-ui.el
42 BACKUP/elisp/keramida-slime.el
1082 BACKUP/elisp/ace-jump-mode.el
2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
111 BACKUP/elisp/scala-mode2/scala-mode2.el
121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
1103 BACKUP/elisp/php-mode.el
142 BACKUP/elisp/themes/cobalt-theme.el
665 BACKUP/elisp/themes/zenburn-theme.el
142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
115 BACKUP/elisp/themes/tomorrow-theme.el
80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
339 BACKUP/elisp/cmake-mode.el
95 BACKUP/elisp/keramida-cc-extra.el
1341 BACKUP/elisp/lua-mode.el
2324 BACKUP/elisp/markdown-mode.el
184 BACKUP/elisp/rcirc-notify.el
167 BACKUP/elisp/keramida-defaults.el
203 BACKUP/elisp/keramida-hooks.el
43 BACKUP/elisp/keramida-lang.el
435 BACKUP/elisp/edit-server.el
709 BACKUP/elisp/slang-mode.el
66 BACKUP/elisp/keramida-eshell.el
19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
(let ((file-forms nil))
;; Keep reading Lisp expressions, until we hit EOF,
;; and just add one entry for each toplevel form
;; to `file-forms'.
(condition-case err
(with-temp-buffer
(insert-file file-name)
(goto-char (point-min))
(while (&lt; (point) (point-max))
(let* ((expr (read (current-buffer)))
(form (first expr)))
(setq file-forms (cons form file-forms)))))
(end-of-file nil))
(reverse file-forms)))
(defun file-forms-alist (file-name)
(let ((forms-table (make-hash-table :test #'equal)))
;; Build a hash that maps form-name =&gt; count for all the
;; top-level forms of the `file-name' file.
(dolist (form (file-forms-list file-name))
(let ((form-name (format \"%s\" form)))
(puthash form-name (1+ (gethash form-name forms-table 0))
forms-table)))
;; Convert the hash table to an alist of the form:
;;    ((form-name . count) (form-name-2 . count-2) ...)
(let ((forms-alist nil))
(maphash (lambda (form-name form-count)
(setq forms-alist (cons (cons form-name form-count)
forms-alist)))
forms-table)
forms-alist)))
(progn
(insert \"\\n\")
(insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
(let ((total-forms 0))
(dolist (fc (sort (file-forms-alist \"~/.emacs\")
(lambda (left right)
(&gt; (cdr left) (cdr right)))))
(insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
(setq total-forms (+ total-forms (cdr fc))))
(insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
32 setq-default
24 eval-after-load
14 set-face-attribute
14 global-set-key
5 autoload
4 require
4 setq
4 put
3 defun
2 when
1 add-hook
1 let
1 set-display-table-slot
1 fset
1 tool-bar-mode
1 scroll-bar-mode
1 menu-bar-mode
1 ido-mode
1 global-hl-line-mode
1 show-paren-mode
1 iswitchb-mode
1 global-font-lock-mode
1 cua-mode
1 column-number-mode
1 add-to-list
1 prefer-coding-system
122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />" "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/" (20841 6824) old 7 nil nil ((title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Speeding Up Emacs and Parsing Emacs Lisp from Emacs Lisp") (link ((href . "http://keramida.wordpress.com/2013/04/13/speeding-up-emacs-and-parsing-emacs-lisp-from-emacs-lisp/"))) (id nil "http://keramida.wordpress.com/?p=2231") (updated nil "2013-04-13T08:43:20+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I recently spent a bit of time to clean up all the cruft that my <code>~/.emacs</code> file and my <code>~/elisp</code> directory had accumulated.  I have been using a multi-file setup to configure my Emacs sessions, since at least 2008. This turned out to be a royal mess after 5+ years of patching stuff without a very clear plan or structure.  The total line-count of both my <code>~/.emacs</code> and all the <code>*.el</code> files I had imported into my <code>~/elisp</code> directory was almost 20,000 lines of code:</p>
<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\">$ wc -l BACKUP/.emacs $( find BACKUP/elisp -name '*.el')
   119 BACKUP/.emacs
    84 BACKUP/elisp/keramida-w3m.el
    90 BACKUP/elisp/keramida-keys.el
   156 BACKUP/elisp/keramida-irc.el
  5449 BACKUP/elisp/erlang.el
   892 BACKUP/elisp/fill-column-indicator.el
   344 BACKUP/elisp/keramida-erc.el
    87 BACKUP/elisp/keramida-chrome.el
    89 BACKUP/elisp/keramida-autoload.el
   141 BACKUP/elisp/keramida-ui.el
    42 BACKUP/elisp/keramida-slime.el
  1082 BACKUP/elisp/ace-jump-mode.el
     2 BACKUP/elisp/scala-mode2/scala-mode2-pkg.el
   907 BACKUP/elisp/scala-mode2/scala-mode2-indent.el
    26 BACKUP/elisp/scala-mode2/scala-mode2-lib.el
   502 BACKUP/elisp/scala-mode2/scala-mode2-fontlock.el
    37 BACKUP/elisp/scala-mode2/scala-mode2-map.el
   808 BACKUP/elisp/scala-mode2/scala-mode2-syntax.el
   111 BACKUP/elisp/scala-mode2/scala-mode2.el
   121 BACKUP/elisp/scala-mode2/scala-mode2-paragraph.el
  1103 BACKUP/elisp/php-mode.el
   142 BACKUP/elisp/themes/cobalt-theme.el
   665 BACKUP/elisp/themes/zenburn-theme.el
   142 BACKUP/elisp/themes/sublime-themes/cobalt-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-blue-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-eighties-theme.el
   115 BACKUP/elisp/themes/tomorrow-theme.el
    80 BACKUP/elisp/themes/tomorrow-night-bright-theme.el
   339 BACKUP/elisp/cmake-mode.el
    95 BACKUP/elisp/keramida-cc-extra.el
  1341 BACKUP/elisp/lua-mode.el
  2324 BACKUP/elisp/markdown-mode.el
   184 BACKUP/elisp/rcirc-notify.el
   167 BACKUP/elisp/keramida-defaults.el
   203 BACKUP/elisp/keramida-hooks.el
    43 BACKUP/elisp/keramida-lang.el
   435 BACKUP/elisp/edit-server.el
   709 BACKUP/elisp/slang-mode.el
    66 BACKUP/elisp/keramida-eshell.el
 19402 total
</pre>
<p>20,000 lines of code is far too much bloat.  It’s obvious that this was getting out of hand, especially if you consider that I had full configuration files for at least two different IRC clients (rcirc and erc) in this ever growing blob of complexity.</p>
<p>What I did was make a backup copy of everything in <code>~/BACKUP</code> and start over. This time I decided to go a different route from 2008 though.  All my configuration lives in a single file, in <code>~/.emacs</code>, and  I threw away any library from my old <code>~/elisp</code> tree which I haven’t actively used in the past few weeks. I imported the rest of them into the standard <code>user-emacs-directory</code> of modern Emacsen: at <code>~/.emacs.d/</code>.  I also started using <code>eval-after-load</code> pretty extensively, to speed up the startup of Emacs, and only configure extras <em>after</em> the related packages are loaded.  This means I could trim down the list of preloaded packages even more.</p>
<p>The result, <a href=\"https://twitter.com/keramida/status/322684039683260416\" title=\"Speeding Up Emacs!\">as I tweeted yesterday</a> was an impressive speedup of the entire startup process of Emacs.  Now it can start, load everything and print a message in approximately 0.028 seconds, which is <em>more than 53 times faster</em> than the ~1.5 seconds it required before the cleanup!</p>
<p>I suspected that the main contributor to this speedup was the increased use of <code>eval-after-load</code> forms, but what percentage of the entire file used them?</p>
<p>So I wrote a tiny bit of Emacs Lisp to <em>count</em> how many times each top-level forms appears in my new <code>~/.emacs</code> file:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(defun file-forms-list (file-name)
  (let ((file-forms nil))
    ;; Keep reading Lisp expressions, until we hit EOF,
    ;; and just add one entry for each toplevel form
    ;; to `file-forms'.
    (condition-case err
        (with-temp-buffer
          (insert-file file-name)
          (goto-char (point-min))
          (while (&lt; (point) (point-max))
            (let* ((expr (read (current-buffer)))
                   (form (first expr)))
              (setq file-forms (cons form file-forms)))))
      (end-of-file nil))
    (reverse file-forms)))

(defun file-forms-alist (file-name)
  (let ((forms-table (make-hash-table :test #'equal)))
    ;; Build a hash that maps form-name =&gt; count for all the
    ;; top-level forms of the `file-name' file.
    (dolist (form (file-forms-list file-name))
      (let ((form-name (format \"%s\" form)))
        (puthash form-name (1+ (gethash form-name forms-table 0))
                 forms-table)))
    ;; Convert the hash table to an alist of the form:
    ;;    ((form-name . count) (form-name-2 . count-2) ...)
    (let ((forms-alist nil))
      (maphash (lambda (form-name form-count)
                 (setq forms-alist (cons (cons form-name form-count)
                                         forms-alist)))
               forms-table)
      forms-alist)))

(progn
  (insert \"\\n\")
  (insert (format \"%7s %s\\n\" \"COUNT\" \"FORM-NAME\"))
  (let ((total-forms 0))
    (dolist (fc (sort (file-forms-alist \"~/.emacs\")
                      (lambda (left right)
                        (&gt; (cdr left) (cdr right)))))
      (insert (format \"%7d %s\\n\" (cdr fc) (car fc)))
      (setq total-forms (+ total-forms (cdr fc))))
    (insert (format \"%7d %s\\n\" total-forms \"TOTAL\"))))
</pre>
<p>Evaluating this in a scratch buffer shows output like this:</p>
<pre class=\"brush: plain; light: true; title: ; notranslate\">COUNT FORM-NAME
   32 setq-default
   24 eval-after-load
   14 set-face-attribute
   14 global-set-key
    5 autoload
    4 require
    4 setq
    4 put
    3 defun
    2 when
    1 add-hook
    1 let
    1 set-display-table-slot
    1 fset
    1 tool-bar-mode
    1 scroll-bar-mode
    1 menu-bar-mode
    1 ido-mode
    1 global-hl-line-mode
    1 show-paren-mode
    1 iswitchb-mode
    1 global-font-lock-mode
    1 cua-mode
    1 column-number-mode
    1 add-to-list
    1 prefer-coding-system
  122 TOTAL
</pre>
<p>This showed that I’m still using a lot of <code>setq-default</code> forms: 26.23% of the top-level forms are of this type. Some of these may still be candidates for lazy initialization, since I can see that many of them are indeed mode-specific, like these two:</p>
<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\">(setq-default diff-switches \"-u\")
(setq-default ps-font-size '(8 . 10))
</pre>
<p>But <code>eval-after-load</code> is a close second, with 19.67% of all the top-level forms.  That seems to agree with the original idea of speeding up the startup of everything by delaying package-loading and configuration until it’s actually needed.</p>
<p>10 of the remaining forms are one-off mode setting calls, like <code>(tool-bar-mode -1)</code>, so 8.2% of the total calls is probably going to stay this way for a long time. That’s probably ok though, since the list includes several features I find really useful, very very often.</p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/lisp/\">Lisp</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/programming/\">Programming</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2231/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2231/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2231&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com")))) ("Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors" "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>" "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/" (20840 26440) old 8 nil nil ((title ((type . "html")) "Dev and Such [Emacs Category]: Emacs, Paredit, and Multiple Cursors") (link ((href . "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors/"))) (id nil "http://echosa.github.com/blog/2013/04/12/emacs-paredit-multiple-cursors") (updated nil "2013-04-12T19:58:00+00:00") (content ((type . "html")) "<p>Inspired by <a href=\"http://emacsrocks.com\">Emacs Rocks</a>, I made <a href=\"http://www.youtube.com/watch?v=4wvLGJQxEjQ\">my own video</a> showing some of the power of using Emacs with paredit and multiple cursors.</p>") (author nil (name nil "Brian Zwahr") (uri nil "http://echosa.github.com/")) (source nil (title ((type . "html")) "Category: emacs | Dev and Such") (link ((rel . "self") (href . "http://echosa.github.io/blog/categories/emacs/atom.xml"))) (id nil "http://echosa.github.com/")))) ("Bryan Murdock: List Foreign Keys in Your Postgresql Database" "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
(select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
from (select conrelid,confrelid,conkey,confkey,
generate_series(1,array_upper(conkey,1)) as i
from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
(select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
from (select conrelid,confrelid,conkey,confkey,
generate_series(1,array_upper(conkey,1)) as i
from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
a.attnum = conkey and a.attrelid = conrelid
AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>" "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html" (20840 9859) old 9 nil nil ((title ((type . "html")) "Bryan Murdock: List Foreign Keys in Your Postgresql Database") (link ((href . "http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-1385815532727505725") (updated nil "2013-04-12T15:21:39+00:00") (content ((type . "html")) "<p>I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn't know where to begin to find that.  Fortunately, the internet had <a href=\"http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us\">the answer</a>, from <a href=\"https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)\">Tom Lane</a> himself actually.  Just run this query on your Postgresql database:</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid;
</pre></code><p>That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):</p><code><pre>select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = 'f') ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid 
  AND confrelid::regclass = 'my_table'::regclass AND af.attname = 'my_referenced_column';
</pre></code><p>I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)</p>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Raimon Grau: Running a shell command on current file" "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>" "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html" (20840 4210) old 10 nil nil ((title ((type . "html")) "Raimon Grau: Running a shell command on current file") (link ((href . "http://puntoblogspot.blogspot.com/2013/04/running-shell-command-on-current-file.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-6579520597337336421") (updated nil "2013-04-12T13:47:30+00:00") (content ((type . "html")) "Before being an emacs evangelist, I was a vim evangelist for a few years (next month sublime text), and one feature that I missed in emacs was having a way to reference the current file when executing a command. <br /><br />In vim, it's pretty common to run commands like <br /><br />:!gcc % <br /><br />It's pretty simple and the syntax is really easy to remember, \":\" for command mode, \"!\" to run something, and in the command \"%\" will be replaced by your filename. <br /><br />I haven't found anything similar to \"%\" for emacs, so let's write some elisp to fix it. <br /><br /><br /><pre>(<span class=\"keyword\">defun</span> <span class=\"function-name\">shell-execute</span> ()<br />  (interactive)<br />  (<span class=\"keyword\">let</span> ((file-buffer (or (buffer-file-name) <span class=\"string\">\"\"</span>))<br />        (command (read-shell-command <span class=\"string\">\"Shell command: \"</span> nil nil nil)))<br />    (shell-command (replace-regexp-in-string <span class=\"string\">\"%\"</span> file-buffer command))))<br /><br />(global-set-key (kbd <span class=\"string\">\"M-!\"</span>) 'shell-execute)<br /></pre>") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Phil Hagelberg: in which everything is ephemeral" "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a>
<a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
that I'm not sure I can add much to it beyond anecdotes. From my
own experience I've been a remote worker for all but a year and a
half of my career and have loved it. The amount of time wasted by
cars commuting is sobering, and the ability to start the day after
simply crossing my back yard to the
<a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
lab</a> is not something I'd give up lightly. Especially with
warmer weather coming up in Seattle the draw
of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
strong indeed.</p>
<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />
<p>But the thing about remote work is that it can be really
difficult to do effectively. At my last job we were dedicated from
the outset to making the fully-remote model work, and we were able
to assemble a team that functioned fantastically well while
drawing from talent all over the country. But in order to make
this work we had to set things up so that no one operated in
isolation. We had our daily stand-ups, but more important was
spending the bulk of the time paired with another hacker over SSH
and VoIP. And even when not paired, there was the understanding
that you could easily grab someone to get a real-time review of
whatever you were writing.</p>
<p>In order to facilitate this, we would usually set up a shared
user on each laptop (or sometimes on an unused server sitting
under a desk somewhere) and do the necessary port forwarding
wrangling and public key management to ensure others could SSH in
and join our <tt>tmux</tt> sessions. Given that it was something
we relied on every day it wasn't particularly onerous to set things
up, and over time the tools got a bit better.
(<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
a common repository for the team's pubkeys, etc.)</p>
<p>These days things are different—I'm at a company that
embraces a remote/local mix of teams rather than being fully
remote. While I've got co-workers who are happy to discuss and
review code remotely, I can't assume everyone has spent the time
to to facilitate remote collaboration if it's not an everyday tool
for them. And when you're looking for another set of eyes on a
problem, you need frictionless tools; otherwise you might not even
bother asking for help. So I put
together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>
<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
has since unfortunately fallen into disrepair. (There's a great
video on their splash page explaining things if you've got a
couple minutes.) Basically you give it the name of a project you
want to hack on and who you want to hack on it with, and it can
preconfigure the host by checking out a copy, adding SSH public keys
for all invited users, and running all the necessary setup scripts
to get dependencies and user settings installed. Then everyone
just SSHes into the machine and joins a shared tmux session, and
it's all yours.</p>
<p>I had access to the private alpha of pair.io, but since
billing hadn't been implemented yet I always felt a bit guilty
whenever I launched a machine to work on since it would just rack
up the hours in the author's Amazon account.</p>
<p>I'd been thinking what it would take to implement that kind of
thing myself but had been dissuaded by the idea of writing a
billing system. Whenever you're dealing with money on behalf of
the user it can hardly be considered a for-fun project. But then I
realized that can be neatly sidestepped simply by prompting for
the user's AWS credentials while launching the instances. It turns
out keeping those around in an encrypted cookie in the browser
makes it possible to perform further operations on the user's
behalf without getting into the harrowing business of storing
secrets. It also means it can be done completely as free software,
and it's not tied to myself at all—if I lose interest and
wander off anyone else can pick it up and deploy on their own.</p>
<p>So I've gotten it to the point where I'm pretty happy with it. At
just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
it comes in handy streamlining things at work, but it's open for
any remote collaborators who may find it useful in any kind
of pairing contexts. If you run into any issues trying it out or
have suggestions, please head over to
the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
issue tracker</a> and let me know.</p>" "http://technomancy.us/166" (20839 52301) old 11 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which everything is ephemeral") (link ((href . "http://technomancy.us/166"))) (id nil "tag:technomancy.us,2007:in%20which%20everything%20is%20ephemeral") (updated nil "2013-04-12T08:56:45+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>There's been enough written about the benefits
of <a href=\"http://ted.io/celebrate-remote-work.html\">remote</a> 
  <a href=\"http://sysadvent.blogspot.com/2012/12/day-15-remote-working-right-way.html\">work</a>
  that I'm not sure I can add much to it beyond anecdotes. From my
  own experience I've been a remote worker for all but a year and a
  half of my career and have loved it. The amount of time wasted by
  cars commuting is sobering, and the ability to start the day after
  simply crossing my back yard to the
  <a href=\"https://secure.flickr.com/photos/technomancy/tags/laboratory\">code
  lab</a> is not something I'd give up lightly. Especially with
  warmer weather coming up in Seattle the draw
  of <a href=\"https://secure.flickr.com/photos/technomancy/tags/remoteoffice/\">working
  outdoors</a> and at <a href=\"http://technomancy.us/156\">various coffee shops</a> is
  strong indeed.</p>

<img align=\"left\" alt=\"syme splash\" src=\"http://technomancy.us/i/syme.png\" style=\"margin-left: 0;\" />

<p>But the thing about remote work is that it can be really
  difficult to do effectively. At my last job we were dedicated from
  the outset to making the fully-remote model work, and we were able
  to assemble a team that functioned fantastically well while
  drawing from talent all over the country. But in order to make
  this work we had to set things up so that no one operated in
  isolation. We had our daily stand-ups, but more important was
  spending the bulk of the time paired with another hacker over SSH
  and VoIP. And even when not paired, there was the understanding
  that you could easily grab someone to get a real-time review of
  whatever you were writing.</p>

<p>In order to facilitate this, we would usually set up a shared
  user on each laptop (or sometimes on an unused server sitting
  under a desk somewhere) and do the necessary port forwarding
  wrangling and public key management to ensure others could SSH in
  and join our <tt>tmux</tt> sessions. Given that it was something
  we relied on every day it wasn't particularly onerous to set things
  up, and over time the tools got a bit better.
  (<a href=\"http://vagrantup.com\">Vagrant</a> to manage pairing VMs,
  a common repository for the team's pubkeys, etc.)</p>

<p>These days things are different—I'm at a company that
  embraces a remote/local mix of teams rather than being fully
  remote. While I've got co-workers who are happy to discuss and
  review code remotely, I can't assume everyone has spent the time
  to to facilitate remote collaboration if it's not an everyday tool
  for them. And when you're looking for another set of eyes on a
  problem, you need frictionless tools; otherwise you might not even
  bother asking for help. So I put
  together <a href=\"https://syme.herokuapp.com\">Syme</a>.</p>

<p>Syme sets up disposable EC2 hosts for collaborating on GitHub
  projects via <tt>ssh</tt> and <tt>tmux</tt>. The idea came from a
  fantastic site called <a href=\"https://pair.io\">pair.io</a>, which
  has since unfortunately fallen into disrepair. (There's a great
  video on their splash page explaining things if you've got a
  couple minutes.) Basically you give it the name of a project you
  want to hack on and who you want to hack on it with, and it can
  preconfigure the host by checking out a copy, adding SSH public keys
  for all invited users, and running all the necessary setup scripts
  to get dependencies and user settings installed. Then everyone
  just SSHes into the machine and joins a shared tmux session, and
  it's all yours.</p>

<p>I had access to the private alpha of pair.io, but since
  billing hadn't been implemented yet I always felt a bit guilty
  whenever I launched a machine to work on since it would just rack
  up the hours in the author's Amazon account.</p>

<p>I'd been thinking what it would take to implement that kind of
  thing myself but had been dissuaded by the idea of writing a
  billing system. Whenever you're dealing with money on behalf of
  the user it can hardly be considered a for-fun project. But then I
  realized that can be neatly sidestepped simply by prompting for
  the user's AWS credentials while launching the instances. It turns
  out keeping those around in an encrypted cookie in the browser
  makes it possible to perform further operations on the user's
  behalf without getting into the harrowing business of storing
  secrets. It also means it can be done completely as free software,
  and it's not tied to myself at all—if I lose interest and
  wander off anyone else can pick it up and deploy on their own.</p>

<p>So I've gotten it to the point where I'm pretty happy with it. At
  just a shade over 500 lines of Clojure it's quite tidy. I'm hoping
  it comes in handy streamlining things at work, but it's open for
  any remote collaborators who may find it useful in any kind
  of pairing contexts. If you run into any issues trying it out or
  have suggestions, please head over to
  the <a href=\"https://github.com/technomancy/syme/issues/new\">GitHub
  issue tracker</a> and let me know.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("sachachua: Emacs Conference 2013 videos" "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p>
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/" (20838 42432) old 12 nil nil ((title ((type . "html") (xml:lang . "en-US")) "sachachua: Emacs Conference 2013 videos") (link ((href . "http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/"))) (id nil "http://sachachua.com/blog/?p=24677") (updated nil "2013-04-11T12:00:00+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>Here are the Emacs Conference 2013 videos! <a href=\"http://j.mp/emacs2013videos\">http://j.mp/emacs2013videos</a></p>
<p> 
</p><p>Unfortunately, our keynote wasn’t livestreamed, but I managed to <a href=\"http://archive.org/details/EmacsConf201301KeynoteBySachaChuaAndJohnWiegley\">record the audio</a> so that you can hear what John Wiegley and I sound like. </p>
<p>I haven’t uploaded the Meta-eX performance because it’s a music performance. (Sam Aaron, do you want me to go ahead and post it?)</p>
<p>Sketchnotes: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/\">http://sachachua.com/blog/2013/04/emacs-conference-2013-sketchnotes-also-pdf/</a></p>
<p>More Emacs conference information: <a href=\"http://emacswiki.org/emacs/Emacs_Conference_2013\">http://emacswiki.org/emacs/Emacs_Conference_2013</a>,     <br /><a href=\"http://emacsconf.org\">http://emacsconf.org</a></p>
<p>Enjoy!</p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2013/04/emacs-conference-2013-videos/\">Emacs Conference 2013 videos</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Ben Simon: Gotch of the Day: fcsh fails to execute" "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>
<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>
<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>
<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>
<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>
<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>
<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>
<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>" "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html" (20830 49460) old 13 nil nil ((title ((type . "html")) "Ben Simon: Gotch of the Day: fcsh fails to execute") (link ((href . "http://www.blogbyben.com/2013/04/gotch-of-day-fcsh-fails-to-execute.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-8621941475180837146") (updated nil "2013-04-05T12:19:00+00:00") (content ((type . "html")) "<p>
It's been years, but I'm still using <a href=\"http://www.blogbyben.com/2008/09/flex-unix-geeks-ideal-flash-environment.html\" rel=\"nofollow\" target=\"_blank\">fcsh</a> to compile my ActionScript related apps, be they Flex or AIR based. And usually, <tt>fcsh</tt> just works. Except for recently, it has stopped executing properly.</p>

<p>
At first I thought it must be some sort of emacs glitch, where I usually run fcsh. But, opening up a generic <tt>cmd.exe</tt> gave me the following error:</p>

<pre>C:\\Users\\ben&gt;fcsh
Error loading: c:\\tools\\java\\jre7\\bin\\server\\jvm.dll
</pre>

<p>
I checked the usual suspects:</p>
<ul>
<li>The <tt>DLL</tt> above exists and I have permission to read it</li>
<li>My <tt>JAVA_HOME</tt> variable is set properly</li>
<li>I tried setting my <tt>JAVA_HOME</tt> variable to both the JDK and JRE I have installed on my computer</li>
</ul>

<p>
Finally I fired up <a rel=\"nofollow\">ProcMon</a> to try to get a sense of what <tt>fcsh.exe</tt> was actually doing.  I noticed that it was accessing a <tt>jvm.config</tt> file in the same directory as the <tt>fcsh.exe</tt> binary. That got me thinking: what if my own <tt>JAVA_HOME</tt> setting was somehow conflicting with something in there.</p>

<p>
I went ahead and unset <tt>JAVA_HOME</tt> in my system environment. To my shock, <tt>fcsh.exe</tt> went back to working.</p>

<p>
I think that's the first time in my life where having a sane value for <tt>JAVA_HOME</tt> was actually causing problems, not fixing them.</p>

<p>
By the way, I did some checking: my hypothesis about <tt>jvm.config</tt> conflicting with <tt>JAVA_HOME</tt> is totally false. I can move that file out of the way, and as long as I've got <tt>JAVA_HOME</tt> set, the <tt>fcsh</tt> doesn't work. While the hypothesis was wrong, it was indeed enough to get me to the right answer (or to a work around). I'll take it!</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")))) ("Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti" "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>
<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>
<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>
<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>
<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>
<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>
<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>
<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>
<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>
<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>" "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html" (20829 18456) old 14 nil nil ((title ((type . "html")) "Ben Simon: Two Sound Ideas: Auralization and Audio Graffiti") (link ((href . "http://www.blogbyben.com/2013/04/two-sound-ideas-auralization-and-audio.html"))) (id nil "tag:blogger.com,1999:blog-12753102.post-1571512245931938946") (updated nil "2013-04-04T09:30:00+00:00") (content ((type . "html")) "<p>
<a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Exploriment</a> pointed me to this \"song\" of the day: <a href=\"http://exploriment.blogspot.com/2013/03/sotd-uranus-uranus.html\" rel=\"nofollow\" target=\"_blank\">Uranus: NASA - Voyager Space Sounds </a>.  The idea is to map electromagnetic waves gathered by the Voyager 1 &amp; 2 probes and convert them to music. It's eerie stuff, give it a <a href=\"http://www.youtube.com/watch?v=80Ngl2RY8sA\" rel=\"nofollow\" target=\"_blank\">listen</a>.</p>

<p>From there, I found <a href=\"http://www.youtube.com/watch?v=AxEa5KdPFRw&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">this playlist</a> which has 16 or so examples of mapping data collected in space to music.  <a href=\"http://www.youtube.com/watch?v=R8Cq0ee3wrI&amp;list=PL6195D93C49E2B2AD\" rel=\"nofollow\" target=\"_blank\">One of those videos</a>, however, talks about this process of \"visualizing\" data using sound and it's definitely worth 4 minutes of your time:</p>

 

<p>
Using the right visualization, or in this case, <a href=\"http://books.google.com/books/about/Auralization.html?id=CuXF3JkTuhAC\" rel=\"nofollow\" target=\"_blank\">auralization</a> can make simplify understanding data, recognizing patterns and discovering trends. The classic example of mapping data to sound is the <a href=\"http://en.wikipedia.org/wiki/Geiger_counter\" rel=\"nofollow\" target=\"_blank\">Geiger counter</a>. Though my favorite auralization has to be the now defunct <a href=\"http://static.usenix.org/events/lisa00/gilfix/gilfix_html/\" rel=\"nofollow\" target=\"_blank\">Unix Peep Networking Monitoring Tool</a>. While I never managed to fully set this system up, the concept was brilliant. The application would map network events to sounds you hear in the great outdoors. For example:</p>

<blockquote>
Peep represents discrete events by playing a single natural sound every time the event occurs, such as a bird chirp or a woodpecker's peck. The sounds we chose are short and staccato in nature and easily distinguishable by the listener. Additionally, we noted that certain events tend to occur together and found it convenient to assign them complementary sounds. While monitoring incoming and outgoing email on our network, we noticed that the two events were often grouped together, since both types of email were usually transferred in a single session between mail servers. To better represent this coupling between incoming and outgoing email events and make the representation sound more natural, we used the sounds of two conversing birds. Thus, a flood of incoming and outgoing email sounds like a sequence of call and response, making the sound `imagery' both more faithful to our network's behavior, as well as more pleasing to the ear.
</blockquote>

<p>
Just think: you walk into your office and hear a gentle stream running, and the cicadas chirping away and you know your webserver is running fine. When you start hearing a downpour and bursts of thunder you know you better investigate to see if the mail server is getting slammed by traffic.</p>

<p>
It's a shame <tt>peep</tt> never took off. With the computer processing power we have now, just imagine what kind of eco system you could create and tasks you could monitor?</p>

<p>
On a related note, I just recently caught this story on PRX about <a href=\"http://www.prx.org/pieces/52010\" rel=\"nofollow\" target=\"_blank\">Concrete Crickets</a>. And what's a Concrete Cricket? Glad you asked:</p>

<blockquote>
New Yorkers are hearing things these days — and it is coming from the bushes.<br />
<br />
It is the sound of concrete crickets, little devices created by artist Michael Dory that play bits of music and make cricket-like sounds. Dory hides small sound devices in containers around the city, similar to the way graffiti artists spray paint their art on walls without asking anyone's consent.<br />
<br />
The crickets are just loud enough for passersby to hear. And like their namesake, the crickets stop chirping when the curious draw too close — thanks to motion sensors Dory installed in them.
</blockquote>

<p>
It's almost like reverse geocaching: the cache invites people to search for it, rather than the other way around.  As <a href=\"http://www.blogbyben.com/2012/08/photo-project-let-strangers-do-work.html\" rel=\"nofollow\" target=\"_blank\">art projects</a> go, part of me likes it very much. It's low tech, clever, and simple. A little burst of audio in the right context is going to have a huge impact. On the other hand, I could see how this sort of thing could turn into a nuisance in a hurry. Graffiti, I can be beautiful, inspiring and meaningful, or just plain corrosive.  The same could apply to aural graffiti, I suppose.</p>

<p>
Now, if you'll excuse me, I need to go listen to Uranus. (Oy, middle school potty humor - sorry, I simply couldn't resist.)
</p>") (author nil (name nil "Ben Simon") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")) (source nil (title ((type . "html")) "Ben Simon") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=cb318680d0fab4cbaec11d558af0f71f&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=cb318680d0fab4cbaec11d558af0f71f")))) ("Julien Danjou: Hy, Lisp in Python" "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>
<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>
<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>
<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>" "http://julien.danjou.info/blog/2013/lisp-python-hy" (20828 42672) old 15 nil nil ((title ((type . "html")) "Julien Danjou: Hy, Lisp in Python") (link ((href . "http://julien.danjou.info/blog/2013/lisp-python-hy"))) (id nil "http://julien.danjou.info/blog/2013/lisp-python-hy") (updated nil "2013-04-03T22:01:20+00:00") (content ((type . "html")) "<p>I've meant to look at <a href=\"http://github.com/paultag/hy\">Hy</a> since
<a href=\"http://http://blog.pault.ag/\">Paul Tagliamonte</a> started to talk to me about
it, but never took a chance until now.
Yesterday, Paul indicated it was a good time for me to start looking at it,
so I spent a few hours playing.</p>
<h1>But what's Hy?</h1>
<p>Python is very nice: it has a great community and a wide range of useful
libraries. But let's face it, it misses a great language.</p>
<p>Hy is an implementation of a
<a href=\"http://en.wikipedia.org/wiki/Lisp_(programming_language)\">Lisp</a> on top of
Python.</p>
<p>Technically, Hy is built directly with a custom made parser (for now) which
then translates expressions using the
<a href=\"http://docs.python.org/2/library/ast.html\">Python AST</a> module to generate
code, which is then run by Python. Therefore, it shares the same properties
as Python, and is a Lisp-1 (i.e. with a single namespace for symbols and
functions).</p>
<p>If you're interested to listen Paul talking about Hy during last PyCon US, I
recommend watching his lightning talk. As the name implies, it's only a few
minutes long.</p>


<h1>Does it work?</h1>
<p>I've been cloning the code and played around a bit with Hy. And to my
greatest surprise and pleasure, it works quite well. You can imagine writing
Python from there easily. Part of the syntax smells like
<a href=\"http://clojure.org\">Clojure</a>'s, which looks like a good thing since they're
playing in the same area.</p>
<p>You can try a <a href=\"http://hy.pault.ag/\">Hy REPL</a> in your Web browser if you
want.</p>
<p>Here's what some code look like:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"nv\">requests</span><span class=\"p\">)</span><br /> <br /><span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">req</span> <span class=\"p\">(</span><span class=\"nf\">requests.get</span> <span class=\"s\">\"http://hy.pault.ag\"</span><span class=\"p\">))</span><br /><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">req.status_code</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />  <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">(</span><span class=\"nf\">kv</span> <span class=\"p\">(</span><span class=\"nf\">.iteritems</span> <span class=\"nv\">req.headers</span><span class=\"p\">))</span><br />    <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"nv\">kv</span><span class=\"p\">))</span><br />  <span class=\"p\">(</span><span class=\"nf\">throw</span> <span class=\"p\">(</span><span class=\"nf\">Exception</span> <span class=\"s\">\"Wrong status code\"</span><span class=\"p\">)))</span><br /></pre></div>

<p><br />
This code would ouput:</p>
<pre>('date', 'Wed, 03 Apr 2013 12:09:23 GMT')
('connection', 'keep-alive')
('content-encoding', 'gzip')
('transfer-encoding', 'chunked')
('content-type', 'text/html; charset=utf-8')
('server', 'nginx/1.2.6')
</pre>

<p>As you can see, it's really simple to write Lispy code that really uses
Python idioms.</p>
<p>There's obviously still a lots of missing features in Hy. The language if
far from complete and many parts are moving, but it's really promising, and
Paul's doing a great job implementing every idea.</p>
<p><img class=\"illustration shadow rounded\" src=\"http://julien.danjou.info/media/images/hy-photo.jpg\" /></p>
<p>I actually started to hack a bit on Hy, and will try to continue to do so,
since I'm really eager to learn a bit more about both Lisp and Python
internals in the process. I've already send a few patches on small bugs I've
encountered, and proposed a few ideas. It's really exciting to be able to
influence early a language design that I'll love to use! Being a recent fan
of Common Lisp, I tend to grab the good stuff from it to add them into Hy.</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses" "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
been talking about how parentheses are such a big barrier to
adoption of Clojure these days. Apparently they're pretty
intimidating when you're used to a language with a lot of curly
braces and things. While I can't do anything about Clojure itself,
I realized we could make some changes to Leiningen that would
allow newcomers to return to the comfort of XML. My latest plugin
is
called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
and it lets you write this:</p>
<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>
<p>...instead of this bewildering, unfamiliar invocation:</p>
<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
<span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
<span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
<span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
<span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
[slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>
<p>I know it probably won't be used by anyone who has spent much
time with Clojure, but for newcomers hopefully this will remove
one of the big blockers for enterprise developers trying out
Clojure.</p>" "http://technomancy.us/165" (20825 61779) old 16 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which we cater to those with an allergic reaction to parentheses") (link ((href . "http://technomancy.us/165"))) (id nil "tag:technomancy.us,2007:in%20which%20we%20cater%20to%20those%20with%20an%20allergic%20reaction%20to%20parentheses") (updated nil "2013-04-01T20:42:59+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p><a href=\"https://groups.google.com/group/clojure/browse_thread/thread/1d97dff96dbc5430\">A</a> <a href=\"https://gist.github.com/headius/5285216\">lot</a>
  of <a href=\"http://www.smbc-comics.com/?id=2491\">people</a> have
  been talking about how parentheses are such a big barrier to
  adoption of Clojure these days. Apparently they're pretty
  intimidating when you're used to a language with a lot of curly
  braces and things. While I can't do anything about Clojure itself,
  I realized we could make some changes to Leiningen that would
  allow newcomers to return to the comfort of XML. My latest plugin
  is
  called <a href=\"https://github.com/technomancy/lein-xml\">lein-xml</a>,
  and it lets you write this:</p>

<pre class=\"code\"><span class=\"nxml-processing-instruction-delimiter\">&lt;?</span><span class=\"nxml-processing-instruction-target\">xml</span> <span class=\"nxml-attribute-local-name\">version</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">1.0</span><span class=\"nxml-attribute-value-delimiter\">\"</span> <span class=\"nxml-attribute-local-name\">encoding</span>=<span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-attribute-value\">UTF-8</span><span class=\"nxml-attribute-value-delimiter\">\"</span><span class=\"nxml-processing-instruction-delimiter\">?&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.leiningen</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">sample</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">0.1.0-SNAPSHOT</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Just some kind of sample thing</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">description</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">https://github.com/technomancy/lein-xml</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">Eclipse Public License</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">name</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">http://www.eclipse.org/legal/epl-v10.html</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">url</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">license</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">licenses</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">org.clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">clojure</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.5.1</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">groupId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">slamhound</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">artifactId</span><span class=\"nxml-tag-delimiter\">&gt;</span>
      <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span><span class=\"nxml-text\">1.3.3</span><span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">version</span><span class=\"nxml-tag-delimiter\">&gt;</span>
    <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependency</span><span class=\"nxml-tag-delimiter\">&gt;</span>
  <span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">dependencies</span><span class=\"nxml-tag-delimiter\">&gt;</span>
<span class=\"nxml-tag-delimiter\">&lt;</span><span class=\"nxml-tag-slash\">/</span><span class=\"nxml-element-local-name\">project</span><span class=\"nxml-tag-delimiter\">&gt;</span></pre>

<p>...instead of this bewildering, unfamiliar invocation:</p>

<pre class=\"code\"><span class=\"esk-paren\"><span class=\"hl-line\">(</span></span><span class=\"keyword\"><span class=\"hl-line\">defproject</span></span><span class=\"hl-line\"> </span><span class=\"function-name\"><span class=\"hl-line\">org.leiningen/sample</span></span><span class=\"hl-line\"> </span><span class=\"string\"><span class=\"hl-line\">\"0.1.0-SNAPSHOT\"</span></span><span class=\"hl-line\">
</span>  <span class=\"constant\">:description</span> <span class=\"string\">\"Just some kind of sample thing\"</span>
  <span class=\"constant\">:url</span> <span class=\"string\">\"https://github.com/technomancy/lein-xml\"</span>
  <span class=\"constant\">:license</span> {<span class=\"constant\">:name</span> <span class=\"string\">\"Eclipse Public License\"</span>
            <span class=\"constant\">:url</span> <span class=\"string\">\"http://www.eclipse.org/legal/epl-v10.html\"</span>}
  <span class=\"constant\">:dependencies</span> [[org.clojure/clojure <span class=\"string\">\"1.5.1\"</span>]
                 [slamhound <span class=\"string\">\"1.3.3\"</span>]]<span class=\"esk-paren\">)</span></pre>

<p>I know it probably won't be used by anyone who has spent much
  time with Clojure, but for newcomers hopefully this will remove
  one of the big blockers for enterprise developers trying out
  Clojure.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("Ivan Kanis: Verifying A GPG Signed File" "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>
<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>
<p>This means you need to import the public key A0B0F199.</p>
<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>
<p>Now that you have received the public key, you can verify the file.</p>
<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>
<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>" "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html" (20824 52736) old 17 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Verifying A GPG Signed File") (link ((href . "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html"))) (id nil "http://ivan.kanis.fr/verifying-a-gpg-signed-file.html") (updated nil "2013-04-01T00:00:00+00:00") (content ((type . "html")) "<p>For some reason searching the Internet didn't me help much. So here
are the steps to verify the integrity of a file you have downloaded on
the Internet.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Can't check signature: No public key
</pre>

<p>This means you need to import the public key A0B0F199.</p>

<pre class=\"example\">      gpg --recv-keys A0B0F199
gpg: requesting key A0B0F199 from hkp server keys.gnupg.net
gpg: key A0B0F199: public key \"Glenn Morris &lt;rgm@gnu.org&gt;\" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
</pre>

<p>Now that you have received the public key, you can verify the file.</p>

<pre class=\"example\">      gpg --verify-files emacs-24.3.tar.gz.sig
gpg: Signature made Mon Mar 11 03:04:35 2013 CET using RSA key ID A0B0F199
gpg: Good signature from \"Glenn Morris &lt;rgm@gnu.org&gt;\"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: B294 26DE FB07 724C 3C35  E5D3 6592 E9A3 A0B0 F199
</pre>

<p>The file is good. The warning just means you haven't met Glenn in
person for a key exchange. It is very unlikely that the file you have
downloaded is infected.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Flickr tag 'emacs': Meta_eX, mid flow" "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>
<p>Emacs Conf 30th March 2013</p>" "http://www.flickr.com/photos/dotemacs/8604802867/" (20823 64834) old 18 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Meta_eX, mid flow") (link ((href . "http://www.flickr.com/photos/dotemacs/8604802867/"))) (id nil "tag:flickr.com,2004:/photo/8604802867") (updated nil "2013-03-31T09:09:22+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8604802867/\" title=\"Meta_eX, mid flow\"><img alt=\"Meta_eX, mid flow\" height=\"240\" src=\"http://farm9.staticflickr.com/8545/8604802867_9d2a7da837_m.jpg\" width=\"180\" /></a></p>

<p>Emacs Conf 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Flickr tag 'emacs': Meta_eX" "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>
<p>Emacs Conf, 30th March 2013</p>" "http://www.flickr.com/photos/dotemacs/8605905866/" (20823 64809) old 19 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Meta_eX") (link ((href . "http://www.flickr.com/photos/dotemacs/8605905866/"))) (id nil "tag:flickr.com,2004:/photo/8605905866") (updated nil "2013-03-31T09:08:57+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/dotemacs/\">dotemacs</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/dotemacs/8605905866/\" title=\"Meta_eX\"><img alt=\"Meta_eX\" height=\"180\" src=\"http://farm9.staticflickr.com/8114/8605905866_bd8f1ccda7_m.jpg\" width=\"240\" /></a></p>

<p>Emacs Conf, 30th March 2013</p>") (author nil (name nil "dotemacs") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("John Sullivan: Vegan in Amsterdam?" "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />" "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html" (20822 59057) old 20 nil nil ((title ((type . "html")) "John Sullivan: Vegan in Amsterdam?") (link ((href . "http://feedproxy.google.com/~r/wjsullivan/~3/eyEeHvFN8UA/291720.html"))) (id nil "http://johnsu01.livejournal.com/291720.html") (updated nil "2013-03-30T13:20:49+00:00") (content ((type . "html")) "<p>
I'll be traveling to Amsterdam next week for a free software conference. Does anyone have recommendations for restaurants that are vegan-friendly? Natural food stores? I'll be staying very near the Central Station.
</p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/wjsullivan/~4/eyEeHvFN8UA\" width=\"1\" />") (author nil (name nil "John Sullivan") (uri nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")) (source nil (title ((type . "html")) "John Sullivan's Emacs and free software blog posts") (subtitle ((type . "html")) "Pipes Output") (link ((rel . "self") (href . "http://pipes.yahoo.com/pipes/pipe.run?_id=FiExI4MS3RG8VVYcM1rX_Q&_render=rss"))) (id nil "http://pipes.yahoo.com/pipes/pipe.info?_id=FiExI4MS3RG8VVYcM1rX_Q")))) ("Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD" "<p>You need to run exim as root. So edit Local/Makefile thus:</p>
<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>
<p>In your configuration file set:</p>
<pre class=\"example\">exim_user = root
exim_group = mail
</pre>
<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>" "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html" (20819 34816) old 21 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Ivan Kanis: Exim Authenticate With Pam Library On FreeBSD") (link ((href . "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html"))) (id nil "http://ivan.kanis.fr/exim-authenticate-with-pam-library-on-freebsd.html") (updated nil "2013-03-28T00:00:00+00:00") (content ((type . "html")) "<p>You need to run exim as root. So edit Local/Makefile thus:</p>

<pre class=\"example\">EXIM_USER=mailnull
# FIXED_NEVER_USERS=root (comment out)
</pre>

<p>In your configuration file set:</p>

<pre class=\"example\">exim_user = root
exim_group = mail
</pre>

<p>And, hey presto, it works! I hope it will save you the many hours it
took me to figure it out.</p>") (author nil (name nil "Ivan Kanis") (uri nil "http://ivan.kanis.fr/blog.html")) (source nil (title ((type . "html")) "Ivan Kanis blog") (link ((rel . "self") (href . "http://kanis.fr/blog-emacs.xml"))) (id nil "http://ivan.kanis.fr/blog.html")))) ("Julien Danjou: Announcing Climate, the OpenStack capacity leasing project" "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
<img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>
<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
<img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>
<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>" "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing" (20816 36387) old 22 nil nil ((title ((type . "html")) "Julien Danjou: Announcing Climate, the OpenStack capacity leasing project") (link ((href . "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing"))) (id nil "http://julien.danjou.info/blog/2013/openstack-climate-capacity-leasing") (updated nil "2013-03-25T17:49:23+00:00") (content ((type . "html")) "<p>While working on the <a href=\"http://xlcloud.org/bin/view/Main/\">XLcloud project</a>
(HPC on cloud) it appeared clear to us that OpenStack was missing a critical
component towards resource reservations.</p>
<div class=\"pull-left\">
    <img src=\"http://julien.danjou.info/media/images/calendar-reservation.jpg\" width=\"120\" />
</div>

<p>A capacity leasing service is something really needed by service providers,
especially in the context of cloud platforms dedicated to HPC style
workload. Instead of building something really specific, the decision has
been made to build a new standalone OpenStack components aiming to provide
this kind of functionnality to OpenStack. In the spirit of others OpenStack
components, it will be extensible to fullfil a large panel of needs around
this problematic.</p>
<div class=\"pull-right\">
    <img src=\"http://julien.danjou.info/media/images/projects/openstack.png\" width=\"80\" />
</div>

<p>The project is named <a href=\"http://launchpad.net/climate\">Climate</a>, and is hosted
on <a href=\"http://ci.openstack.org/stackforge.html\">StackForge</a>. It will follow the
standard OpenStack development modal. This service will be able to handle a
calendar of reservations for various resources, based on various criteria.</p>
<p>The project is still at its early design stage, and we plan to have a
unconference session during
<a href=\"http://www.openstack.org/summit/portland-2013/\">the next OpenStack summit in Portland</a>
to present our plans and ideas for the future!</p>") (author nil (name nil "Julien Danjou") (uri nil "http://julien.danjou.info/blog/")) (source nil (title ((type . "html")) "jd:/dev/blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.xml")))) ("Raimon Grau: Keyboardless programming" "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />" "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html" (20812 42966) old 23 nil nil ((title ((type . "html")) "Raimon Grau: Keyboardless programming") (link ((href . "http://puntoblogspot.blogspot.com/2013/03/keyboardless-programming.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-8361928214155159241") (updated nil "2013-03-22T18:49:58+00:00") (content ((type . "html")) "Emacs + Dragon + Duct Tape.<br />My impression after seeing this amazing talk from PyCon 2013 by Tavis Rudd was a big \"WOW\"!<br />Actually, when you see it, you'll shit bricks.<br />Can your editor do this?<br />Sublime, really(?). (pun intended)<br /><br /><br /><br />") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux" "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
sed -e 's/ /,/g'                                         \\
) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />" "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/" (20812 37953) old 24 nil nil ((title ((type . "html") (xml:lang . "en")) "Giorgos Keramidas: Fixing Shifted-Arrow Keys in 256-Color Terminals on Linux") (link ((href . "http://keramida.wordpress.com/2013/03/22/linux-xterm-256color-terminfo/"))) (id nil "http://keramida.wordpress.com/?p=2177") (updated nil "2013-03-22T17:26:25+00:00") (content ((type . "html") (xml:lang . "en")) "<p>The terminfo entry for “<code>xterm-256color</code>” that ships by default as part of <em>ncurses-base</em> on Debian Linux and its derivatives is a bit annoying. In particular, shifted up-arrow key presses work fine in some programs, but fail in others. It’s a bit of a gamble if <code>Shift-Up</code> works in joe, pico, vim, emacs, mutt, slrn, or what have you.</p>
<p>THis afternoon I got bored enough of losing my selected region in Emacs, because I forgot that I was typing in a terminal launched by a Linux desktop.  SO I thought “what the heck… let’s give the FreeBSD termcap entry for xterm-256color a try”:</p>
<pre>keramida&gt; <strong>scp bsd:/etc/termcap /tmp/termcap-bsd</strong>
keramida&gt; <strong>captoinfo -e $(                                  \\
  echo $( grep '^xterm' termcap | sed -e 's/[:|].*//' ) |  \\
  sed -e 's/ /,/g'                                         \\
  ) /tmp/termcap  &gt; /tmp/terminfo.src</strong>
keramida&gt; <strong>tic /tmp/terminfo.src</strong></pre>
<p>Restarted my terminal, and quite unsurprisingly, the problem of <code>Shift-Up</code> keys was gone.</p>
<p>The broken <code>xterm-256color</code> terminfo entry from <code>/lib/terminfo/x/xterm-256color</code> is now shadowed by <code>~/.terminfo/x/xterm-256color</code>, and I can happily keep typing without having to worry about losing mental state because of this annoying little misfeature of Linux terminfo entries.</p>
<p>The official terminfo database sources[1], also work fine.  So now I think some extra digging is required to see what <em>ncurses-base</em> ships with.  There’s definitely something broken in the terminfo entry of <em>ncurses-base</em>, but it will be nice to know which terminal capabilities the Linux package botched.</p>
<p><strong>Notes:</strong><br />
[1] <a href=\"http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo\" title=\"Official terminfo database sources\">http://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo</a></p>
<br />Filed under: <a href=\"http://keramida.wordpress.com/category/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/category/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/category/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/category/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/category/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/category/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/category/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/category/software/\">Software</a> Tagged: <a href=\"http://keramida.wordpress.com/tag/computers/\">Computers</a>, <a href=\"http://keramida.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://keramida.wordpress.com/tag/free-software/\">Free software</a>, <a href=\"http://keramida.wordpress.com/tag/freebsd/\">FreeBSD</a>, <a href=\"http://keramida.wordpress.com/tag/gnulinux/\">GNU/Linux</a>, <a href=\"http://keramida.wordpress.com/tag/linux/\">Linux</a>, <a href=\"http://keramida.wordpress.com/tag/open-source/\">Open source</a>, <a href=\"http://keramida.wordpress.com/tag/software/\">Software</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/keramida.wordpress.com/2177/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/keramida.wordpress.com/2177/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=keramida.wordpress.com&amp;blog=118304&amp;post=2177&amp;subd=keramida&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "keramida") (uri nil "http://keramida.wordpress.com")) (source nil (title ((type . "html")) "What keramida said... » Emacs") (link ((rel . "self") (href . "http://keramida.wordpress.com/category/emacs/feed/"))) (id nil "http://keramida.wordpress.com")))) ("Emacs Life: Built-in table editor - The Org Manual" "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />" "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html" (20812 35000) old 25 nil nil ((title ((type . "html")) "Emacs Life: Built-in table editor - The Org Manual") (link ((href . "http://feedproxy.google.com/~r/emacslife/~3/Fd-6AYTh2yU/built-in-table-editor-org-manual.html"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053.post-7863989595468572826") (updated nil "2013-03-22T16:37:12+00:00") (content ((type . "html")) "<a href=\"http://www.gnu.org/software/emacs/manual/html_node/org/Built_002din-table-editor.html\">Built-in table editor - The Org Manual</a>: \"C-c ^     (org-table-sort-lines)<br />
Sort the table lines in the region. The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table. If point is before the first column, you will be prompted for the sorting column. If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting. The command prompts for the sorting type (alphabetically, numerically, or by time). When called with a prefix argument, alphabetic sorting will be case-sensitive. <br />
\"<br />
<br />") (author nil (name nil "Steven Ness") (email nil "noreply@blogger.com") (uri nil "http://emacslife.blogspot.com/")) (source nil (title ((type . "html")) "emacs life") (link ((rel . "self") (href . "http://feeds.feedburner.com/emacslife"))) (id nil "tag:blogger.com,1999:blog-5967671474525843053")))) ("Emacs-fu: editing with root-privileges -- once more" "<div class=\"outline-text-2\" id=\"text-1\">
<p>
We've already discussed editing root-owned files here a few times; it's one
of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
the job… the only way to overcome that seems to be to make it <i>really</i>
easy to do the same from within my running emacs:
</p>
<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
<span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
(interactive)
(<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
(<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
(<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
(find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>
<p>
We could take it one step further still – overload the normal
<code>(ido-)find-file</code> with a version that checks the permissions first, and if
needed, use the above function to open it. But maybe that is <i>too</i> easy; we
should be careful with root-owned files after all.
</p></div>" "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html" (20806 2001) old 26 nil nil ((title ((type . "html")) "Emacs-fu: editing with root-privileges -- once more") (link ((href . "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") (updated nil "2013-03-17T18:13:37+00:00") (content ((type . "html")) "<div class=\"outline-text-2\" id=\"text-1\">

<p>  
  We've already discussed editing root-owned files here a few times; it's one
  of those tasks where in a reflex I still open a terminal and use <code>vi</code> to do
  the job… the only way to overcome that seems to be to make it <i>really</i>
  easy to do the same from within my running emacs:
</p>



<pre class=\"src src-elisp\">  (<span style=\"color: #bc8383; font-weight: bold;\">defun</span> <span style=\"color: #8fb28f; font-weight: bold;\">djcb-find-file-as-root</span> ()
  <span style=\"color: #8fb28f; font-style: italic;\">\"Like `ido-find-file, but automatically edit the file with</span>
<span style=\"color: #8fb28f; font-style: italic;\">root-privileges (using tramp/sudo), if the file is not writable by</span>
<span style=\"color: #8fb28f; font-style: italic;\">user.\"</span>
  (interactive)
  (<span style=\"color: #bc8383; font-weight: bold;\">let</span> ((file (ido-read-file-name <span style=\"color: #6ca0a3;\">\"Edit as root: \"</span>)))
    (<span style=\"color: #bc8383; font-weight: bold;\">unless</span> (file-writable-p file)
      (<span style=\"color: #bc8383; font-weight: bold;\">setq</span> file (concat <span style=\"color: #6ca0a3;\">\"/sudo:root@localhost:\"</span> file)))
    (find-file file)))
<span style=\"color: #9fc59f;\">;; </span><span style=\"color: #7f9f7f; font-style: italic;\">or some other keybinding...</span>
(global-set-key (kbd <span style=\"color: #6ca0a3;\">\"C-x F\"</span>) 'djcb-find-file-as-root)
</pre>


<p>  
  We could take it one step further still – overload the normal
  <code>(ido-)find-file</code> with a version that checks the permissions first, and if
  needed, use the above function to open it. But maybe that is <i>too</i> easy; we
  should be careful with root-owned files after all.
</p></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Rubén Berenguel: Extensibility in the Acme text editor" "<span style=\"text-align: justify;\">Text editors. You hate them or love them. Praise them with religious zeal, and attack them with the same power. I've been an emacs user for the last 8 years, getting as deep as I could without checking the source. And the past few months I have started using evil-mode in emacs, to get some taste of vim in my daily editing (mostly text objects.)</span><br /><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There's still a third contestant in editor-land, for me. It is Acme, the odd editor from Plan9 from Outer Space, the even-more-odd operating system from Bell Labs. There's no need to install Plan9 and fight against your current hardware. If you are in any kind of Unix derivative (Mac OS, Linux) you can install Plan9 from User Space, a port of most of Plan9 to work in user space (as you may guess.) Plan9 is a whole different thing from other Unix systems, and Acme is an incredibly different beast from any other editor you know.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I can start with a screenshot of it:</div><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s1600/Screen+shot+2013-03-09+at+12.01.54+AM.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"242\" src=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s400/Screen+shot+2013-03-09+at+12.01.54+AM.png\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">This is how this post looks like. You can see an adict window by the side</td></tr></tbody></table><div style=\"text-align: justify;\">This is Acme. I hope you like this shade of yellow and this shade of blue. There's no way to change it without getting into the source code and recompiling. It may be sound odd, but I kind of like it. It's refreshing. In emacs and vim it is very easy to get a beautiful colour scheme (I use solarized-dark everywhere I can,) but this means you can choose. And choosing means a decision, with pros, cons and whatever. Just screw it and pick blue and yellow.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Once you are used to it, you have to face something \"worse.\" If you come from emacs or vim this will sound just horrible. Wait for it. Everything is done with the mouse. Yes, you read that well. No keyboard shortcuts (well, there are a few, I'll get into these in a short while.) Mouse clicking, moving and chording. The likes. I know this will sound stupid, a waste of time, prone to carpal tunnel syndrome. Let me go on for a while.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim users alike like to bash any other editor in the grounds of speed. I can refactor faster than you can, is almost the motto. Watch how fast I type, thus how fast I change code. I'm one of these, I usually don't even have to think when I'm doing \"something\" in emacs or vim and changing stuff. But then again, how often I'm changing stuff?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim make easy changing what's there. Multiple-marks, text objects, quick jumps. All this is there just to make changing stuff fast. Agree? Ok, go on. If you don't, no problem. Go on anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Now the revelation: most of the time I'm writing, I'm creating new stuff, not rewriting or moving old stuff. Shocking? Watch your own coding/writing habits. Yes, I change what's in text strings (ci\", in vim) and is incredibly fast. In Acme, you can double-click after the first quotation mark (or just before the last) to select everything inside a pair of delimiters (a pity it is not smart enough to understand dollar-delimiters as used by LaTeX.) But the point is not that speed. What are you changing this string for? Did you wait to think about it or you just changed it, compiled it, checked it and went back to square one?</div><h2>Pause: the file servers</h2><div style=\"text-align: justify;\">Acme and Plan9 follow a special philosophy: in some sense, everything is a file. And most programs (I could say all, but I'm not that into Plan9 to be sure) act as file servers. Acme is just one of these: everything you can see in an Acme session is a file. For example, this text I'm writing (you saw it in the previous screenshot) has window ID 10. So...</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/      <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is the directory associated to this text</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/addr<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with an address position for text insertions</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/body<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the contents of the editing window (can't overwrite)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/ctl<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) that allows you to send commands to the window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/data<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data of the editing window (can overwrite)<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span></span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/errors<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with data spat by commands executed by this window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/event<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) where you can read/write the editing session</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/tag<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file holding the contents of the tag (the menu above)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/xdata<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data (addr bound) of the editing window</span><br /></pre><br /><div style=\"text-align: justify;\">What does this mean? It means I can write code in any language that can manipulate this text. Read this out loud: I script something, and make it work with the text I'm editing. Think about indenting, linting, type-checking, done against the working copy, not the real file. With output to a special buffer associated to the file. Extending the editor is just a matter of writing a program.</div><h2>Back into Acme</h2><div style=\"text-align: justify;\">Back into Acme. In Acme there's no GUI: text is the user interface. TUI. Every window is composed of two pieces: the text in the window (its \"body\") and a tag above it (in blue.) If you want to copy something, select it and middle-click on Snarf. Then put your cursor where you want to paste and middle-click on Paste. Done. Of course, Snarf and Paste can be anywhere. In the tag menu, in the text you are editing or even in another document. They are just words. Words that do the work. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">But the same works with shell commands. I can type date and middle-click it, to get the current date in a new buffer. Same goes with ls. Or even |md5sum to calculate the checksum of some text. Or append something to a window. For example, there's an easy way to make small queries to Wikipedia via the command line (see http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns) I wrote a script to do it, sitting in my path, so I can now type here &lt;wikiCLI.sh Acme with the cursor a few lines below this... and middle click.</div><br />Result:<br /><blockquote class=\"tr_bq\">\"Acme (\\; , the peak, zenith, prime) denotes the best of something. Acme or ACME may also refer to: Acme Corporation, a fictional company in the cartoon world of Looney Tunes, ACME Detective Agency, a fictional detective agency from the Carmen Sandiego seri\" \"es of computer games and television shows, Acme (album), the sixth album by the Jon Spencer Blues Explosion, Acme Novelty... http://en.wikipedia.org/wiki/Acme\"</blockquote><h2>On button clicking</h2><div style=\"text-align: justify;\">I use a Macbook (almost 5 years old already, and still kicking.) And as you may guess, it only has one button. So, how do I manage to use middle and right clicking with ease? Well, easy. Or almost. Pressing alt while clicking simulates middle click, command while clicking simulates right clicking (in Acme, not in general.) Easy, since alt is in the middle and command just right to it. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Problem is, chording is most awesome with a real 3-button mouse. Why? I'd rather search for wikiCLI.sh Acme (text editor) to get:</div><br /><blockquote class=\"tr_bq\">;; Truncated, retrying in TCP mode.<br />\"Acme is a text editor and graphical shell from the Plan 9 from Bell Labs operating system, designed and implemented by Rob Pike. It can use the sam command language. The design of the interface was influenced by Oberon. It is different from other editing \" \"environments in that it acts as a 9P server. A distinctive element of the user interface is mouse chording... http://en.wikipedia.org/wiki/Acme_(text_editor)\"</blockquote><br /><div style=\"text-align: justify;\">Doing so is a little more troublesome: select \"Acme (text editor)\" and select the command with the second button (to execute) finally click: clicking sends the last selection as argument 1 to the program. Doing so with a Mac trackpad is impossible: there's no way to simulate a left-click while middle-clicking. I also find there's a glitch here: there's no way to redirect the output of the command. It's either overwriting the selection of the argument, or goes to the +Errors window.</div><h2>Selections, regexes and other furry animals</h2><div style=\"text-align: justify;\">How can I select everything? :0,$ and right-click. Done. Want to replace all instances of acme for Acme? Middle click this: Edit ,s,acme,Acme,g The sam syntax is easy but... odd. The first , is to select everything, s to replace acme for Acme, g for global. Easy? Not much, but Acme is just different. And works. Edit is the command to execute an editing command, by the way.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">You can also do regex searches. Like :/interface/ or :/click[i|.]/. And you can get fancy, by doing filename:&lt;search-or-position&gt;. For example, acmescripting:/interface/ in another window would open acmescripting in the first instance of interface. And acmescripting:20 opens it, selecting line 20. As you can see, filename is implied to be current file in case of doubt. Also, this kind of referencing works nice with most compilers and linters.</div><h2>Keyboard shortcuts</h2>There are a few keyboard shortcuts, even if Acme is mouse-centric. Press Esc, and all text written since the last click is selected. In addition to this, we have the other standards:<br /><br />C-U ‚Äì&gt; Delete from cursor to start of line.<br />C-W ‚Äì&gt; Delete word before the cursor.<br />C-H ‚Äì&gt; Delete character before the cursor.<br />C-A ‚Äì&gt; Move cursor to start of the line.<br />C-E ‚Äì&gt; Move cursor to end of the line.<br /><br />Nothing more, nothing less. Minimal, isn't it?<br /><h2>Scripting power</h2><div style=\"text-align: justify;\">Finally, I want to show some scripting power of acme. I introduced the concept of the filesystem a few paragraphs ago. Now, let's see how it can be used. Let's say for example I'm an avid C programmer, and like to have code neatly indented. Well, an option is to write a script that uses the indent command line program to indent the text in the window. How? Now comes a trivial example, not written in the best way possible</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#9indent</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | indent -st | 9p write acme/$winid/data</span><br /></pre><br />First is to check which is the ID of the window. When invoking a command, its environment has it in a variable, aptly named winid. To overwrite the contents of the file, we set the addr to the whole file with the selector 1,$. We do so by piping to 9p with the command write. 9p is the middleman, allowing us to read and write files in 9P servers, like the ones acme and other Plan9 programs offer. Finally we get the body, indent it (-st is the command to use stdin in indent) and pipe it to data. Done! This indents a well-formed C file as expected.<br /><br />Add this file to your path and add 9indent to your tag. Ready to indent by middle-clicking.<br /><br />A slightly more complex example is to generate the output of a Markdown file. The code is as follows:<br /><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">format=$(9p read acme/$winid/tag)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Tag is \" $format</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Format in tag\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">case $format in</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"latex\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"latex ouput selected\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"latex\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"groff-mm\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"groff-mm output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"groff-mm\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"odf\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"odf ouput selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"odf\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"html\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"html output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    * )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>echo \"Unrecognized format, defaulting to html\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">esac</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | peg-markdown --to=$format | 9p write acme/new/body</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Wrote the html-markdowned version to a new buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">last=$(9p ls acme | sort -g | tail -n 1)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Get last created buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"clean\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"0,0\" | 9p write acme/$last/addr        </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"dot=addr\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"show\" | 9p write acme/$last/ctl    </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Moved to beginning\"</span><br /></pre><br /><div style=\"text-align: justify;\">This is slightly more complex, at least on the shell side. It checks the tag for one of the accepted formats for peg-markdown and then creates the formatted output in a new window, by writing to acme/new/body. Then I want the cursor to be at the beginning of this file, not at the end (as is the default.) It was slightly tricky, but the best way was to sort in numerical order and get the last-created window (that's this tail -n 1) then to set the address at 0,0 and set the dot (selection) at address by writing at the control file. Then the command show makes the window show the selected position: 0,0. Done! Intersped among all this is a \"clean\" command, to make this new window to close.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Here you can see a video of these scripts in a sample use (and you'll see how I miss a middle click - execute -  for a right-click - open)<br /><br /></div><div style=\"text-align: justify;\"><div style=\"text-align: center;\"><br /></div></div><div style=\"text-align: justify;\"><br /></div><h2>Dirty, Clean, Put</h2><div style=\"text-align: justify;\">A window can be dirty or clean. It is clean when the contents and the disk file are the same. It is dirty when it is being edited. The best way to know if it is dirty is if you see \"Put\" in your tag menu, just beside the vertical bar. By middle-clicking Put (or Putall in the main tag) you save this file and mark it as clean. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Also, making a window clean makes closing it quicker (middle click in Del.) Dirty windows need to be Put, or you have to Del again. </div><h2>That's all, folks (for now)</h2><div style=\"text-align: justify;\">I have yet to introduce the plumber, a mechanism that allows you to open arbitrary files (using rules) from within acme. For example, I can open pdf files by right-clicking on them (i.e. some.pdf) but instead of using page (the Plan9 image viewer) I use MacOS Preview. I was forced to do so, since page can't handle all the fonts in a LaTeX generated PDF, so for me it's useless. I'll probably write how I configured the plumber in my next Acme installment.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">In some sense, the plumber is like a system-wide, app-deep \"open\" mechanism. In Mac OS, you can \"open\" almost anything from the command line. If you open an URL, your default browser opens it, if you open an image, Preview handles it. Plumbing is like \"open 3.0\" but it is hard to manage :/<br /><br />Below you can see another video with a simpler scripting: browsing reddit from the command line, inside acme. The Python code snippet that gets Reddit data is available in this gist: <a href=\"https://gist.github.com/rberenguel/5130837\">reddi.py</a></div><br /><div style=\"text-align: center;\"></div><div class=\"blogger-post-footer\"></div>" "http://www.mostlymaths.net/2013/03/extensibility-programming-acme-text-editor.html" (20804 25072) old 27 nil nil ((title ((type . "html")) "Rubén Berenguel: Extensibility in the Acme text editor") (link ((href . "http://www.mostlymaths.net/2013/03/extensibility-programming-acme-text-editor.html"))) (id nil "tag:blogger.com,1999:blog-13497321.post-5711027858515289357") (updated nil "2013-03-16T12:13:36+00:00") (content ((type . "html")) "<span style=\"text-align: justify;\">Text editors. You hate them or love them. Praise them with religious zeal, and attack them with the same power. I've been an emacs user for the last 8 years, getting as deep as I could without checking the source. And the past few months I have started using evil-mode in emacs, to get some taste of vim in my daily editing (mostly text objects.)</span><br /><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There's still a third contestant in editor-land, for me. It is Acme, the odd editor from Plan9 from Outer Space, the even-more-odd operating system from Bell Labs. There's no need to install Plan9 and fight against your current hardware. If you are in any kind of Unix derivative (Mac OS, Linux) you can install Plan9 from User Space, a port of most of Plan9 to work in user space (as you may guess.) Plan9 is a whole different thing from other Unix systems, and Acme is an incredibly different beast from any other editor you know.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">I can start with a screenshot of it:</div><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s1600/Screen+shot+2013-03-09+at+12.01.54+AM.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"242\" src=\"http://4.bp.blogspot.com/-QgzEWU2klyQ/UTtnqx_tBYI/AAAAAAAADic/7-ULG8Hbzck/s400/Screen+shot+2013-03-09+at+12.01.54+AM.png\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">This is how this post looks like. You can see an adict window by the side</td></tr></tbody></table><div style=\"text-align: justify;\">This is Acme. I hope you like this shade of yellow and this shade of blue. There's no way to change it without getting into the source code and recompiling. It may be sound odd, but I kind of like it. It's refreshing. In emacs and vim it is very easy to get a beautiful colour scheme (I use solarized-dark everywhere I can,) but this means you can choose. And choosing means a decision, with pros, cons and whatever. Just screw it and pick blue and yellow.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Once you are used to it, you have to face something \"worse.\" If you come from emacs or vim this will sound just horrible. Wait for it. Everything is done with the mouse. Yes, you read that well. No keyboard shortcuts (well, there are a few, I'll get into these in a short while.) Mouse clicking, moving and chording. The likes. I know this will sound stupid, a waste of time, prone to carpal tunnel syndrome. Let me go on for a while.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim users alike like to bash any other editor in the grounds of speed. I can refactor faster than you can, is almost the motto. Watch how fast I type, thus how fast I change code. I'm one of these, I usually don't even have to think when I'm doing \"something\" in emacs or vim and changing stuff. But then again, how often I'm changing stuff?</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Emacs and vim make easy changing what's there. Multiple-marks, text objects, quick jumps. All this is there just to make changing stuff fast. Agree? Ok, go on. If you don't, no problem. Go on anyway.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Now the revelation: most of the time I'm writing, I'm creating new stuff, not rewriting or moving old stuff. Shocking? Watch your own coding/writing habits. Yes, I change what's in text strings (ci\", in vim) and is incredibly fast. In Acme, you can double-click after the first quotation mark (or just before the last) to select everything inside a pair of delimiters (a pity it is not smart enough to understand dollar-delimiters as used by LaTeX.) But the point is not that speed. What are you changing this string for? Did you wait to think about it or you just changed it, compiled it, checked it and went back to square one?</div><h2>Pause: the file servers</h2><div style=\"text-align: justify;\">Acme and Plan9 follow a special philosophy: in some sense, everything is a file. And most programs (I could say all, but I'm not that into Plan9 to be sure) act as file servers. Acme is just one of these: everything you can see in an Acme session is a file. For example, this text I'm writing (you saw it in the previous screenshot) has window ID 10. So...</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/      <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is the directory associated to this text</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/addr<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with an address position for text insertions</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/body<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the contents of the editing window (can't overwrite)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/ctl<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) that allows you to send commands to the window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/data<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data of the editing window (can overwrite)<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span></span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/errors<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with data spat by commands executed by this window</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/event<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a \"file\" (socket-like) where you can read/write the editing session</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/tag<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file holding the contents of the tag (the menu above)</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">acme/10/xdata<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>is a file with the data (addr bound) of the editing window</span><br /></pre><br /><div style=\"text-align: justify;\">What does this mean? It means I can write code in any language that can manipulate this text. Read this out loud: I script something, and make it work with the text I'm editing. Think about indenting, linting, type-checking, done against the working copy, not the real file. With output to a special buffer associated to the file. Extending the editor is just a matter of writing a program.</div><h2>Back into Acme</h2><div style=\"text-align: justify;\">Back into Acme. In Acme there's no GUI: text is the user interface. TUI. Every window is composed of two pieces: the text in the window (its \"body\") and a tag above it (in blue.) If you want to copy something, select it and middle-click on Snarf. Then put your cursor where you want to paste and middle-click on Paste. Done. Of course, Snarf and Paste can be anywhere. In the tag menu, in the text you are editing or even in another document. They are just words. Words that do the work. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">But the same works with shell commands. I can type date and middle-click it, to get the current date in a new buffer. Same goes with ls. Or even |md5sum to calculate the checksum of some text. Or append something to a window. For example, there's an easy way to make small queries to Wikipedia via the command line (see http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns) I wrote a script to do it, sitting in my path, so I can now type here &lt;wikiCLI.sh Acme with the cursor a few lines below this... and middle click.</div><br />Result:<br /><blockquote class=\"tr_bq\">\"Acme (\\; , the peak, zenith, prime) denotes the best of something. Acme or ACME may also refer to: Acme Corporation, a fictional company in the cartoon world of Looney Tunes, ACME Detective Agency, a fictional detective agency from the Carmen Sandiego seri\" \"es of computer games and television shows, Acme (album), the sixth album by the Jon Spencer Blues Explosion, Acme Novelty... http://en.wikipedia.org/wiki/Acme\"</blockquote><h2>On button clicking</h2><div style=\"text-align: justify;\">I use a Macbook (almost 5 years old already, and still kicking.) And as you may guess, it only has one button. So, how do I manage to use middle and right clicking with ease? Well, easy. Or almost. Pressing alt while clicking simulates middle click, command while clicking simulates right clicking (in Acme, not in general.) Easy, since alt is in the middle and command just right to it. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Problem is, chording is most awesome with a real 3-button mouse. Why? I'd rather search for wikiCLI.sh Acme (text editor) to get:</div><br /><blockquote class=\"tr_bq\">;; Truncated, retrying in TCP mode.<br />\"Acme is a text editor and graphical shell from the Plan 9 from Bell Labs operating system, designed and implemented by Rob Pike. It can use the sam command language. The design of the interface was influenced by Oberon. It is different from other editing \" \"environments in that it acts as a 9P server. A distinctive element of the user interface is mouse chording... http://en.wikipedia.org/wiki/Acme_(text_editor)\"</blockquote><br /><div style=\"text-align: justify;\">Doing so is a little more troublesome: select \"Acme (text editor)\" and select the command with the second button (to execute) finally click: clicking sends the last selection as argument 1 to the program. Doing so with a Mac trackpad is impossible: there's no way to simulate a left-click while middle-clicking. I also find there's a glitch here: there's no way to redirect the output of the command. It's either overwriting the selection of the argument, or goes to the +Errors window.</div><h2>Selections, regexes and other furry animals</h2><div style=\"text-align: justify;\">How can I select everything? :0,$ and right-click. Done. Want to replace all instances of acme for Acme? Middle click this: Edit ,s,acme,Acme,g The sam syntax is easy but... odd. The first , is to select everything, s to replace acme for Acme, g for global. Easy? Not much, but Acme is just different. And works. Edit is the command to execute an editing command, by the way.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">You can also do regex searches. Like :/interface/ or :/click[i|.]/. And you can get fancy, by doing filename:&lt;search-or-position&gt;. For example, acmescripting:/interface/ in another window would open acmescripting in the first instance of interface. And acmescripting:20 opens it, selecting line 20. As you can see, filename is implied to be current file in case of doubt. Also, this kind of referencing works nice with most compilers and linters.</div><h2>Keyboard shortcuts</h2>There are a few keyboard shortcuts, even if Acme is mouse-centric. Press Esc, and all text written since the last click is selected. In addition to this, we have the other standards:<br /><br />C-U ‚Äì&gt; Delete from cursor to start of line.<br />C-W ‚Äì&gt; Delete word before the cursor.<br />C-H ‚Äì&gt; Delete character before the cursor.<br />C-A ‚Äì&gt; Move cursor to start of the line.<br />C-E ‚Äì&gt; Move cursor to end of the line.<br /><br />Nothing more, nothing less. Minimal, isn't it?<br /><h2>Scripting power</h2><div style=\"text-align: justify;\">Finally, I want to show some scripting power of acme. I introduced the concept of the filesystem a few paragraphs ago. Now, let's see how it can be used. Let's say for example I'm an avid C programmer, and like to have code neatly indented. Well, an option is to write a script that uses the indent command line program to indent the text in the window. How? Now comes a trivial example, not written in the best way possible</div><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#9indent</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | indent -st | 9p write acme/$winid/data</span><br /></pre><br />First is to check which is the ID of the window. When invoking a command, its environment has it in a variable, aptly named winid. To overwrite the contents of the file, we set the addr to the whole file with the selector 1,$. We do so by piping to 9p with the command write. 9p is the middleman, allowing us to read and write files in 9P servers, like the ones acme and other Plan9 programs offer. Finally we get the body, indent it (-st is the command to use stdin in indent) and pipe it to data. Done! This indents a well-formed C file as expected.<br /><br />Add this file to your path and add 9indent to your tag. Ready to indent by middle-clicking.<br /><br />A slightly more complex example is to generate the output of a Markdown file. The code is as follows:<br /><br /><pre><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">#!/bin/zsh</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"WinId is: \" $winid</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">format=$(9p read acme/$winid/tag)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Tag is \" $format</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Format in tag\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">case $format in</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"latex\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"latex ouput selected\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"latex\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"groff-mm\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"groff-mm output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"groff-mm\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"odf\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"odf ouput selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"odf\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    *\"html\"* )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        echo \"html output selected\" </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">        format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    * )</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>echo \"Unrecognized format, defaulting to html\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">    <span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>format=\"html\" ;;</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">esac</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"1,$\" | 9p write acme/$winid/addr</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Selected whole contents for overwriting with 'write'\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">9p read acme/$winid/body | peg-markdown --to=$format | 9p write acme/new/body</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Wrote the html-markdowned version to a new buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">last=$(9p ls acme | sort -g | tail -n 1)</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Get last created buffer\"</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"clean\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"0,0\" | 9p write acme/$last/addr        </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"dot=addr\" | 9p write acme/$last/ctl</span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo -n \"show\" | 9p write acme/$last/ctl    </span><br /><span style=\"font-family: Courier New, Courier, monospace; font-size: x-small;\">echo \"Moved to beginning\"</span><br /></pre><br /><div style=\"text-align: justify;\">This is slightly more complex, at least on the shell side. It checks the tag for one of the accepted formats for peg-markdown and then creates the formatted output in a new window, by writing to acme/new/body. Then I want the cursor to be at the beginning of this file, not at the end (as is the default.) It was slightly tricky, but the best way was to sort in numerical order and get the last-created window (that's this tail -n 1) then to set the address at 0,0 and set the dot (selection) at address by writing at the control file. Then the command show makes the window show the selected position: 0,0. Done! Intersped among all this is a \"clean\" command, to make this new window to close.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Here you can see a video of these scripts in a sample use (and you'll see how I miss a middle click - execute -  for a right-click - open)<br /><br /></div><div style=\"text-align: justify;\"><div style=\"text-align: center;\"><br /></div></div><div style=\"text-align: justify;\"><br /></div><h2>Dirty, Clean, Put</h2><div style=\"text-align: justify;\">A window can be dirty or clean. It is clean when the contents and the disk file are the same. It is dirty when it is being edited. The best way to know if it is dirty is if you see \"Put\" in your tag menu, just beside the vertical bar. By middle-clicking Put (or Putall in the main tag) you save this file and mark it as clean. </div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Also, making a window clean makes closing it quicker (middle click in Del.) Dirty windows need to be Put, or you have to Del again. </div><h2>That's all, folks (for now)</h2><div style=\"text-align: justify;\">I have yet to introduce the plumber, a mechanism that allows you to open arbitrary files (using rules) from within acme. For example, I can open pdf files by right-clicking on them (i.e. some.pdf) but instead of using page (the Plan9 image viewer) I use MacOS Preview. I was forced to do so, since page can't handle all the fonts in a LaTeX generated PDF, so for me it's useless. I'll probably write how I configured the plumber in my next Acme installment.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">In some sense, the plumber is like a system-wide, app-deep \"open\" mechanism. In Mac OS, you can \"open\" almost anything from the command line. If you open an URL, your default browser opens it, if you open an image, Preview handles it. Plumbing is like \"open 3.0\" but it is hard to manage :/<br /><br />Below you can see another video with a simpler scripting: browsing reddit from the command line, inside acme. The Python code snippet that gets Reddit data is available in this gist: <a href=\"https://gist.github.com/rberenguel/5130837\">reddi.py</a></div><br /><div style=\"text-align: center;\"></div><div class=\"blogger-post-footer\"></div>") (author nil (name nil "Rubén Berenguel") (email nil "noreply@blogger.com") (uri nil "http://www.mostlymaths.net/search/label/emacs")) (source nil (title ((type . "html")) "Mostly Maths") (subtitle ((type . "html")) "Programming for backyard gardeners, cooking for linux users, drawing for mathematicians. WTF?") (link ((rel . "self") (href . "http://www.blogger.com/feeds/13497321/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-13497321")))) ("Bryan Murdock: Free Verilog Simulators" "At <a href=\"http://dvcon.org/2013_home\">DVCon 2013</a> I asked <a href=\"http://www.coolverification.com/\">JL Gray</a>'s panel if we would ever have Free tools, like the software world.  None of panelists seemed to think so, one of the panelists, a Mentor employee, scoffed, \"you get what you pay for with free tools.\"  Never mind that their (and Cadence's and Synopsys's) products are very likely developed with tools that contain millions of lines of Free software.<br />
<br />
So, to work towards answering my own question, I spent a little time and looked for Free/Open Source verilog simulators.  Here's what I found:<br />
<br />
<a href=\"https://sites.google.com/site/iverilog/\">Icarus Verilog</a><br />
<br />
<a href=\"http://sourceforge.net/projects/gplcver/\">GPL Cver</a><br />
<br />
<a href=\"http://sourceforge.net/projects/pvsim/\">PVSim Verilog Simulator</a><br />
<br />
<a href=\"http://sourceforge.net/projects/veriwell/\">VeriWell Verilog Simulator</a><br />
<br />
I have personally used Icarus and Cver before, but not very extensively.  They were usable and seemed pretty complete, for Verilog.  None of the above claim any support of SystemVerilog except for Icarus.  The Icarus developer at one point expressed abhorrence at SystemVerilog but it seems support for some parts of the language have been added.<br />
<br />
PVSim and VeriWell were new to me.  I'll give them a try, hopefully soon, and post more information.<br />
<br />
Another one that should be mentioned is <a href=\"http://www.veripool.org/wiki/verilator\">Verilator</a>.  I have downloaded and played with this one too.  It only supports synthesizable Verilog, so have fun writting a testbench.  I think the intent is for you to write your testbench in C++, so if you like that idea than this could be a good one to try too.<br />
<br />
Did I miss any?<br />
<br />
<br />
<br />" "http://bryan-murdock.blogspot.com/2013/03/free-verilog-simulators.html" (20803 40026) old 28 nil nil ((title ((type . "html")) "Bryan Murdock: Free Verilog Simulators") (link ((href . "http://bryan-murdock.blogspot.com/2013/03/free-verilog-simulators.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-761717284478724751") (updated nil "2013-03-15T22:10:34+00:00") (content ((type . "html")) "At <a href=\"http://dvcon.org/2013_home\">DVCon 2013</a> I asked <a href=\"http://www.coolverification.com/\">JL Gray</a>'s panel if we would ever have Free tools, like the software world.  None of panelists seemed to think so, one of the panelists, a Mentor employee, scoffed, \"you get what you pay for with free tools.\"  Never mind that their (and Cadence's and Synopsys's) products are very likely developed with tools that contain millions of lines of Free software.<br />
<br />
So, to work towards answering my own question, I spent a little time and looked for Free/Open Source verilog simulators.  Here's what I found:<br />
<br />
<a href=\"https://sites.google.com/site/iverilog/\">Icarus Verilog</a><br />
<br />
<a href=\"http://sourceforge.net/projects/gplcver/\">GPL Cver</a><br />
<br />
<a href=\"http://sourceforge.net/projects/pvsim/\">PVSim Verilog Simulator</a><br />
<br />
<a href=\"http://sourceforge.net/projects/veriwell/\">VeriWell Verilog Simulator</a><br />
<br />
I have personally used Icarus and Cver before, but not very extensively.  They were usable and seemed pretty complete, for Verilog.  None of the above claim any support of SystemVerilog except for Icarus.  The Icarus developer at one point expressed abhorrence at SystemVerilog but it seems support for some parts of the language have been added.<br />
<br />
PVSim and VeriWell were new to me.  I'll give them a try, hopefully soon, and post more information.<br />
<br />
Another one that should be mentioned is <a href=\"http://www.veripool.org/wiki/verilator\">Verilator</a>.  I have downloaded and played with this one too.  It only supports synthesizable Verilog, so have fun writting a testbench.  I think the intent is for you to write your testbench in C++, so if you like that idea than this could be a good one to try too.<br />
<br />
Did I miss any?<br />
<br />
<br />
<br />") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Alex Bennée: On the death of Google Reader" "<p>You can probably tell the sort of on-line company I keep from the deluge of noise on the social networks regarding Google’s decision to shut down Reader. However we shouldn’t be that surprised. In fact some companies that source content from Reader <a href=\"http://blog.feedly.com/2013/03/14/google-reader/\">have anticipated the need to collect content themselves</a>.</p>
<p>I of course will have to make a decision at some point. However I’ll not do it today like a lot of Reader users have. The rush to try out alternatives has over-whelmed some <a href=\"https://twitter.com/samuelclay\">open source based projects</a> who were quietly growing organically. I don’t envy those that have to suddenly gear up their back-end systems because an Internet behemoth gave us 2593 hours notice to sort out a replacement.</p>
<p>I’m mulling over the difference between self-hosting and having someone else do it. I’m not overly worried about going for convenience if I know I can get my data back if I need to. In fact the knowledge that you can theoretically self-host might be enough. To be fair to Google their <a href=\"http://www.dataliberation.org/\">Data Liberation</a> team made exporting all my Reader data easy.</p>
<p>Before I make a choice I need to decide what my priorities are. Currently I subscribe to 250+ RSS feeds. Obviously I don’t read every single post but I make extensive use of tags to quickly process through stuff I do need to see when I need to see it. Aside from news, blog posts, funny cat pictures I also subscribe to other data feeds like bug trackers, code repositories, and other data sources. I of course want access to all of this data at any point on one of a number of devices. This makes a web hosted solution pretty much a must. There is no point having the data on my desktop when I’m somewhere else. From my point of view I want it to be open source compatible because if the company hosting now decides it no longer wants to I’ll only have to move the data and not break my work-flow.</p>
<p>It would also be very useful if it had a public API so others can interact with the data. I don’t need the solution to be all provided by one company. It’s perfectly fine to have multiple 3rd parties sorting out the Android integration. I might even look to doing something to integrate it with my favourite editor (the name of which even my non-geek readers probably know by now). So far my experiment with moving all of IRC and IM into Emacs seems to be working well and should be a subject of another post.</p>
<p>Are you a Reader user? What are your criteria for it’s eventual replacement? Is RSS just a dying protocol or is the need to aggregate and sift through data becoming more important?</p>
<p>There may well be a much better way of solving this problem around the corner. I certainly am open to persuasion. But don’t take away my current preferred solution until I’m convinced I’m ready to switch <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>" "http://www.bennee.com/~alex/blog/2013/03/14/on-the-death-of-google-reader/" (20802 19557) old 29 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Alex Bennée: On the death of Google Reader") (link ((href . "http://www.bennee.com/~alex/blog/2013/03/14/on-the-death-of-google-reader/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2652") (updated nil "2013-03-14T22:17:09+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>You can probably tell the sort of on-line company I keep from the deluge of noise on the social networks regarding Google’s decision to shut down Reader. However we shouldn’t be that surprised. In fact some companies that source content from Reader <a href=\"http://blog.feedly.com/2013/03/14/google-reader/\">have anticipated the need to collect content themselves</a>.</p>
<p>I of course will have to make a decision at some point. However I’ll not do it today like a lot of Reader users have. The rush to try out alternatives has over-whelmed some <a href=\"https://twitter.com/samuelclay\">open source based projects</a> who were quietly growing organically. I don’t envy those that have to suddenly gear up their back-end systems because an Internet behemoth gave us 2593 hours notice to sort out a replacement.</p>
<p>I’m mulling over the difference between self-hosting and having someone else do it. I’m not overly worried about going for convenience if I know I can get my data back if I need to. In fact the knowledge that you can theoretically self-host might be enough. To be fair to Google their <a href=\"http://www.dataliberation.org/\">Data Liberation</a> team made exporting all my Reader data easy.</p>
<p>Before I make a choice I need to decide what my priorities are. Currently I subscribe to 250+ RSS feeds. Obviously I don’t read every single post but I make extensive use of tags to quickly process through stuff I do need to see when I need to see it. Aside from news, blog posts, funny cat pictures I also subscribe to other data feeds like bug trackers, code repositories, and other data sources. I of course want access to all of this data at any point on one of a number of devices. This makes a web hosted solution pretty much a must. There is no point having the data on my desktop when I’m somewhere else. From my point of view I want it to be open source compatible because if the company hosting now decides it no longer wants to I’ll only have to move the data and not break my work-flow.</p>
<p>It would also be very useful if it had a public API so others can interact with the data. I don’t need the solution to be all provided by one company. It’s perfectly fine to have multiple 3rd parties sorting out the Android integration. I might even look to doing something to integrate it with my favourite editor (the name of which even my non-geek readers probably know by now). So far my experiment with moving all of IRC and IM into Emacs seems to be working well and should be a subject of another post.</p>
<p>Are you a Reader user? What are your criteria for it’s eventual replacement? Is RSS just a dying protocol or is the need to aggregate and sift through data becoming more important?</p>
<p>There may well be a much better way of solving this problem around the corner. I certainly am open to persuasion. But don’t take away my current preferred solution until I’m convinced I’m ready to switch <img alt=\";-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_wink.gif\" /> </p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog")))) ("Aaron Hawley: M-x in Emacs 24.3 is now in Lisp" "It didn't make the NEWS file for Emacs 24.3, but Emacs now ships with an `<kbd>M-x</kbd>' (`<code>execute-extended-command</code>') that is written in Lisp.  It is no longer written in C.  This should make it easy for users to extend and do new things with this command (execute command name at point, display prefix arguments numerically, ...) by easily redefining it.  Although, it was possible to \"advise\" the C implementation before given Emacs good advising system with `<code>defadvice</code>'.<br /><br />I had talked about <a href=\"http://aaronhawley.livejournal.com/26901.html\" rel=\"nofollow\">Coding Emacs's M-x in Lisp</a> on this blog over 3 years ago.  It was accepted in Emacs after I finally got around to <a href=\"http://lists.gnu.org/archive/html/gnu-emacs-sources/2012-03/msg00003.html\" rel=\"nofollow\">posting the code to gnu-emacs-sources</a> last year.<br /><br />Thanks to Stefan Monnier, one of the lead maintainers, for doing most of the leg work of merging these bits into Emacs." "http://aaronhawley.livejournal.com/30636.html" (20799 14394) old 30 nil nil ((title ((type . "html")) "Aaron Hawley: M-x in Emacs 24.3 is now in Lisp") (link ((href . "http://aaronhawley.livejournal.com/30636.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:30636") (updated nil "2013-03-12T14:14:18+00:00") (content ((type . "html")) "It didn't make the NEWS file for Emacs 24.3, but Emacs now ships with an `<kbd>M-x</kbd>' (`<code>execute-extended-command</code>') that is written in Lisp.  It is no longer written in C.  This should make it easy for users to extend and do new things with this command (execute command name at point, display prefix arguments numerically, ...) by easily redefining it.  Although, it was possible to \"advise\" the C implementation before given Emacs good advising system with `<code>defadvice</code>'.<br /><br />I had talked about <a href=\"http://aaronhawley.livejournal.com/26901.html\" rel=\"nofollow\">Coding Emacs's M-x in Lisp</a> on this blog over 3 years ago.  It was accepted in Emacs after I finally got around to <a href=\"http://lists.gnu.org/archive/html/gnu-emacs-sources/2012-03/msg00003.html\" rel=\"nofollow\">posting the code to gnu-emacs-sources</a> last year.<br /><br />Thanks to Stefan Monnier, one of the lead maintainers, for doing most of the leg work of merging these bits into Emacs.") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))))